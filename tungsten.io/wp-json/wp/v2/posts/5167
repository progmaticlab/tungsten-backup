{"id":5167,"date":"2014-10-11T23:14:18","date_gmt":"2014-10-11T23:14:18","guid":{"rendered":"http:\/\/23.253.246.131\/?p=5167"},"modified":"2014-10-11T23:14:18","modified_gmt":"2014-10-11T23:14:18","slug":"openvpn-in-a-vm-running-in-an-opencontrail-subnet","status":"publish","type":"post","link":"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/","title":{"rendered":"OpenVPN in a VM running in an OpenContrail subnet"},"content":{"rendered":"<p><strong><em><span style=\"color: #777777;\">This technical deep-dive blog from Yves Gwenael discusses in detail how you can set a VPN to access your VMs using OpenVPN running in an OpenContrail subnet. Today, OpenStack provides VPNaaS, however OpenContrail has not yet implemented this feature. As an interim solution, Yves lays out how OpenVPN can be used in conjunction with OpneContrail to create VPnaaS.<\/span><\/em><\/strong><\/p>\n<p><strong><em>Please visit the following link to read further: \u00a0<a href=\"http:\/\/dev.cloudwatt.com\/en\/blog\/openvpn-in-a-vm-running-in-an-opencontrail-subnet.html\" target=\"_blank\">http:\/\/dev.cloudwatt.com\/en\/blog\/openvpn-in-a-vm-running-in-an-opencontrail-subnet.html<\/a><\/em><\/strong><\/p>\n<p style=\"color: #747474;\">OpenStack provides\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/docs.openstack.org\/api\/openstack-network\/2.0\/content\/vpnaas_ext.html\">VPNaaS<\/a>, however it is not yet implemented with\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/opencontrail.org\/\">OpenContrail<\/a>, so you will not be able to use it yet on an OpenContrail infrastructure.<\/p>\n<p style=\"color: #747474;\">OpenContrail does not allow (for security reasons) traffic from IPs and MAC address which aren\u2019t configured ports in the network, so a VPN in \u201c<a style=\"color: #3498db;\" href=\"http:\/\/en.wikipedia.org\/wiki\/Bridging_(networking)\">bridging<\/a>\u201d mode will not work until the\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/docs.openstack.org\/api\/openstack-network\/2.0\/content\/allowed_address_pair_ext.html\">Allowed address pairs<\/a>\u00a0plugin is released (it has however just been merged on the \u201cmaster\u201d trunk recently), and neither would a VPN in\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/en.wikipedia.org\/wiki\/Routing\">routing mode<\/a>\u00a0(see<a style=\"color: #3498db;\" href=\"https:\/\/community.openvpn.net\/openvpn\/wiki\/BridgingAndRouting\">OpenVPN bridging vs. routing<\/a>) work until the\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/docs.openstack.org\/api\/openstack-network\/2.0\/content\/extraroute-ext.html\">Extra routes<\/a>\u00a0plugin supports OpenContrail.<\/p>\n<p><!--more Read more...--><\/p>\n<p style=\"color: #747474;\">So how can we set a VPN to access our VMs without waiting for the mentioned features and plugins to be available (sure they will be soon however) for OpenContrail? There is a solution by using OpenVPN in\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/en.wikipedia.org\/wiki\/IP_forwarding_algorithm\">routing<\/a>\u00a0mode and by\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/en.wikipedia.org\/wiki\/Network_address_translation\">masquerading<\/a>\u00a0the VPN clients. This is what we intend to do in this tutorial.<\/p>\n<p style=\"color: #747474;\">Before we start, many people ask why we configure OpenVPN on UDP instead of TCP? If you ask yourself the same question, Well you must know that the VPN\u2019s UDP packets when \u201cencapsulating\u201d a TCP packet to transfer, the TCP protocol will be properly handled \u201cafter\u201d de-encapsulation on the other side! There is no reason for encapsulating a UDP packet in a TCP packet (which would be the case with a TCP tunnel), and even less reasons for encapsulating a TCP packet in another TCP packet. Please read\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/sites.inka.de\/~bigred\/devel\/tcp-tcp.html\">Why TCP Over TCP Is A Bad Idea<\/a>\u00a0for detailed drawbacks of using TCP when tunneling.<\/p>\n<p style=\"color: #747474;\">In this Tutorial we will describe a fully manual procedure for \u201cthose who want to know\u201d :-), full\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/dev.cloudwatt.com\/en\/blog\/openvpn-in-a-vm-running-in-an-opencontrail-subnet.html#Full server configuration file example\">server configuration<\/a>\u00a0and\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/dev.cloudwatt.com\/en\/blog\/openvpn-in-a-vm-running-in-an-opencontrail-subnet.html#Full client configuration file example\">client configuration<\/a>\u00a0example files, and a<a style=\"color: #3498db;\" href=\"http:\/\/dev.cloudwatt.com\/en\/blog\/openvpn-in-a-vm-running-in-an-opencontrail-subnet.html#Deployment via Heat\">Deployment via Heat<\/a>\u00a0for the ones who are in a hurry \ud83d\ude42<\/p>\n<h2 id=\"requirements\" style=\"font-weight: 500; color: #444444;\">Requirements:<\/h2>\n<p style=\"color: #747474;\">We will not explain how to spawn a VM, because if you read this, we consider that you have already gone through our\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/support.cloudwatt.com\/debuter\/index.html\">Getting started<\/a>\u00a0documentation, and you already have an OpenStack Virtual network with some VMs running. Here We will explain how to set up an OpenVPN so that you can access all the VMs which are inside your OpenStack private network.<\/p>\n<p style=\"color: #747474;\">So first, simply spawn a VM running in your private network, and give it a floating IP. This documentation is how to configure OpenVPN on either a CentOS\/RHEL or Ubuntu VM.<\/p>\n<h3 id=\"allow-ssh-and-openvpn-trafic-towards-your-openvpn-vm\" style=\"font-weight: 500; color: #444444;\">Allow SSH and OpenVPN Trafic towards your OpenVPN VM<\/h3>\n<p style=\"color: #747474;\">List your security groups:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>neutron security-group-list<\/code><\/span><\/pre>\n<p>Note the ID of the security group you assigned to the VM you will use as an OpenVPN server, and allow the following rules:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>neutron security-group-rule-create --direction ingress --remote-ip-prefix 0.0.0.0\/0 --protocol udp --port-range-min 1194 --port-range-max 1194 # Allow OpenVPN\n neutron security-group-rule-create --direction ingress --remote-ip-prefix 0.0.0.0\/0 --protocol tcp --port-range-min 22 --port-range-max 22 # Allow SSH<\/code><\/span><\/pre>\n<h3 id=\"install-openvpn-and-easy-rsa\" style=\"font-weight: 500; color: #444444;\">Install openvpn and easy-rsa<\/h3>\n<p style=\"color: #747474;\">Log onto your VM, and su to root:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo su -<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">And install OpenVPN:<\/p>\n<h4 id=\"on-centosrhel\" style=\"font-weight: 500; color: #444444;\">On Centos\/RHEL:<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>yum install openvpn easy-rsa<\/code><\/span><\/pre>\n<h4 id=\"on-ubuntu\" style=\"font-weight: 500; color: #444444;\">On Ubuntu:<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>apt-get install openvpn\n # on Ubuntu &gt; 12.04 easy-rsa has been stripped out from openvpn\n apt-get install easy-rsa # only on Ubuntu &gt; 12.04<\/code><\/span><\/pre>\n<h2 id=\"server-configuration\" style=\"font-weight: 500; color: #444444;\">Server configuration<\/h2>\n<p style=\"color: #747474;\">Once openvpn is installed, go in the openvpn directory:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>cd \/etc\/openvpn<\/code><\/span><\/pre>\n<h3 id=\"copy-the-easy-rsa-scripts\" style=\"font-weight: 500; color: #444444;\">Copy the easy-rsa scripts<\/h3>\n<h4 id=\"on-centosrhel-1\" style=\"font-weight: 500; color: #444444;\">On Centos\/RHEL:<\/h4>\n<pre><code> cp -r \/usr\/share\/easy-rsa\/2.0 \/etc\/openvpn\/easy-rsa\n cd \/etc\/openvpn\/easy-rsa\n ln -s openssl-1.0.0.cnf openssl.cnf<\/code><\/pre>\n<h4 id=\"on-ubuntu--1204\" style=\"font-weight: 500; color: #444444;\">On Ubuntu &gt; 12.04:<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> cp -r \/usr\/share\/easy-rsa \/etc\/openvpn\/\n cd \/etc\/openvpn\/easy-rsa\n ln -s openssl-1.0.0.cnf openssl.cnf<\/code><\/span><\/pre>\n<h4 id=\"on-ubuntu-1204\" style=\"font-weight: 500; color: #444444;\">On Ubuntu 12.04:<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> cp -r \/usr\/share\/doc\/openvpn\/examples\/easy-rsa\/2.0 \/etc\/openvpn\/easy-rsa\n cd \/etc\/openvpn\/easy-rsa\n ln -s openssl-1.0.0.cnf openssl.cnf<\/code><\/span><\/pre>\n<h3 id=\"generate-the-certificates\" style=\"font-weight: 500; color: #444444;\">Generate the certificates:<\/h3>\n<h4 id=\"pki-configuration\" style=\"font-weight: 500; color: #444444;\">PKI configuration<\/h4>\n<p style=\"color: #747474;\">Edit the\u00a0<em>vars\u00a0<\/em>file in your\u00a0<em>\/etc\/openvpn\/easy-rsa<\/em>\u00a0directory and adapt all the\u00a0<em>export KEY_*<\/em>\u00a0variables to your liking (especially:<em>\u00a0KEY_SIZE<\/em>,<em>KEY_COUNTRY<\/em>,\u00a0<em>KEY_PROVINCE<\/em>,\u00a0<em>KEY_CITY<\/em>,\u00a0<em>KEY_ORG<\/em>,\u00a0<em>KEY_EMAIL<\/em>,\u00a0<em>KEY_OU<\/em>), and then source this file:<\/p>\n<p><code>source .\/vars<\/code><\/p>\n<p><strong style=\"color: #747474;\">Note:<\/strong><span style=\"color: #747474;\">\u00a0If you logged out\/in, you will have to run the above command again before running any script in the\u00a0<\/span><em>\/etc\/openvpn\/easy-rsa<\/em><span style=\"color: #747474;\">\u00a0directory.<\/span><\/p>\n<h4 id=\"initialize-the-pki\" style=\"font-weight: 500; color: #444444;\">Initialize the PKI<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>.\/clean-all<\/code><\/span><\/pre>\n<p><span style=\"color: #747474;\">(Never run this command again unless you want to destroy all certificates in the keys\u00a0<\/span><em>\/etc\/openvpn\/easy-rsa\/keys<\/em><span style=\"color: #747474;\">\u00a0directory an recreate new ones.)<\/span><\/p>\n<h4 id=\"generate-the-diffie-hellman\" style=\"font-weight: 500; color: #444444;\">Generate the Diffie Hellman<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>.\/build-dh<\/code><\/span><\/pre>\n<address><strong>Note:<\/strong>\u00a0this can take a long time. The bigger the KEY_SIZE (set in the vars file) the longer it takes. If KEY_SIZE is set to 2048 bits, it takes several minutes, but depending on the size (flavor) of your VM, if it has only one CPU and 1 Gb of RAM, a 4096 bits Diffie Hellman generation time can take more than an hour.<\/address>\n<h4 id=\"create-your-own-ca\" style=\"font-weight: 500; color: #444444;\">Create your own CA:<\/h4>\n<p style=\"color: #747474;\">We create the\u00a0<em>ca.crt<\/em>\u00a0and\u00a0<em>ca.key<\/em>\u00a0files in the\u00a0<em>keys\u00a0<\/em>subdirectory:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>.\/build-ca<\/code><\/span><\/pre>\n<h4 id=\"create-your-servers-certificate\" style=\"font-weight: 500; color: #444444;\">Create your server\u2019s certificate:<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>.\/build-key-server My_Server_Name<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Hit the \u201center\u201d key when prompted for a password because the server needs a password-less certificate.<\/p>\n<p style=\"color: #747474;\">Hit the \u201cy\u201d key when prompted to Sign the certificate, and when prompted to commit.<\/p>\n<p style=\"color: #747474;\">Now in the\u00a0<em>keys\u00a0<\/em>subdirectory we have generated the\u00a0<em>My_Server_Name.crt<\/em>,\u00a0<em>My_Server_Name.csr<\/em>\u00a0and\u00a0<em>My_Server_Name.key<\/em>\u00a0files.<\/p>\n<h4 id=\"create-a-secret-shared-key\" style=\"font-weight: 500; color: #444444;\">Create a secret shared key<\/h4>\n<p style=\"color: #747474;\">To\u00a0<a style=\"color: #3498db;\" href=\"https:\/\/openvpn.net\/index.php\/open-source\/documentation\/howto.html#security\">Harden OpenVPN Security<\/a>, in order to avoid DoS attacks or port flooding on the OpenVPN UDP port (and other nasty things) we create a secret shared key:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>openvpn --genkey --secret keys\/ta.key<\/code><\/span><\/pre>\n<h4 id=\"create-a-certificate-revocation-list\" style=\"font-weight: 500; color: #444444;\">Create a certificate revocation list:<\/h4>\n<p style=\"color: #747474;\">In order to create a certificate revocation list, we create a certificate which we immediately revoke:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> .\/build-key revoked\n .\/revoke-full revoked<\/code><\/span><\/pre>\n<p><span style=\"color: #747474;\">When revoking a certificate, the\u00a0<\/span><em>revoke-full<\/em><span style=\"color: #747474;\">\u00a0script checks if the certificate is still valid, so the following error message simply means the revocation worked successfully:<\/span><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>error 23 at 0 depth lookup:certificate revoked<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Now in the\u00a0<em>keys\u00a0<\/em>subdirectory we have generated the revoked certificate keys and a\u00a0<em>crl.pem<\/em>\u00a0revocation list.<\/p>\n<h3 id=\"edit-the-server-configuration-file\" style=\"font-weight: 500; color: #444444;\">Edit the server configuration file<\/h3>\n<h4 id=\"copy-the-server-sample-configuration-file\" style=\"font-weight: 500; color: #444444;\">Copy the server sample configuration file<\/h4>\n<h5 id=\"on-centosrhel-2\" style=\"font-weight: 500; color: #6d7579;\">On Centos\/RHEL:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> cp \/usr\/share\/doc\/openvpn-2.3.2\/sample\/sample-config-files\/server.conf \/etc\/openvpn\/\n cd \/etc\/openvpn<\/code><\/span><\/pre>\n<h5 id=\"on-ubuntu-1\" style=\"font-weight: 500; color: #6d7579;\">On Ubuntu:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> cp \/usr\/share\/doc\/openvpn\/examples\/sample-config-files\/server.conf.gz \/etc\/openvpn\/\n cd \/etc\/openvpn\n gunzip server.conf.gz<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Then edit the\u00a0<em>server.conf<\/em>\u00a0file with your favorite editor to perform the changes explained in the next section. NOTE: lines starting with\u00a0<em>#<\/em>\u00a0are comments, and lines starting with\u00a0<em>;<\/em>\u00a0are not activated (just suggestions). Removing the\u00a0<em>;<\/em>\u00a0activates the setting.<\/p>\n<h4 id=\"point-to-the-server-certificates\" style=\"font-weight: 500; color: #444444;\">Point to the server certificates<\/h4>\n<p style=\"color: #747474;\">Replace:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> ca ca.crt\n cert server.crt\n key server.key # This file should be kept secret<\/code><\/span><\/pre>\n<p><span style=\"color: #747474;\">by:<\/span><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> ca \/etc\/openvpn\/easy-rsa\/keys\/My_Server_Name.crt\n cert \/etc\/openvpn\/easy-rsa\/keys\/My_Server_Name.crt\n key \/etc\/openvpn\/easy-rsa\/keys\/My_Server_Name.key # This file should be kept secret<\/code><\/span><\/pre>\n<h4 id=\"use-the-diffie-hellman-we-generated\" style=\"font-weight: 500; color: #444444;\">Use the Diffie Hellman we generated<\/h4>\n<p style=\"color: #747474;\">Replace:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>dh dh1024.pem<\/code><\/span><\/pre>\n<p>by:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>dh \/etc\/openvpn\/easy-rsa\/keys\/dh2048.pem<\/code><\/span><\/pre>\n<p>(The above example is if you have set KEY_SIZE=2048 in your\u00a0<em>vars<\/em>\u00a0file, you may have in\u00a0<em>\/etc\/openvpn\/easy-rsa\/keys\/<\/em>\u00a0e.g.:\u00a0<em>dh1024.pem<\/em>\u00a0or\u00a0<em>dh2048.pem<\/em>or\u00a0<em>dh4096.pem<\/em>\u00a0etc\u2026 depending on the KEY_SIZE)<\/p>\n<h4 id=\"use-the-secret-shared-key\" style=\"font-weight: 500; color: #444444;\">Use the secret shared key<\/h4>\n<p style=\"color: #747474;\">Uncomment the following line by removing the leading\u00a0<em>;<\/em>\u00a0and point to the proper key by replacing:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>;tls-auth ta.key 0 # This file is secret<\/code><\/span><\/pre>\n<p>by:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>tls-auth \/etc\/openvpn\/easy-rsa\/keys\/ta.key 0<\/code><\/span><\/pre>\n<h4 id=\"check-against-the-revocation-list-to-refuse-revoked-clients\" style=\"font-weight: 500; color: #444444;\">Check against the revocation list to refuse revoked clients<\/h4>\n<p style=\"color: #747474;\">Add the following lines:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code># CRL (certificate revocation list) verification\n crl-verify \/etc\/openvpn\/easy-rsa\/keys\/crl.pem<\/code><\/span><\/pre>\n<h4 id=\"configure-the-servers-logs\" style=\"font-weight: 500; color: #444444;\">Configure the server\u2019s logs<\/h4>\n<p style=\"color: #747474;\">Uncomment:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>log openvpn.log<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">You can prepend\u00a0<em>openvpn.log<\/em>\u00a0by a full path to where you want to place the logs. (by default it will be in the same directory as the configuration file). If you do so, you can also do the same to the\u00a0<em>status openvpn-status.log<\/em>\u00a0and\u00a0<em>ifconfig-pool-persist ipp.txt<\/em>\u00a0lines.<\/p>\n<h4 id=\"configure-the-vpn-and-the-routes-to-the-networks-to-which-you-want-the-clients-to-access\" style=\"font-weight: 500; color: #444444;\">Configure the VPN and the routes to the networks to which you want the clients to access<\/h4>\n<p style=\"color: #747474;\">By default, the server sample config file we took creates a VPN on the 10.8.0.0\/24 CIDR. This is the IP range used for tunneling and has to be different from both the network you are in and the one you wish to reach. You can leave as-is if your openstack private-network and you own local network is NOT in this CIDR, otherwise change it by modifying the line:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>server 10.8.0.0 255.255.255.0<\/code><\/span><\/pre>\n<address><strong style=\"color: #747474;\">Note:<\/strong><span style=\"color: #747474;\">\u00a0just like for your OpenStack private networks, you need to set an\u00a0<\/span><a style=\"color: #3498db;\" href=\"http:\/\/tools.ietf.org\/html\/rfc1918\">RFC1918<\/a><span style=\"color: #747474;\">\u00a0CIDR (<\/span><a style=\"color: #3498db;\" href=\"http:\/\/en.wikipedia.org\/wiki\/Private_network\">Example<\/a><span style=\"color: #747474;\">)<\/span><\/address>\n<p><span style=\"color: #747474;\">Then, if e.g. your OpenStack private network (the one in which the VM runs and where you want to access) is\u00a0<\/span><em>172.16.0.0\/24<\/em><span style=\"color: #747474;\">, add:<\/span><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>push \"route 172.16.0.0 255.255.255.0\"<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">You can push routes to as many networks you have in your openstack infrastructure, as long as you have routers in between them.<\/p>\n<p style=\"color: #747474;\">If you want to know how to convert\u00a0<em>172.16.0.0\/24<\/em>\u00a0CIDR notation to\u00a0<em>172.16.0.0 255.255.255.0<\/em>\u00a0(ASDRESS and NETMASK) notation, here are nice tools:<\/p>\n<ul style=\"color: #747474;\">\n<li><a style=\"color: #3498db;\" href=\"http:\/\/jodies.de\/ipcalc\">ipcalc<\/a><\/li>\n<li><a style=\"color: #3498db;\" href=\"http:\/\/www.routemeister.net\/projects\/sipcalc\/\">sipcalc<\/a><\/li>\n<li><a style=\"color: #3498db;\" href=\"http:\/\/www.iem.uni-due.de\/~dreibh\/subnetcalc\/\">subnetcalc<\/a><\/li>\n<\/ul>\n<p style=\"color: #747474;\">They are installable (with\u00a0<em>apt-get install<\/em>\u00a0or\u00a0<em>yum install<\/em>\u00a0depending on your distro).<\/p>\n<h4 id=\"configure-the-masquerading\" style=\"font-weight: 500; color: #444444;\">Configure the masquerading<\/h4>\n<p style=\"color: #747474;\">The masquerading will be activated by external scripts we will have to create.<\/p>\n<p style=\"color: #747474;\">First, we configure in\u00a0<em>server.conf<\/em>\u00a0the scripts we wish to launch by adding:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> script-security 2 # Required so that openvpn accepts launching external scripts\n route-up \/etc\/openvpn\/route-up.sh # Script launched once the VPN is up and routes established.\n down \/etc\/openvpn\/down.sh # Script launched when openvpn terminates.<\/code><\/span><\/pre>\n<p>Now you can save the changes in\u00a0<em>server.conf<\/em>\u00a0and we have to create the\u00a0<em>route-up.sh<\/em>\u00a0and\u00a0<em>down.sh<\/em>\u00a0scripts<\/p>\n<h4 id=\"create-the-script-which-activates-masquerading-when-launching-the-server\" style=\"font-weight: 500; color: #444444;\">Create the script which activates masquerading when launching the server<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> cat &gt; \/etc\/openvpn\/route-up.sh &lt; \/etc\/openvpn\/net.ipv4.conf.all.forwarding.bak\n \/sbin\/sysctl net.ipv4.conf.all.forwarding=1\n \/sbin\/iptables-save &gt; \/etc\/openvpn\/iptables.save\n \/sbin\/iptables -t nat -F\n \/sbin\/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 -j MASQUERADE\n EOF\n chmod +x \/etc\/openvpn\/route-up.sh<\/code><\/span><\/pre>\n<h4 id=\"create-the-scripts-which-deactivate-masquerading-when-stopping-the-server\" style=\"font-weight: 500; color: #444444;\">Create the scripts which deactivate masquerading when stopping the server<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>cat &gt; \/etc\/openvpn\/down.sh &lt;&lt;EOF\n #!\/bin\/bash\n FORWARDING=$(cat \/etc\/openvpn\/net.ipv4.conf.all.forwarding.bak)\n echo \"restoring net.ipv4.conf.all.forwarding=$FORWARDING\"\n \/sbin\/sysctl net.ipv4.conf.all.forwarding=$FORWARDING\n \/etc\/openvpn\/fw.stop\n echo \"Restoring iptables\"\n \/sbin\/iptables-restore &lt; \/etc\/openvpn\/iptables.save EOF cat &gt; \/etc\/openvpn\/fw.stop &lt;&lt;EOF\n #!\/bin\/sh\n echo \"Stopping firewall and allowing everyone...\"\n \/sbin\/iptables -F\n \/sbin\/iptables -X\n \/sbin\/iptables -t nat -F\n \/sbin\/iptables -t nat -X\n \/sbin\/iptables -t mangle -F\n \/sbin\/iptables -t mangle -X\n \/sbin\/iptables -P INPUT ACCEPT\n \/sbin\/iptables -P FORWARD ACCEPT\n \/sbin\/iptables -P OUTPUT ACCEPT\n EOF\n chmod +x \/etc\/openvpn\/down.sh \/etc\/openvpn\/fw.stop<\/code><\/span><\/pre>\n<h3 id=\"launch-the-server\" style=\"font-weight: 500; color: #444444;\">Launch the server<\/h3>\n<p style=\"color: #747474;\">Simply run the following command:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>service openvpn start<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Now since you probably guessed it, there is no need to mention you can simply replace \u2018start\u2019 by \u2018stop\u2019 in the command above to stop the server \ud83d\ude42<\/p>\n<h3 id=\"full-server-configuration-file-example\" style=\"font-weight: 500; color: #444444;\">Full server configuration file example<\/h3>\n<p style=\"color: #747474;\">If instead of editing a sample configuration file you prefer creating one from scratch, here is a full\u00a0<em>server.conf<\/em>\u00a0file example (comments removed):<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> port 1194\n proto udp\n dev tun\n ca \/etc\/openvpn\/easy-rsa\/keys\/ca.crt\n cert \/etc\/openvpn\/easy-rsa\/keys\/My_Server_Name.crt\n key \/etc\/openvpn\/easy-rsa\/keys\/My_Server_Name.key\n crl-verify \/etc\/openvpn\/easy-rsa\/keys\/crl.pem\n dh \/etc\/openvpn\/easy-rsa\/keys\/dh2048.pem\n server 10.8.0.0 255.255.255.0 # Has to be different from your source and target networks.\n ifconfig-pool-persist ipp.txt\n push \"route 172.16.0.0 255.255.255.0\" # Has to match your target network.\n keepalive 10 120\n tls-auth \/etc\/openvpn\/easy-rsa\/keys\/ta.key 0\n comp-lzo\n persist-key\n persist-tun\n status \/var\/log\/openvpn-status.log\n log \/var\/log\/openvpn.log\n verb 3\n script-security 2\n route-up \/etc\/openvpn\/route-up.sh\n down \/etc\/openvpn\/down.sh<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">We did not reduce the OpenVPN\u2019s daemon privileges in the examples above, because if we do so, the\u00a0<em>down.sh<\/em>\u00a0and\u00a0<em>fw.stop<\/em>\u00a0scripts would fail because\u00a0<em>iptables<\/em>and\u00a0<em>sysctl<\/em>\u00a0commands need to be launched as root.<\/p>\n<p style=\"color: #747474;\">If you want extra security by reducing the privileges, you need to create an \u201copenvpn\u201d user and group (pre-exists on Centos\/RHEL when the package is installed, but not on Ubuntu) and then set sudo permission to the \u201copenvpn\u201d user to the\u00a0<em>fw.stop<\/em>\u00a0and\u00a0<em>down.sh<\/em>\u00a0scripts, and make openvpn call another script which will call the<em>down.sh<\/em>\u00a0and\u00a0<em>fw.stop<\/em>\u00a0scripts via a sudo call. This is why you would need an \u201copenvpn\u201d user: because we do not want \u201cnobody\/nogroup\u201d to be able to launch these scripts.<\/p>\n<p style=\"color: #747474;\">So DO NOT uncomment (by removing the leading\u00a0<em>;<\/em>) the\u00a0<em>;user nobody<\/em>\u00a0and\u00a0<em>;group nobody<\/em>\u00a0lines of the sample configuration file.<\/p>\n<h2 id=\"client-configuration\" style=\"font-weight: 500; color: #444444;\">Client configuration<\/h2>\n<h3 id=\"create-a-clients-certificate\" style=\"font-weight: 500; color: #444444;\">Create a client\u2019s certificate:<\/h3>\n<p style=\"color: #747474;\">Still on the server and in the\u00a0<em>\/etc\/openvpn\/easy-rsa<\/em>\u00a0directory, run the following command:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>.\/build-key My_Client_Name<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Hit the \u201center\u201d key when prompted for a password if you do not want the client to be prompted for a password.<\/p>\n<p style=\"color: #747474;\">Hit the \u201cy\u201d key when prompted to Sign the certificate, and when prompted to commit.<\/p>\n<p style=\"color: #747474;\">Now in the\u00a0<em>keys<\/em>\u00a0subdirectory we have generated the ` My_Client_Name.crt<em>,\u00a0<\/em>My_Client_Name.csr<em>\u00a0and\u00a0<\/em>My_Client_Name.key` files.<\/p>\n<h3 id=\"edit-the-client-configuration-file\" style=\"font-weight: 500; color: #444444;\">Edit the client configuration file<\/h3>\n<h4 id=\"copy-the-client-sample-configuration-file\" style=\"font-weight: 500; color: #444444;\">Copy the client sample configuration file<\/h4>\n<h5 id=\"on-centosrhel-3\" style=\"font-weight: 500; color: #6d7579;\">On Centos\/RHEL:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>cp \/usr\/share\/doc\/openvpn-2.3.2\/sample\/sample-config-files\/client.conf .<\/code><\/span><\/pre>\n<h5 id=\"on-ubuntu-2\" style=\"font-weight: 500; color: #6d7579;\">On Ubuntu:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>cp \/usr\/share\/doc\/openvpn\/examples\/sample-config-files\/client.conf .<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Then edit the client.conf file with your favorite editor to perform the changes explained in the next section.<\/p>\n<p style=\"color: #747474;\">NOTE: just line the server configuration sample file, lines starting with\u00a0<em>#<\/em>\u00a0are comments, and lines starting with\u00a0<em>;<\/em>\u00a0are not activated (just suggestions). Removing the<em>;<\/em>\u00a0activates the setting.<\/p>\n<h4 id=\"point-to-the-servers-floating-ip\" style=\"font-weight: 500; color: #444444;\">Point to the server\u2019s floating IP<\/h4>\n<p style=\"color: #747474;\">modify:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>remote my-server-1 1194<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">by replacing\u00a0<em>my-server-1<\/em>\u00a0with your openvpn server\u2019s floating IP.<\/p>\n<h4 id=\"point-to-the-client-certificates\" style=\"font-weight: 500; color: #444444;\">Point to the client certificates<\/h4>\n<p style=\"color: #747474;\">Replace:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> ca ca.crt\n cert client.crt\n key client.key<\/code><\/span><\/pre>\n<p><span style=\"color: #747474;\">by:<\/span><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> ca keys\/My_Client_Name.crt\n cert keys\/My_Client_Name.crt\n key keys\/My_Client_Name.key<\/code><\/span><\/pre>\n<h4 id=\"use-the-secret-shared-key-1\" style=\"font-weight: 500; color: #444444;\">Use the secret shared key<\/h4>\n<p style=\"color: #747474;\">Uncomment the following line by removing the leading\u00a0<em>;\u00a0and point to the proper key by replacing:<\/em><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>;tls-auth ta.key 1<\/code><\/span><\/pre>\n<p>by:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>tls-auth keys\/ta.key 1<\/code><\/span><\/pre>\n<h4 id=\"make-sure-the-other-end-is-using-a-server-certificate-to-prevent-spoofing-from-people-having-client-certificates\" style=\"font-weight: 500; color: #444444;\">Make sure the other end is using a server certificate to prevent spoofing from people having client certificates<\/h4>\n<p style=\"color: #747474;\">Uncomment the following line by removing the leading\u00a0<em>;<\/em><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>;ns-cert-type server<\/code><\/span><\/pre>\n<p><span style=\"color: #747474;\">In order to have:<\/span><\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>ns-cert-type server<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">By doing so, connections to a server using client certificates (generated with\u00a0<em>.\/build-key<\/em>\u00a0instead off\u00a0<em>.\/build-key-server<\/em>) will be rejected.<\/p>\n<p style=\"color: #747474;\">Indeed, anyone having the\u00a0<em>ca.crt<\/em>\u00a0and a pair of keys can create a server configuration file (she\/he would just have to build a Diffie Hellman file) and have a functional server. the\u00a0<em>ns-cert-type<\/em>\u00a0is an added security to make sure the issued keys were issued for a server, not a client.<\/p>\n<p style=\"color: #747474;\">See\u00a0<a style=\"color: #3498db;\" href=\"http:\/\/openvpn.net\/index.php\/open-source\/documentation\/howto.html#secnotes\">Important Note on possible \u201cMan-in-the-Middle\u201d attack if clients do not verify the certificate of the server they are connecting to<\/a>\u00a0for more information.<\/p>\n<h4 id=\"reduce-the-client-daemons-privileges\" style=\"font-weight: 500; color: #444444;\">reduce the client daemon\u2019s privileges<\/h4>\n<p style=\"color: #747474;\">Since the client has not scripts to launch as root, you can change:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> ;user nobody\n ;group nobody<\/code><\/span><\/pre>\n<p>to:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> user nobody\n group nobody<\/code><\/span><\/pre>\n<h4 id=\"create-the-client-tarball-you-will-distribute\" style=\"font-weight: 500; color: #444444;\">create the client tarball you will distribute<\/h4>\n<p style=\"color: #747474;\">still from the\u00a0<em>\/etc\/openvpn\/easy-rsa<\/em>\u00a0directory, type:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>tar -cvjpf vpnaccess.tar.bz2 client.conf, keys\/ca.crt keys\/My_Client_Name.key keys\/My_Client_Name.crt keys\/ta.key<\/code><\/span><\/pre>\n<address><strong style=\"color: #747474;\">Note:<\/strong><span style=\"color: #747474;\">\u00a0You need to generate client keys for each client. If you do not wish to generate multiple client keys, modify the\u00a0<\/span><em>client.conf<\/em><span style=\"color: #747474;\">\u00a0file and generate a new tarball for each new client, you can simply uncomment\u00a0<\/span><em>;duplicate-cn<\/em><span style=\"color: #747474;\">\u00a0(or add\u00a0<\/span><em>duplicate-cn<\/em><span style=\"color: #747474;\">) in the\u00a0<\/span><em>server.conf<\/em><span style=\"color: #747474;\">\u00a0file on the server side. BUT, if you do so, if you need to revoke a client, you would revoke all the clients\u2026 and need to issue new certificates for the clients.<\/span><\/address>\n<h3 id=\"deploy-the-client\" style=\"font-weight: 500; color: #444444;\">Deploy the Client<\/h3>\n<h4 id=\"install-openvpn-on-the-client-machine\" style=\"font-weight: 500; color: #444444;\">Install openvpn on the client machine<\/h4>\n<h5 id=\"on-centosrhel-4\" style=\"font-weight: 500; color: #6d7579;\">On Centos\/RHEL:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo yum install openvpn<\/code><\/span><\/pre>\n<h5 id=\"on-ubuntu-3\" style=\"font-weight: 500; color: #6d7579;\">On Ubuntu:<\/h5>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo apt-get install openvpn<\/code><\/span><\/pre>\n<h4 id=\"install-the-client-configuration-tarball\" style=\"font-weight: 500; color: #444444;\">Install the client configuration tarball<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>scp cloud@:\/etc\/openvpn\/easy-rsa\/vpnaccess.tar.bz2 .\n sudo cp vpnaccess.tar.bz2 \/etc\/openvpn\/\n sudo su -\n cd \/etc\/openvpn\n tar -xvjpf vpnaccess.tar.bz2<\/code><\/span><\/pre>\n<h4 id=\"launch-the-client\" style=\"font-weight: 500; color: #444444;\">Launch the client<\/h4>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>service openvpn start<\/code><\/span><\/pre>\n<h3 id=\"full-client-configuration-file-example\" style=\"font-weight: 500; color: #444444;\">Full client configuration file example<\/h3>\n<p style=\"color: #747474;\">If instead of editing a sample configuration file you prefer creating one from scratch, here is a full\u00a0<em>client.conf<\/em>\u00a0file example (comments removed):<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>client\n dev tun\n proto udp\n remote You_Instance_Floating_IP 1194 # Replace You_Instance_Floating_IP\n resolv-retry infinite\n nobind\n user nobody\n group nogroup\n persist-key\n persist-tun\n ca keys\/ca.crt\n cert keys\/My_Client_Name.crt\n key keys\/My_Client_Name.key\n ns-cert-type server\n tls-auth keys\/ta.key 1\n comp-lzo\n verb 3<\/code><\/span><\/pre>\n<h2 id=\"deployment-via-heat\" style=\"font-weight: 500; color: #444444;\">Deployment via Heat<\/h2>\n<p style=\"color: #747474;\">Download this\u00a0<a style=\"color: #3498db;\" href=\"https:\/\/github.com\/cloudwatt\/openstack-heat-templates\/blob\/master\/OpenVPN\/openvpn.heat\">openvpn heat template<\/a>\u00a0designed for Ubuntu 14.04.<\/p>\n<p style=\"color: #747474;\">Run these commands and note carefully what is required to note in the comments beside the command:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code> nova image-list # Note the Ubuntu 14.04 image_id\n neutron net-list # Note the public_net_id and private_net_id and private_net_cidr<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">change\u00a0<em>image_id<\/em>,\u00a0<em>public_net_id<\/em>,\u00a0<em>private_net_id<\/em>,\u00a0<em>vpn_cidr<\/em>\u00a0in the\u00a0<em>openvpn.heat<\/em>\u00a0template knowing that:<\/p>\n<ul style=\"color: #747474;\">\n<li><em>vpn_cidr<\/em>\u00a0must be different and not overlap with the\u00a0<em>private_net_cidr<\/em>\u00a0noted in the step above.<\/li>\n<li><em>vpn_cidr<\/em>\u00a0must also be different and not overlap with the private network your clients will be directly connected to.<\/li>\n<\/ul>\n<p style=\"color: #747474;\">i.e.: If you client is your laptop and your laptop is in a 192.168.10.0\/24 Network, and your VM is in a 172.16.0.0\/12 Network, the\u00a0<em>vpn_cidr<\/em>\u00a0must be in a different and not overlapping network (the default 10.8.0.0\/24 provided in the template works perfectly well in this case).<\/p>\n<p style=\"color: #747474;\">Launch the stack:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>heat stack-create openvpn -f openvpn.heat<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">And wait for the VPN to run.<\/p>\n<p style=\"color: #747474;\">Once the VPN is up, list your VM instances:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>nova list # Note the floating IP.<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">Install OpenVPN on the client:<\/p>\n<p style=\"color: #747474;\">On Centos\/RHEL:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo yum install openvpn<\/code><\/span><\/pre>\n<p>On Ubuntu:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo apt-get install openvpn<\/code><\/span><\/pre>\n<p>Retrieve the client configuration file:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>scp cloud@floating_ip_noted_previously:~\/vpnaccess.tar.bz2 .<\/code><\/span><\/pre>\n<p style=\"color: #747474;\">(If you get an error message saying this file does not exist, please wait a few minutes \u201cafter\u201d the stack to have fully completed, indeed, certain commands (e.g.: the Diffie Hellman generation) take a certain time after the stack completed)<\/p>\n<address style=\"color: #747474;\">Copy this\u00a0<em>vpnaccess.tar.bz2<\/em>\u00a0to the\u00a0<em>\/etc\/openvpn\/<\/em>\u00a0directory of your client:<\/address>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo cp vpnaccess.tar.bz2 \/etc\/openvpn<\/code><\/span><\/pre>\n<p>Extract the archive and launch the client:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>sudo su -\n cd \/etc\/openvpn\n tar -xvjpf vpnaccess.tar.bz2\n service openvpn start<\/code><\/span><\/pre>\n<h2 id=\"check-the-vpn-connection\" style=\"font-weight: 500; color: #444444;\">Check the vpn connection<\/h2>\n<p style=\"color: #747474;\">You should now be able to ping and\/or ssh your VMs directly with their internal IPs.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This technical deep-dive blog from Yves Gwenael discusses in detail how you can set a VPN to access your VMs using OpenVPN running in an OpenContrail subnet. Today, OpenStack provides&#8230;<\/p>\n","protected":false},"author":480,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[11,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This technical deep-dive blog from Yves Gwenael discusses in detail how you can set a VPN to access your VMs using OpenVPN running in an OpenContrail subnet. Today, OpenStack provides...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2014-10-11T23:14:18+00:00\" \/>\n<meta name=\"author\" content=\"Yves Gwenael\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/\",\"url\":\"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/\",\"name\":\"OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2014-10-11T23:14:18+00:00\",\"dateModified\":\"2014-10-11T23:14:18+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/554e1feb5b21fab10a38a9043123b3c9\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/554e1feb5b21fab10a38a9043123b3c9\",\"name\":\"Yves Gwenael\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/184399955affbd7f034aed49916ce4ea?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/184399955affbd7f034aed49916ce4ea?s=96&d=mm&r=pg\",\"caption\":\"Yves Gwenael\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/","og_locale":"en_US","og_type":"article","og_title":"OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric","og_description":"This technical deep-dive blog from Yves Gwenael discusses in detail how you can set a VPN to access your VMs using OpenVPN running in an OpenContrail subnet. Today, OpenStack provides...","og_url":"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/","og_site_name":"Tungsten Fabric","article_published_time":"2014-10-11T23:14:18+00:00","author":"Yves Gwenael","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/","url":"https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/","name":"OpenVPN in a VM running in an OpenContrail subnet - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2014-10-11T23:14:18+00:00","dateModified":"2014-10-11T23:14:18+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/554e1feb5b21fab10a38a9043123b3c9"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/openvpn-in-a-vm-running-in-an-opencontrail-subnet\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/554e1feb5b21fab10a38a9043123b3c9","name":"Yves Gwenael","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/184399955affbd7f034aed49916ce4ea?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/184399955affbd7f034aed49916ce4ea?s=96&d=mm&r=pg","caption":"Yves Gwenael"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/5167"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/480"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=5167"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/5167\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=5167"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=5167"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=5167"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}