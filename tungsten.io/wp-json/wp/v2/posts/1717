{"id":1717,"date":"2014-09-09T01:52:48","date_gmt":"2014-09-09T01:52:48","guid":{"rendered":"http:\/\/opencontrail.org\/?p=1717"},"modified":"2014-09-09T01:52:48","modified_gmt":"2014-09-09T01:52:48","slug":"statistics-in-opencontrail-analytics","status":"publish","type":"post","link":"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/","title":{"rendered":"Statistics in OpenContrail Analytics"},"content":{"rendered":"<p>A wealth of operational data is available in a distributed, multi-tier cloud infrastructure deployment. From the activity of VMs, to the flow of networking traffic, to the performance metrics of the applications themselves. If only we could use and correlate all this data to debug known problems and anticipate potential issues, and to build closed loop control systems to manage infrastructure and applications. This requires the ability to easily report and retrieve different kinds of metrics. If we have the APIs, we can build rich applications that deliver on all these promises. This blog post describes the OpenContrail approach for achieving these goals.<br \/>\n<!--more Read more...--><\/p>\n<p>Lets take the example of networking traffic flowing between Virtual Networks. For a given VN, we want to analyze the packets and bytes flowing between this VN and other VNs over a given time period. We need to slice-and-dice this information according to VNs involved, and according to the VRouters that host the VMs that sit on the VNs.<\/p>\n<p>VRouterAgent processes on the VRouters periodically reports these traffic stats to the collector, which stores them in the Cassandra database. The user can query for these stats via the analytics API. The schema of the data drives the treatment of this information on the both the storage end and on the query end.<\/p>\n<h6>\u00a0<strong>Storage of Stats<\/strong><\/h6>\n<p>The Sandesh framework is used to both express the schema and to generate the code to transport the information to the collector. (See this blog entry for details: <a href=\"http:\/\/opencontrail.org\/sandesh-a-sdn-analytics-interface\/\"><strong>Sandesh \u2013 A SDN Analytics Interface<\/strong><\/a>)<\/p>\n<p>In this case, we send the information using the Virtual Network Sandesh UVE message. The sandesh definition is as follows:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code>struct InterVnStats {\n 1: string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 other_vn;\n 2: string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 vrouter;\n 3: u64\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 in_tpkts;\n 4: u64\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 in_bytes;\n 5: u64\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out_tpkts;\n 6: u64\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out_bytes;\n }\n struct UveVirtualNetworkAgent {\n 1: string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 name (key=\"ObjectVNTable\")\n 2: optional bool\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 deleted\n \u2026\n 23: optional list&lt;InterVnStats&gt; vn_stats (tags=\".other_vn,.vrouter\")\n \u2026\n }\n uve sandesh UveVirtualNetworkAgentTrace {\n 1: UveVirtualNetworkAgent\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data;\n }<\/code><\/span><\/pre>\n<p>The \u201ctags\u201d annotation identifies the \u201cvn_stats\u201d attribute as a list of statistic samples. The stat samples will be stored against multiple tags. This makes it efficient to retrieve and aggregate stats samples that match given tags. The UVE key is always used as a tag called \u201cname\u201d. The Source of the message (hostname where the sending process is running) is also always used as a tag called \u201cSource\u201d.\u00a0 All the tags listed in the \u201ctags\u201d annotations are also used.\u00a0 The \u201ctags\u201d annotation is expected to be a comma separated list. Any entry starting with \u201c.\u201d indicates an attribute of the stat list struct. (InterVnStats in this case). Other entries would refer to the UVE struct (UveVirtualNetworkAgent in this case).<\/p>\n<p>The VRouterAgent can send multiple samples of this stat in the same sandesh message (note that vn_stats is a list). \u00a0All these stat samples will share the same timestamp (the timestamp of the sandesh message), but each stat sample will the assigned its own UUID.<\/p>\n<p>At the current time, the VRouterAgent reports the inter-VN stats for all the VNs present on it every 30 seconds. All packet counts and byte counts are reported in terms of the change in the counter since the last report. This allows us to easily query for the aggregate of these counts over an arbitrary time period.<\/p>\n<h6><strong>Querying of Stats<\/strong><\/h6>\n<p>OpenContrail\u2019s Analytics API provides a SQL-Like interface for querying any time-series information, like Statistics. (See this blog entry for details : <a href=\"http:\/\/opencontrail.org\/opencontrail-analytics-query-api\">OpenContrail Analytics Query API<\/a> )<\/p>\n<p>The table name for the query depends on the UVE struct name and the stat attribute name. In this case, it will be StatTable.UveVirtualNetworkAgent.vn_stats<\/p>\n<p>The following schema is exposed for this stats query:<\/p>\n<p>http:\/\/10.84.25.31:8081\/analytics\/table\/StatTable.UveVirtualNetworkAgent.vn_stats\/schema<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">\u00a0\u00a0\u00a0type: \"STAT\",<\/span>\n<span style=\"font-family: 'courier new', courier;\"> columns: \u2028[<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \u201cstring\u201d, index: true, name: \u201cname\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \u201cstring\u201d, index: true, name: \u201cString\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"T\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"T=\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"uuid\", index: false, name: \"UUID\"},<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"COUNT(vn_stats)\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"string\", index: true, name: \"vn_stats.other_vn\"},<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"string\", index: true, name: \"vn_stats.vrouter\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"vn_stats.in_tpkts\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: SUM(vn_stats.in_tpkts)\"},<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"vn_stats.in_bytes\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"SUM(vn_stats.in_bytes)\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"vn_stats.out_tpkts\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"SUM(vn_stats.out_tpkts)\" },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"vn_stats.out_bytes\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> { datatype: \"int\", index: false, name: \"SUM(vn_stats.out_bytes)\u201d },<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ]<\/span>\n<span style=\"font-family: 'courier new', courier;\"> }<\/span>\n <\/code>\n All the column names listed above can be used in the \u201cselect\u201d clause. Those that have index=true can also used be in the \u201cwhere\u201d clause.<\/pre>\n<p>The select clause controls the columns that appear in the query output. Lets look into how we support retrieval of stats samples and aggregation of these samples.<\/p>\n<p>The field \u201cT\u201d refers to the timestamp in microseconds. \u201cT=\u201d refers to a rounded-down timestamp.\u00a0 For example, T=60 will report the timestamp rounded down to a number divisible by 60 seconds. This capability is used to group together all samples that belong to a 60 second time period. This feature is called \u201cbinning\u201d.<\/p>\n<p>The fields that start with SUM and COUNT are aggregate fields. These aggregate fields are provided for every numerical attribute. Except for the aggregate fields, the combination of other fields is guaranteed to be unique in each row of the output.<\/p>\n<p>Using this uniqueness property, in conjunction with binning and aggregation, gives us powerful ways of slicing-and-dicing data, as the examples will illustrate.<\/p>\n<h6><strong>Query Examples<\/strong><\/h6>\n<p>Queries can be issued via the Analytics API:<\/p>\n<p>POST to http:\/\/10.84.25.31:8081\/analytics\/query<\/p>\n<p>The \u201ccontrail-stats\u201d command can also be used from the command line:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code># contrail-stats --help\n usage: contrail-stats [-h] [--opserver-ip OPSERVER_IP]\n [--opserver-port OPSERVER_PORT]\n [--start-time START_TIME] [--end-time END_TIME]\n [--last LAST]\n [--table {AnalyticsCpuState.cpu_info,ConfigCpuState.cpu_info,ControlCpuState.cpu_info,ComputeCpuState.cpu_info,SandeshMessageStat.msg_info,GeneratorDbStats.table_info,GeneratorDbStats.errors,FieldNames.fields,FieldNames.fieldi,QueryPerfInfo.query_stats,UveVirtualNetworkAgent.vn_stats,DatabasePurgeInfo.stats}]\n [--dtable DTABLE] [--select SELECT [SELECT ...]]\n [--where WHERE [WHERE ...]] [--sort SORT [SORT ...]]<\/code><\/span><\/pre>\n<p><strong>1. Query for samples<\/strong><\/p>\n<p>What are the raw samples reported from vRouter nodea8 for the virtual network default-domain:demo:vn1 over the last 60 seconds?<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code># contrail-stats --table UveVirtualNetworkAgent.vn_stats --where \"name=default-domain:demo:vn1 AND vn_stats.vrouter=nodea8\" --select T vn_stats.other_vn UUID vn_stats.out_bytes vn_stats.in_bytes --last 1m\n {\"start_time\": \"now-1m\", \"sort_fields\": [], \"end_time\": \"now\", \"select_fields\": [\"T\", \"vn_stats.other_vn\", \"UUID\", \"vn_stats.out_bytes\", \"vn_stats.in_bytes\"], \"table\": \"StatTable.UveVirtualNetworkAgent.vn_stats\", \"where\": [[{\"suffix\": null, \"value2\": null, \"name\": \"name\", \"value\": \"default-domain:demo:vn1\", \"op\": 1}, {\"suffix\": null, \"value2\": null, \"name\": \"vn_stats.vrouter\", \"value\": \"nodea8\", \"op\": 1}]]}<\/code><\/span><\/pre>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5689\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2014\/09\/sept8_post_image1.jpg\" alt=\"sept8_post_image1\" width=\"814\" height=\"1000\" data-id=\"5689\" \/><\/p>\n<p><strong>2. Query for total aggregates<\/strong><\/p>\n<p>What is the total traffic exchanged between Virtual Network default-domain:demo:vn1 and every other Virtual Network over the last 1 hour?<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code># contrail-stats --table UveVirtualNetworkAgent.vn_stats --where \"name=default-domain:demo:vn1\" --select vn_stats.other_vn \"SUM(vn_stats.out_bytes)\" \"SUM(vn_stats.in_bytes)\" \"COUNT(vn_stats)\" --last 1h\n {\"start_time\": \"now-1h\", \"sort_fields\": [], \"end_time\": \"now\", \"select_fields\": [\"vn_stats.other_vn\", \"SUM(vn_stats.out_bytes)\", \"SUM(vn_stats.in_bytes)\", \"COUNT(vn_stats)\"], \"table\": \"StatTable.UveVirtualNetworkAgent.vn_stats\", \"where\": [[{\"suffix\": null, \"value2\": null, \"name\": \"name\", \"value\": \"default-domain:demo:vn1\", \"op\": 1}]]}<\/code><\/span><\/pre>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5690\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2014\/09\/sept8_post_image2.jpg\" alt=\"sept8_post_image2\" width=\"889\" height=\"593\" data-id=\"5690\" \/><\/p>\n<p>Each row of the query output above represents a unique value of vn_stats.other_vn. Furthermore, SUM(vn_stats.out_bytes) for a given row is obtained by adding together all the samples that had the given value of vn_stats.other_vn. Also, COUNT(vn_stats) tells us the number of samples that this output row represents. (since there is a single vRouter in this setup sending one sample every 30s for each output row if the query above , we are seeing 120 samples per row for a 1 hour query)<\/p>\n<p><strong>\u00a03.\u00a0Query for binning<\/strong><\/p>\n<p>What is the traffic between Virtual Network default-domain:demo:vn1 and Virtual Network default-domain:demo:vn2 over the last 1 hour, with binning period of 300 seconds?<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><code># contrail-stats --table UveVirtualNetworkAgent.vn_stats --where \"name=default-domain:demo:vn1 AND vn_stats.other_vn=default-domain:demo:vn2\" --select T=300 \"SUM(vn_stats.out_bytes)\" \"SUM(vn_stats.in_bytes)\" --last 1h\n {\"start_time\": \"now-1h\", \"sort_fields\": [], \"end_time\": \"now\", \"select_fields\": [\"T=300\", \"SUM(vn_stats.out_bytes)\", \"SUM(vn_stats.in_bytes)\"], \"table\": \"StatTable.UveVirtualNetworkAgent.vn_stats\", \"where\": [[{\"suffix\": null, \"value2\": null, \"name\": \"name\", \"value\": \"default-domain:demo:vn1\", \"op\": 1}, {\"suffix\": null, \"value2\": null, \"name\": \"vn_stats.other_vn\", \"value\": \"default-domain:demo:vn2\", \"op\": 1}]]}<\/code><\/span><\/pre>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5691\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2014\/09\/sept8_post_image3.jpg\" alt=\"sept8_post_image3\" width=\"689\" height=\"1114\" data-id=\"5691\" \/><\/p>\n<p>This is a \u201cbinning\u201d query. The time period is specified using T=&lt;x&gt; in the select clause. We want to sum up 300 seconds worth of samples in each output row. This is useful for drawing graphs, with T on the X axis and the aggregated traffic on the Y axis. Each point on the graph would represent 300 seconds of aggregated traffic.<\/p>\n<p>Since the T= column reports the timestamp rounded down to 300 seconds, all samples within a 300 second window get mapped into a single output row.\u00a0 The SUM(vn_stat.out_bytes) column for the output row is then derived by adding together the vn_stat.out_bytes values of all those samples.<\/p>\n<h6><strong>Conclusion<\/strong><\/h6>\n<p>OpenContrail provides a generic, schema-driven way of reporting and querying for statistics. The slicing-and-dicing algorithms are based on an abstract binning-and-aggregation model, and do not depend on the semantics of the data itself. Only the agent generating the samples and the application making the query need to understand the semantics of the data. This makes it possible to add new sample-generating agents and analytics applications in an agile way by simply adding schemas; modification of core OpenContrail Analytics software is not needed.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A wealth of operational data is available in a distributed, multi-tier cloud infrastructure deployment. From the activity of VMs, to the flow of networking traffic, to the performance metrics of&#8230;<\/p>\n","protected":false},"author":465,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[4,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Statistics in OpenContrail Analytics - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Statistics in OpenContrail Analytics - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"A wealth of operational data is available in a distributed, multi-tier cloud infrastructure deployment. From the activity of VMs, to the flow of networking traffic, to the performance metrics of...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2014-09-09T01:52:48+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2014\/09\/sept8_post_image1.jpg\" \/>\n<meta name=\"author\" content=\"Anish Mehta\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/\",\"url\":\"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/\",\"name\":\"Statistics in OpenContrail Analytics - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2014-09-09T01:52:48+00:00\",\"dateModified\":\"2014-09-09T01:52:48+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/444baeeb4500c1d4e511527c6f2da689\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/444baeeb4500c1d4e511527c6f2da689\",\"name\":\"Anish Mehta\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/b7768e1843852e0ff35acc4c42a5fc3a?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/b7768e1843852e0ff35acc4c42a5fc3a?s=96&d=mm&r=pg\",\"caption\":\"Anish Mehta\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Statistics in OpenContrail Analytics - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/","og_locale":"en_US","og_type":"article","og_title":"Statistics in OpenContrail Analytics - Tungsten Fabric","og_description":"A wealth of operational data is available in a distributed, multi-tier cloud infrastructure deployment. From the activity of VMs, to the flow of networking traffic, to the performance metrics of...","og_url":"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/","og_site_name":"Tungsten Fabric","article_published_time":"2014-09-09T01:52:48+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2014\/09\/sept8_post_image1.jpg"}],"author":"Anish Mehta","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/","url":"https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/","name":"Statistics in OpenContrail Analytics - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2014-09-09T01:52:48+00:00","dateModified":"2014-09-09T01:52:48+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/444baeeb4500c1d4e511527c6f2da689"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/statistics-in-opencontrail-analytics\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/444baeeb4500c1d4e511527c6f2da689","name":"Anish Mehta","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/b7768e1843852e0ff35acc4c42a5fc3a?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/b7768e1843852e0ff35acc4c42a5fc3a?s=96&d=mm&r=pg","caption":"Anish Mehta"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/1717"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/465"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=1717"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/1717\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=1717"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=1717"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=1717"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}