{"id":587,"date":"2013-10-15T19:37:10","date_gmt":"2013-10-15T19:37:10","guid":{"rendered":"http:\/\/opencontrail.org\/?p=587"},"modified":"2013-10-15T19:37:10","modified_gmt":"2013-10-15T19:37:10","slug":"adding-bgp-knob-to-opencontrail","status":"publish","type":"post","link":"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/","title":{"rendered":"Adding a BGP knob to OpenContrail"},"content":{"rendered":"<p>This article is intended as simple tutorial on how to add a configuration option to the OpenContrail control-node that controls the behavior of the BGP implementation.<\/p>\n<p>The configuration node (the schema-transformer process) automatically assigns route-targets to routing-instances that are created in order to implement network virtualization. These route-targets are assigned from the space corresponding to the autonomous-system that the data-center cluster is on (64512 by default).<\/p>\n<p>The user can additionally define an external route target for networks that extend beyond the data-center boundary (e.g. the public network). For this tutorial we will implement a knob that strips out route target communities that contain private ASes.<\/p>\n<p>In order to get started lets create a sandbox and initialize it. In a unix shell type the following commands:<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930121.js\"><\/script><br \/>\n <!--more Read more...--><\/p>\n<p>The first step towards defining a new knob is to add it to the schema. OpenContrail auto-generates the REST API that stores the configuration and makes it available through the IF-MAP server. It also generates the API client library that is can be used to set the configuration parameters. The BGP related schema is present in\u00a0<em>controller\/src\/schema\/bgp_schema.xsd.<\/em><\/p>\n<p>Use your favorite text editor to modify this file and add a new XSD element called \u201crtarget-strip-private\u201d in the type <em>BgpSessionAttributes<\/em>. This is the data type that is associated with bgp peering sessions.<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930256.js\"><\/script><\/p>\n<p>After editing this file, execute the command\u00a0<em>scons controller\/src\/api-lib<\/em>. This command builds the Python client api library that we will use later on to set the new configuration parameter. You can poke around at the generated code:<\/p>\n<p><em><br \/>\ngrep rtarget-strip-private build\/debug\/api-lib\/vnc_api\/gen\/*<br \/>\n<\/em><\/p>\n<p>Should yield a couple of references to the newly added configuration parameter.<\/p>\n<p>In order to use this new parameter we will modify the helper script typically used to configure BGP peering sessions with an external BGP speaker (<em>controller\/src\/config\/utils\/provision_bgp.py<\/em>). As an example, we will add the new attribute only when configuring BGP sessions of for a \u2018router_type\u2019 of \u201cmx\u201d.<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930343.js\"><\/script><\/p>\n<p>At this point, we need to generate a test api-server in order to validate our code. The following sequence of shell commands will build and start a mock api-server on port 50000.<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930385.js\"><\/script><\/p>\n<p>The next step is to create a test script that will configure 2 BGP peers and a session between them. This can be achieved by creating a new file (<em>controller\/src\/config\/api-server\/tests\/test_bgp_session.py<\/em>) that executes our test case.<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930397.js\"><\/script><\/p>\n<p>After executing this script, we should be able to see the contents of the \u201cbgp-routers\u201d table using the command:<\/p>\n<p><em> wget -O-\u00a0<a href=\"http:\/\/localhost:50000\/bgp-routers\">http:\/\/localhost:50000\/bgp-routers<\/a>\u00a0| python -mjson.tool<br \/>\n <\/em><\/p>\n<p>This should display 2 entries, each with the router name specified in our test script. Examine the \u201ccn-test\u201d router by using the \u201cwget\u201d command with the \u201chref\u201d of the \u201ccn-test\u201d router. It will display the new knob (rtarget-strip-private).<\/p>\n<h2>Implementing the BGP component<\/h2>\n<p>Before proceeding with the implementation we need to look into how \u00a0BGP update generation works. In the OpenContrail implementation, the routing table is responsible for calculating the desired advertisement attributes (the <em>RibOut<\/em> attributes). The RibOut class has a dual purpose: it holds the head of the update queue; it also groups the peers that advertise this table with the same export policy, represented by the <em>RibExportPolicy<\/em> class.<\/p>\n<p>Additional background information on the design of the BGP component can be found <a href=\"http:\/\/juniper.github.io\/contrail-vnc\/bgp_design.html\">here<\/a>.<\/p>\n<p>Since our new knob modifies the BGP attributes that are generated, the first thing that we need to do is to add a new member to the <em>RibExportPolicy<\/em> class (<em>rtarget_strip_private<\/em>) and modify the constructor to include the new parameter.<\/p>\n<p>By modifying the constructor we can discover that the \u201c<em>policy_<\/em>\u201d initializer in <em>BgpPeer<\/em> needs to be modified in order to pass the new parameter.<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930592.js\"><\/script><\/p>\n<p>The remainder of the invocations of the <em>RibExportPolicy<\/em> constructor should receive the new parameter as \u201c<em>false<\/em>\u201c. There is one invocation in the production code, while initializing an Xmpp peer, and several calls in the test code while initializing test scenarios. There will need to be edited to get the code to compile again.<\/p>\n<p>Now we are probably ready to implement our knob. Following the Test Driven Development methodology the first step is to build our unit test. We want to build a test that has a test case with a route that only has non-private AS route targets and is unaffected by this change; and a test case where a route-target community is stripped from the route advertisement.<\/p>\n<p>The UnitTest code is in the file <a href=\"https:\/\/github.com\/Juniper\/contrail-controller\/blob\/tutorial\/src\/bgp\/l3vpn\/test\/rtarget_strip_private_test.cc\">controller\/src\/bgp\/l3vpn\/test\/rtarget_strip_private_test.cc<\/a>.<\/p>\n<p>It works by creating an <em>InetVpnTable<\/em> and a corresponding <em>RibOut<\/em> with an export policy where the <em>rtarget_strip_private<\/em> option is true. We use a mock <em>BgpMessageBuilder<\/em> to record the attributes that are encoded to the peer. The <em>BgpMessageBuilder<\/em> interface is called when an update is removed from the queue and needs to be encoded on the wire via either BGP or XML encoding. In this case, our mock records the communities that are advertised to the test peer.<\/p>\n<p>The test cases themselves work by creating a route with a specific list of route targets, adding the route to the table and verifying the list of communities seeing by the message builder interface.<\/p>\n<p>Once this test is compiled, the \u201cMatch\u201d test case should fail since we have not yet implemented the functionality. We can do that now:<br \/>\n<script type=\"text\/javascript\" src=\"https:\/\/gist.github.com\/pedro-r-marques\/6930776.js\"><\/script><\/p>\n<p>Rerun the Unit Test. It should now pass.<\/p>\n<p>You can find the code used in this example in the \u201ctutorial\u201d branch of the contrail-controller repository in GitHub.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This article is intended as simple tutorial on how to add a configuration option to the OpenContrail control-node that controls the behavior of the BGP implementation. The configuration node (the&#8230;<\/p>\n","protected":false},"author":458,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[6,7,8,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Adding a BGP knob to OpenContrail - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Adding a BGP knob to OpenContrail - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This article is intended as simple tutorial on how to add a configuration option to the OpenContrail control-node that controls the behavior of the BGP implementation. The configuration node (the...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2013-10-15T19:37:10+00:00\" \/>\n<meta name=\"author\" content=\"Pedro Marques\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/\",\"url\":\"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/\",\"name\":\"Adding a BGP knob to OpenContrail - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2013-10-15T19:37:10+00:00\",\"dateModified\":\"2013-10-15T19:37:10+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def\",\"name\":\"Pedro Marques\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg\",\"caption\":\"Pedro Marques\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Adding a BGP knob to OpenContrail - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/","og_locale":"en_US","og_type":"article","og_title":"Adding a BGP knob to OpenContrail - Tungsten Fabric","og_description":"This article is intended as simple tutorial on how to add a configuration option to the OpenContrail control-node that controls the behavior of the BGP implementation. The configuration node (the...","og_url":"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/","og_site_name":"Tungsten Fabric","article_published_time":"2013-10-15T19:37:10+00:00","author":"Pedro Marques","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/","url":"https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/","name":"Adding a BGP knob to OpenContrail - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2013-10-15T19:37:10+00:00","dateModified":"2013-10-15T19:37:10+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/adding-bgp-knob-to-opencontrail\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def","name":"Pedro Marques","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg","caption":"Pedro Marques"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/587"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/458"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=587"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/587\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=587"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=587"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=587"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}