{"id":8358,"date":"2021-08-09T10:42:32","date_gmt":"2021-08-09T17:42:32","guid":{"rendered":"https:\/\/tungsten.io\/?p=8358"},"modified":"2021-08-09T10:52:45","modified_gmt":"2021-08-09T17:52:45","slug":"tungsten-fabric-as-a-kubernetes-cni-plugin","status":"publish","type":"post","link":"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/","title":{"rendered":"Tungsten Fabric as a Kubernetes CNI plugin"},"content":{"rendered":"\n<p><em><strong>This is a contributed blog from LF Networking Member CodiLime. <a href=\"https:\/\/codilime.com\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\" target=\"_blank\" rel=\"noreferrer noopener\">Originally published here<\/a><\/strong>.<\/em><\/p>\n\n\n\n<p><strong>CNI (Container Networking Interface) is an interface between container runtime and network implementation. It allows different projects, like&nbsp;<a href=\"https:\/\/codilime.com\/tungsten-fabric-architecture-an-overview\/\">Tungsten Fabric<\/a>, to provide their implementation of the CNI plugins and use them to manage networking in a&nbsp;<a href=\"https:\/\/codilime.com\/glossary\/kubernetes\/\">Kubernetes<\/a>&nbsp;cluster. In this blog post, you will learn how to use Tungsten Fabric as a Kubernetes CNI plugin to ensure network connectivity between containers and bare metals. You will also see an example of a nested deployment of a Kubernetes cluster into OpenStack VM with a TF CNI plugin.<\/strong><\/p>\n\n\n\n<p>The CNI interface itself is very simple. The most important operations it has to implement are ADD and DEL. As the names suggest, ADD\u2019s role is to add a container to the network and DEL\u2019s is to delete it from the network. That\u2019s all. But are these functions performed?&nbsp;<\/p>\n\n\n\n<p>First things first: a kubelet is a Kubernetes daemon running on each node in a cluster. When the user creates a new pod, the Kubernetes API server orders a kubelet running on the node where the pod has been scheduled to create the pod. The kubelet will then create a network namespace for the pod, and allocate it by running the so-called \u201cpause\u201d container. One of the roles of this container is to maintain the network namespace which will be shared across all the containers in the pod. That\u2019s why the containers inside the pod can \u201ctalk\u201d to each other using the loopback interface. Then, for each container defined in the pod, the kubelet will call the CNI plugin.&nbsp;<\/p>\n\n\n\n<p>But how does it know how to use each plugin? First, it looks for the CNI configuration file in a predefined directory ( \/etc\/cni\/net.d&nbsp;<a href=\"https:\/\/kubernetes.io\/docs\/concepts\/extend-kubernetes\/compute-storage-net\/network-plugins\/#cni\" target=\"_blank\" rel=\"noreferrer noopener\">by default<\/a>). When using Tungsten Fabric, the kubelet is going to find a file like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n    \"cniVersion\": \"0.3.1\",\n    \"contrail\" : {\n        \"cluster-name\"  : \"&lt;CLUSTER-NAME&gt;\",\n        \"meta-plugin\"   : \"&lt;CNI-META-PLUGIN&gt;\",\n        \"vrouter-ip\"    : \"&lt;VROUTER-IP&gt;\",\n        \"vrouter-port\"  : &lt;VROUTER-PORT&gt;,\n        \"config-dir\"    : \"\/var\/lib\/contrail\/ports\/vm\",\n        \"poll-timeout\"  : &lt;POLL-TIMEOUT&gt;,\n        \"poll-retries\"  : &lt;POLL-RETRIES&gt;,\n        \"log-file\"      : \"\/var\/log\/contrail\/cni\/opencontrail.log\",\n        \"log-level\"     : \"&lt;LOG-LEVEL&gt;\"\n    },\n    \"name\": \"contrail-k8s-cni\",\n    \"type\": \"contrail-k8s-cni\"\n  }<\/code><\/pre>\n\n\n\n<p>This file, among other parameters, specifies the name of the CNI plugin and IP (vrouter-ip) and port (vrouter-port) of the vRouter agent. By looking at this file, the kubelet knows it should use the CNI plugin binary called \u201ccontrail-k8s-cni\u201d. It looks for it in a predefined directory ( \/opt\/cni\/bin&nbsp;<a href=\"https:\/\/kubernetes.io\/docs\/concepts\/extend-kubernetes\/compute-storage-net\/network-plugins\/#cni\" target=\"_blank\" rel=\"noreferrer noopener\">by default<\/a>) and, when it wants to create a new container, executes it with the command ADD passed through environment variables together with other parameters like: path to the pod\u2019s network namespace, container id and container network interface name. The contrail-k8s-cni binary (you can find its source code&nbsp;<a href=\"https:\/\/github.com\/tungstenfabric\/tf-controller\/tree\/master\/src\/container\/cni\" target=\"_blank\" rel=\"noreferrer noopener\">here<\/a>) will read those parameters and send appropriate requests to the vRouter Agent.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/bb1cb15886dadd0311a7daf94482d72eab948af1\/7fa29\/img\/codilime_tungsten-fabric-compute-with-kubernetes.png\" alt=\"Tungsten Fabric compute with Kubernetes\"\/><\/figure>\n\n\n\n<p><strong>Fig 1. Tungsten Fabric compute with Kubernetes&nbsp;<a href=\"https:\/\/d33wubrfki0l68.cloudfront.net\/bb1cb15886dadd0311a7daf94482d72eab948af1\/7fa29\/img\/codilime_tungsten-fabric-compute-with-kubernetes.png\" target=\"_blank\" rel=\"noreferrer noopener\">(Enlarge)<\/a><\/strong><\/p>\n\n\n\n<p>The vRouter Agent\u2019s job is to create actual interfaces for the containers. But how does it know how to configure an interface? As you can see in the diagram above, it gets all this information from the Tungsten Fabric Control. So then how does the Tungsten Fabric Control know about all the pods, their namespaces, etc.? That\u2019s where the Tungsten Fabric Kube Manager (you can find its source code&nbsp;<a href=\"https:\/\/github.com\/tungstenfabric\/tf-controller\/tree\/master\/src\/container\/kube-manager\" target=\"_blank\" rel=\"noreferrer noopener\">here<\/a>) comes in. It\u2019s a separate service, launched together with other Tungsten Fabric SDN Controller components. It can be seen in the bottom left part of the diagram below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/ae5f2aa3d9d32d1df4f649baa05ea40cd4f30dff\/52ab7\/img\/codilime_tungsten-fabric-config-with-kubernetes.png\" alt=\"Tungsten Fabric Config with Kubernetes\"\/><\/figure>\n\n\n\n<p><strong>Fig 2. Tungsten Fabric Config with Kubernetes&nbsp;<a href=\"https:\/\/d33wubrfki0l68.cloudfront.net\/ae5f2aa3d9d32d1df4f649baa05ea40cd4f30dff\/52ab7\/img\/codilime_tungsten-fabric-config-with-kubernetes.png\" target=\"_blank\" rel=\"noreferrer noopener\">(Enlarge)<\/a><\/strong><\/p>\n\n\n\n<p>Kubemanager\u2019s role is to listen for Kubernetes API server events like: pod creation, namespace creation, service creation, deletion. It listens for those events, processes them, and then creates, modifies or deletes appropriate objects in the Tungsten Fabric Config API. Tungsten Fabric Control will then find those objects and provide information about them to the vRouter agent. The vRouter Agent can then finally create the properly configured interface for the container. And that is how Tungsten Fabric can work as a Kubernetes CNI Plugin.<\/p>\n\n\n\n<p>Because Tungsten Fabric and Kubernetes are integrated, container-based workloads can be combined with virtual machines or bare metal server workloads. Moreover, rules for connectivity between those environments can all be managed in one place.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Tungsten Fabric nested deployment<\/h2>\n\n\n\n<p>From the networking point of view, virtual machines and containers are almost the same thing for Tungsten Fabric, so deployments that combine them are possible. Moreover, in addition to Kubernetes, Tungsten Fabric can also be integrated with OpenStack. Thanks to that, the two platforms can be combined. Let\u2019s say that we have an already deployed OpenStack with Tungsten Fabric, but we want to deploy some of our workloads using containers. With Tungsten Fabric we can create what is called a nested deployment\u2014OpenStack compute virtual machines with a Kubernetes cluster deployed on them with Tungsten Fabric acting as the CNI plugin.&nbsp;<\/p>\n\n\n\n<p>All of the Tungsten components need not be deployed as most of them are already running and controlling the OpenStack networking. However, on one of the nodes in the nested Kubernetes cluster, preferably the Kubernetes master node, we have to launch the Tungsten Fabric Kube Manager (described above). It will connect to the Kubernetes API Server in the nested cluster and to the Tungsten Fabric Config Api server deployed with OpenStack.&nbsp;<\/p>\n\n\n\n<p>Finally, the Tungsten Fabric CNI plugin and its configuration file must be present on each of the nested Kubernetes compute nodes. Please note that neither the Tungsten Fabric vRouter nor vRouter Agent need to be deployed on the nested Kubernetes nodes, as those components are already running on the OpenStack compute nodes and the Tungsten Fabric CNI plugin can send requests directly to them.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/b306396c1d01a92fc84cd1c46ebfd75aa05bf728\/6a0c8\/img\/codilime_fig3.png\" alt=\"Kubernetes on OpenStack with Tungsten Fabric Networking\"\/><\/figure>\n\n\n\n<p><strong>Fig 3. Kubernetes on OpenStack with Tungsten Fabric Networking&nbsp;<a href=\"https:\/\/d33wubrfki0l68.cloudfront.net\/b306396c1d01a92fc84cd1c46ebfd75aa05bf728\/6a0c8\/img\/codilime_fig3.png\" target=\"_blank\" rel=\"noreferrer noopener\">(Enlarge)<\/a><\/strong><\/p>\n\n\n\n<p>A nested deployment of a Kubernetes cluster integrated with Tungsten Fabric is an easy way to start deploying container-based workloads, especially for enterprises that have been using OpenStack to manage their virtual machines. Network admins can use their Tungsten Fabric expertise and need not necessarily master new tools and concepts.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<p>As you can see, a Kubernetes CNI plugin allows you to benefit from one of Tungsten Fabric\u2019s key features\u2014its ability to connect different workloads regardless of their function\u2014 containers, VMs or bare metals. Should you need to use containers and ensure their connectivity with your legacy infrastructure based on OpenStack, you can create a nested deployment of the Kubernetes cluster integrated with TF<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a contributed blog from LF Networking Member CodiLime. Originally published here. CNI (Container Networking Interface) is an interface between container runtime and network implementation. It allows different projects,&#8230;<\/p>\n","protected":false},"author":455,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[17,20,28],"tags":[61,60,57,59,56],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This is a contributed blog from LF Networking Member CodiLime. Originally published here. CNI (Container Networking Interface) is an interface between container runtime and network implementation. It allows different projects,...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-09T17:42:32+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-08-09T17:52:45+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/d33wubrfki0l68.cloudfront.net\/bb1cb15886dadd0311a7daf94482d72eab948af1\/7fa29\/img\/codilime_tungsten-fabric-compute-with-kubernetes.png\" \/>\n<meta name=\"author\" content=\"tungstenfabric\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\",\"url\":\"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\",\"name\":\"Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2021-08-09T17:42:32+00:00\",\"dateModified\":\"2021-08-09T17:52:45+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af\",\"name\":\"tungstenfabric\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg\",\"caption\":\"tungstenfabric\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/","og_locale":"en_US","og_type":"article","og_title":"Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric","og_description":"This is a contributed blog from LF Networking Member CodiLime. Originally published here. CNI (Container Networking Interface) is an interface between container runtime and network implementation. It allows different projects,...","og_url":"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/","og_site_name":"Tungsten Fabric","article_published_time":"2021-08-09T17:42:32+00:00","article_modified_time":"2021-08-09T17:52:45+00:00","og_image":[{"url":"https:\/\/d33wubrfki0l68.cloudfront.net\/bb1cb15886dadd0311a7daf94482d72eab948af1\/7fa29\/img\/codilime_tungsten-fabric-compute-with-kubernetes.png"}],"author":"tungstenfabric","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/","url":"https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/","name":"Tungsten Fabric as a Kubernetes CNI plugin - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2021-08-09T17:42:32+00:00","dateModified":"2021-08-09T17:52:45+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/tungsten-fabric-as-a-kubernetes-cni-plugin\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af","name":"tungstenfabric","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg","caption":"tungstenfabric"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/8358"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/455"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=8358"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/8358\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=8358"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=8358"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=8358"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}