{"id":5944,"date":"2015-01-12T11:41:33","date_gmt":"2015-01-12T19:41:33","guid":{"rendered":"http:\/\/www.opencontrail.org\/?p=5944"},"modified":"2015-01-12T11:41:33","modified_gmt":"2015-01-12T19:41:33","slug":"heat-application-stack-in-opencontrail","status":"publish","type":"post","link":"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/","title":{"rendered":"Heat Application Stack in OpenContrail"},"content":{"rendered":"<p><strong>Note<\/strong>: This is a post taken from\u00a0tcpcloud blog co-authored by Ales Komarek &amp; Jakub Pavlik. <a href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/01\/12\/heat-application-stack-opencontrail\/\">Click here<\/a> for the original post.<\/p>\n<p>In this blog we would like to show how to orchestrate with OpenStack using <a style=\"font-weight: inherit; font-style: inherit;\" href=\"https:\/\/wiki.openstack.org\/wiki\/Heat\">Heat<\/a> and OpenContrail. We show how to create complex application stack with using existing implementation HAProxy Neutron LbaaS in OpenContrail.<\/p>\n<p>Heat is the main project of the OpenStack orchestration program. It allows users to describe deployments of complex cloud applications in text files called templates. These templates are then parsed and executed by the Heat engine.<\/p>\n<p>Heat is not officially supported by Juniper in Contrail release 1.2, but with OpenStack release IceHouse it works smoothly for standard OpenStack resources. Contrail specific Heat resources can be implemented through contrail-heat repo at following link <a style=\"font-weight: inherit; font-style: inherit;\" href=\"https:\/\/github.com\/Juniper\/contrail-heat\">https:\/\/github.com\/Juniper\/contrail-heat<\/a><\/p>\n<p>The contrail heat extensions adds resources for managing:<\/p>\n<ul>\n<li style=\"font-style: inherit;\">Network IPAMs &#8211; IP Address Management resources, which are available only in OpenContrail.<\/li>\n<li style=\"font-style: inherit;\">Network Policies<\/li>\n<li style=\"font-style: inherit;\">Service Instance &#8211; orchestration for service channing in OpenContrail<\/li>\n<li style=\"font-style: inherit;\">etc.<\/li>\n<\/ul>\n<h2 style=\"font-weight: 400;\"><span style=\"font-weight: inherit; font-style: inherit;\">HEAT OPENCONTRAIL INSTALLATION<\/span><\/h2>\n<p>Deploy latest stable OpenContrail release 1.2 with OpenStack IceHouse on Ubuntu 12.04 or 14.04 (e.g. <a style=\"font-weight: inherit; font-style: inherit;\" href=\"http:\/\/www.opencontrail.org\/deploy-opencontrail\/\">http:\/\/www.opencontrail.org\/deploy-opencontrail\/<\/a> ).<\/p>\n<p>Add Cloud Archive IceHouse repository or download heat packages manually.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"># apt-get install python-software-properties\n# add-apt-repository cloud-archive:icehouse<\/span><\/pre>\n<p>Install heat packages<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"># apt-get install heat-api heat-api-cfn heat-api-cloudwatch heat-engine heat-common python-heatclient<\/span><\/pre>\n<p>Output should look like<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# dpkg -l | grep heat\nii \u00a0heat-api \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - ReST API\nii \u00a0heat-api-cfn \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - CFN API\nii \u00a0heat-api-cloudwatch \u00a0 2014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - CloudWatch API\nii \u00a0heat-common \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - common files\nii \u00a0heat-engine \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - engine\nii \u00a0python-heat \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2014.1.3-0ubuntu1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OpenStack orchestration service - Python files\nii \u00a0python-heatclient \u00a0 \u00a0 \u00a0 \u00a00.2.8-0ubuntu1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 all \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client library and CLI for OpenStack Heat<\/span><\/pre>\n<p>Install contrail heat resources from github<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"># pip install git+https:\/\/github.com\/Juniper\/contrail-heat.git@R1.30<\/span><\/pre>\n<p>In the configuration file, specify the location of the database where the Orchestration service stores data. Use same MySQL database as Contrail with a heat user on the controller node. Replace HEAT_DBPASS with the password for the database user. Edit \/etc\/heat\/heat.conf and modify the [database] section:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[database]\n# The SQLAlchemy connection string used to connect to the database\nconnection = mysql:\/\/heat:HEAT_DBPASS@controller\/heat<\/span><\/pre>\n<p>Use the password that you set previously to log in as root and create a heat database user:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# mysql -u root -p\nmysql&gt; CREATE DATABASE heat;\nmysql&gt; GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost' \\\nIDENTIFIED BY 'HEAT_DBPASS';\nmysql&gt; GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%' \\\nIDENTIFIED BY 'HEAT_DBPASS';<\/span><\/pre>\n<p>Create the heat service tables:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"># su -s \/bin\/sh -c \"heat-manage db_sync\" heat<\/span><\/pre>\n<p>Create a heat user and endpoints that the Orchestration service can use to authenticate with the Identity Service.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# source \/etc\/contrail\/openrc\n# keystone user-create --name=heat --pass=HEAT_PASS \u00a0--email=heat@example.com\n# keystone user-role-add --user=heat --tenant=service --role=admin\n# keystone role-create --name heat_stack_user<\/span><\/pre>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# keystone service-create --name=heat --type=orchestration --description=\"Orchestration\"\n# keystone endpoint-create \\\n--service-id=$(keystone service-list | awk '\/ orchestration \/ {print $2}') \\\n--publicurl=http:\/\/controller:8004\/v1\/%\\(tenant_id\\)s \\\n--internalurl=http:\/\/controller:8004\/v1\/%\\(tenant_id\\)s \\\n--adminurl=http:\/\/controller:8004\/v1\/%\\(tenant_id\\)s\n# keystone service-create --name=heat-cfn --type=cloudformation --description=\"Orchestration CloudFormation\"\n# keystone endpoint-create \\\n--service-id=$(keystone service-list | awk '\/ cloudformation \/ {print $2}') \\\n--publicurl=http:\/\/controller:8000\/v1 \\\n--internalurl=http:\/\/controller:8000\/v1 \\\n--adminurl=http:\/\/controller:8000\/v1<\/span><\/pre>\n<p>Edit following parameters in \/etc\/heat.conf<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n[DEFAULT]\n...\n# URL of the Heat metadata server. (string value)\nheat_metadata_server_url = http:\/\/CONTROLLER_IP:8000\n# URL of the Heat waitcondition server. (string value)\nheat_waitcondition_server_url = http:\/\/CONTROLLER_IP:8000\/v1\/waitcondition\n...\nrabbit_host = CONTROLLER_IP\nrabbit_user = RABBIT_USER\nrabbit_password = RABBIT_PASS\n...\n\n[keystone_authtoken]\nauth_host = controller\nauth_port = 35357\nauth_protocol = http\nauth_uri = http:\/\/controller:5000\/v2.0\nadmin_tenant_name = service\nadmin_user = heat\nadmin_password = HEAT_PASS\n\n[ec2authtoken]\nauth_uri = http:\/\/controller:5000\/v2.0<\/span><\/pre>\n<p>Restart heat services<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# service heat-api restart\n# service heat-api-cfn restart\n# service heat-engine restart<\/span><\/pre>\n<p>Verify heat<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\n# heat list<\/span><\/pre>\n<p>If there is nothing, it is OK. Otherwise something is wrong. Now we can start with our application stack deployment.<\/p>\n<h2 style=\"font-weight: 400;\"><span style=\"font-weight: inherit; font-style: inherit;\">HEAT STACK DEPLOYMENT PROCESS<\/span><\/h2>\n<p>This part will cover how did we implement the automated deployment process with heat and salt. It actually consist of only 2 phases. In the 1st the heat orchestration client creates the necessary resources. After all resources have been successfully created the 2nd phase is stated. It orchestrates services across the application stack in the right order, ie. the database services are installed before the application services that require them.<\/p>\n<ol>\n<li style=\"font-style: inherit;\">Create infrastructure resources<\/li>\n<li style=\"font-style: inherit;\">Orchestrate compute services<\/li>\n<\/ol>\n<p>The following schema illustrates how this deployment process works with the OpenStack IaaS platform. Heat orchestration<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter  wp-image-5945\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_arch_level.png\" alt=\"heat_arch_level\" width=\"761\" height=\"238\" data-id=\"5945\" \/><\/p>\n<p>The entire process for this test is processed by the Salt orchestration runner [1]. The following code shows simple salt orchestration runner for deploying and configuring our application heat stacks covered in next part.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\nsetup_host:\nsalt.state:\n- tgt: 'master.tcpcloud.eu'\n- sls:\n- reclass.storage\n- salt.master\n- heat.client\n\ncmd.run:\nsalt.function:\n- tgt: 'master.tcpcloud.eu'\n- arg:\n- cd \/srv\/heat\/env; source \/root\/keystonerc; .\/create_stack.sh &lt;stack_name&gt; &lt;stack_env&gt;\n\nconfigure_node:\nsalt.state:\n- tgt: '*&lt;stack_env&gt;*'\n- highstate: True<\/span><\/pre>\n<p><span style=\"font-weight: inherit; font-style: inherit;\">This functionality can be implemented by bash script or Jenkins job as well. So what does the salt runner do? First it gets the metadata and provisioning services (salt formulas) on the orchestration controller in shape, then it calls heat to create resources. Our script waits for the completion of the stack creation. Then finally the salt master is called to enforce entire service stack (salt highstate) on all newly created compute resources. With our simple stack we can do it in just one configuration step, for more complicated stacks more steps would be required.<\/span><\/p>\n<h2 style=\"font-weight: 400;\"><span style=\"font-weight: inherit; font-style: inherit;\">OUT TESTING APPLICATION STACK<\/span><\/h2>\n<p>We tested the capabilities of Heat with OpenContrail resources on multiple application stacks with 2 web services booted from block volumes with load balancer in front. We have several kind of resources that were needed to be created before we could start the configuration orchestration:<\/p>\n<ul>\n<li style=\"font-style: inherit;\">Network: Private Neutron network where all instances, load balancers and router are connnected.<\/li>\n<li style=\"font-style: inherit;\">Public IP: Neutron Floating IP from public network pool tha is associated with the load balancers.<\/li>\n<li style=\"font-style: inherit;\">Router: Shared Neutron Router implementing SNAT for all compute nodes within the private network.<\/li>\n<li style=\"font-style: inherit;\">Security Group: Shared security\/firewall rules for orchestration and application services.<\/li>\n<li style=\"font-style: inherit;\">Disk Volume: Cinder block device with server image of ubuntu trusty with cfntools preinstalled.<\/li>\n<li style=\"font-style: inherit;\">Server: Nova Compute Instance is virtual server booted from block device and connected to virtual network having specific firewall rules (and little more). We tested for block device IBM SVC and Hitachi VSP cinder drivers.<\/li>\n<li style=\"font-style: inherit;\">Load Balancer: OpenContrail implementation of Neutron LBaaS Resource, works as 2 separate HA proxies with balanced IP.<\/li>\n<\/ul>\n<p>The following schema shows our the heat stack within one testing tenant. There are multiple web Service infrastructures (A, B), each have the same resource definition in heat, just the metadata (environmental parameters) differs.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter  wp-image-5946\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_service_level.png\" alt=\"heat_service_level\" width=\"699\" height=\"245\" data-id=\"5946\" \/><\/p>\n<p>Following code shows the complete creation of our testing in heat. It\u2019s in the new HOT format which is our opinion a good leap forward to better readability and usability of these templates.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\nheat_template_version: 2013-05-23\ndescription: Web Service Stack\nparameters:\nlb_pool_name:\ntype: string\ndescription: Name of the loadbalancer\nserver01_name:\ntype: string\ndescription: Name of the server01 - instance\/volume\nserver02_name:\ntype: string\ndescription: Name of the server02 - instance\/volume\npublic_net_id:\ntype: string\ndescription: ID of the public network\nprivate_net_id:\ntype: string\ndescription: ID of the private network\nprivate_subnet_id:\ntype: string\ndescription: ID of the private network subnet\nserver_flavor:\ntype: string\ndescription: Instance type for the servers\ndefault: m1.small\nconstraints:\n- allowed_values: [m1.tiny, m1.small, m1.medium, m1.large]\nvolume_source:\ntype: string\ndescription: Source volume for clonned volumes\nresources:\nserver_volume_01:\ntype: OS::Cinder::Volume\nproperties:\nname: { get_param: server01_name }\nsize: 20\nsource_volid: { get_param: server_volume }\nserver_instance_01:\ntype: OS::Nova::Server\nproperties:\nblock_device_mapping:\n- volume_id: { get_resource: server_volume_01 }\ndevice_name: vda\nflavor: { get_param: server_flavor }\nname: { get_param: server01_name }\nnetworks:\n- network: { get_param: private_net_id }\nsecurity_groups:\n- default\nuser_data_format: RAW\nuser_data: |\n#!\/bin\/bash -v\nserver_volume_02:\ntype: OS::Cinder::Volume\nproperties:\nname: { get_param: server02_name }\nsize: 20\nsource_volid: { get_param: server_volume }\nserver_instance_02:\ntype: OS::Nova::Server\nproperties:\nblock_device_mapping:\n- volume_id: { get_resource: server_volume_02 }\ndevice_name: vda\nflavor: { get_param: server_flavor }\nname: { get_param: server02_name }\nnetworks:\n- network: { get_param: private_net_id }\nsecurity_groups:\n- default\nuser_data_format: RAW\nuser_data: |\n#!\/bin\/bash -v\nneutron_ping_healt_monitor:\ntype: OS::Neutron::HealthMonitor\nproperties:\nadmin_state_up: True\ndelay: 20\nmax_retries: 10\ntimeout: 10\ntype: PING\nneutron_pool:\ntype: OS::Neutron::Pool\nproperties:\nadmin_state_up: True\nlb_method: ROUND_ROBIN\nname: { get_param: lb_pool_name }\nprotocol: HTTP\nmonitors:\n- { get_resource: neutron_ping_healt_monitor }\nsubnet_id: { get_param: private_subnet_id }\nvip:\nprotocol_port: 80\nadmin_state_up: True\nsubnet: { get_param: vip_subnet_id }\nneutron_pool_member_instance_01:\ntype: OS::Neutron::PoolMember\nproperties:\naddress: { get_attr: [ server_instance_01, first_address ] }\nadmin_state_up: True\npool_id: { get_resource: neutron_pool }\nprotocol_port: 80\nweight: 1\nneutron_pool_member_instance_02:\ntype: OS::Neutron::PoolMember\nproperties:\naddress: { get_attr: [ server_instance_02, first_address ] }\nadmin_state_up: True\npool_id: { get_resource: neutron_pool }\nprotocol_port: 80\nweight: 1\nneutron_floatingip:\ntype: OS::Neutron::FloatingIP\nproperties:\nfloating_network_id: { get_param: public_net_id }\nport_id: { \"Fn::Select\" : [ \"port_id\", { get_attr: [ neutron_pool , vip ] } ] }<\/span><\/pre>\n<p>For this template parameters that define the environment are needed. And are defined by the following YAML object.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">\nparameters:\npublic_net_id: &lt;uuid&gt;\nprivate_net_id: &lt;uuid&gt;\nprivate_subnet_id: &lt;uuid&gt;\nlb_pool_name: web-stg-lb-pool\nserver01_name: web-stg01\nserver02_name: web-stg02\nserver_flavor: m1.small\nvolume_source: &lt;uuid&gt;<\/span><\/pre>\n<h2 dir=\"ltr\">GRAPHICAL USER INTERFACE<\/h2>\n<p dir=\"ltr\">Along the automated shell guns we can operate the stack using the horizon-based GUI. We have adapted the GUI to see<\/p>\n<p dir=\"ltr\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter  wp-image-5949\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_application_stack_OpenContrail_image3.png\" alt=\"heat_application_stack_OpenContrail_image3\" width=\"721\" height=\"406\" data-id=\"5949\" \/><\/p>\n<p>As the Heat orchestration GUI has limited options it can be used for example by developers without deeper knowledge of underlying service stack to setup their working or staging environments.<\/p>\n<p>The following screen shows application stack with 5 server instance booted from volumes, connected to the same network with router and 2 floating IP\u2019s hidden above and below the graph borders.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter  wp-image-5950\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_application_stack_OpenContrail_image4.png\" alt=\"heat_application_stack_OpenContrail_image4\" width=\"775\" height=\"436\" data-id=\"5950\" \/><\/p>\n<h2 style=\"font-weight: 400;\">CONCLUSION<\/h2>\n<p>Setting up Heat templates can solve previously unsolvable issues in virtual infrastructure life-cycles and that is creation and deletion of not-compute resources that compute resources rely on (network and storage resources mostly). Heat allows to create expandable range of resources that are created exactly in the right order. The compute servers are part of the resource stack and can be created and directed to configuration management of your choice. We have used the Salt configuration tool, but tools like Puppet, Chef or Ansible can be used as well.<\/p>\n<h2 style=\"font-weight: 400;\">INFORMATION SOURCES<\/h2>\n<ul>\n<li style=\"font-style: inherit;\"><a style=\"font-weight: inherit; font-style: inherit;\" href=\"http:\/\/docs.saltstack.com\/en\/latest\/topics\/tutorials\/states_pt5.html#orchestrate-runner\">http:\/\/docs.saltstack.com\/en\/latest\/topics\/tutorials\/states_pt5.html#orchestrate-runner<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Note: This is a post taken from\u00a0tcpcloud blog co-authored by Ales Komarek &amp; Jakub Pavlik. Click here for the original post. In this blog we would like to show how&#8230;<\/p>\n","protected":false},"author":479,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[5,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Heat Application Stack in OpenContrail - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Heat Application Stack in OpenContrail - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"Note: This is a post taken from\u00a0tcpcloud blog co-authored by Ales Komarek &amp; Jakub Pavlik. Click here for the original post. In this blog we would like to show how...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2015-01-12T19:41:33+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_arch_level.png\" \/>\n<meta name=\"author\" content=\"Jakub Pavlik\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/\",\"url\":\"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/\",\"name\":\"Heat Application Stack in OpenContrail - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2015-01-12T19:41:33+00:00\",\"dateModified\":\"2015-01-12T19:41:33+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\",\"name\":\"Jakub Pavlik\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"caption\":\"Jakub Pavlik\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Heat Application Stack in OpenContrail - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/","og_locale":"en_US","og_type":"article","og_title":"Heat Application Stack in OpenContrail - Tungsten Fabric","og_description":"Note: This is a post taken from\u00a0tcpcloud blog co-authored by Ales Komarek &amp; Jakub Pavlik. Click here for the original post. In this blog we would like to show how...","og_url":"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/","og_site_name":"Tungsten Fabric","article_published_time":"2015-01-12T19:41:33+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/01\/heat_arch_level.png"}],"author":"Jakub Pavlik","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/","url":"https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/","name":"Heat Application Stack in OpenContrail - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2015-01-12T19:41:33+00:00","dateModified":"2015-01-12T19:41:33+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/heat-application-stack-in-opencontrail\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75","name":"Jakub Pavlik","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","caption":"Jakub Pavlik"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/5944"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/479"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=5944"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/5944\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=5944"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=5944"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=5944"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}