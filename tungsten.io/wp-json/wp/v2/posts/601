{"id":601,"date":"2013-10-16T03:28:38","date_gmt":"2013-10-16T03:28:38","guid":{"rendered":"http:\/\/opencontrail.org\/?p=601"},"modified":"2013-10-16T03:28:38","modified_gmt":"2013-10-16T03:28:38","slug":"evaluating-opencontrail-virtual-router-performance","status":"publish","type":"post","link":"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/","title":{"rendered":"Evaluating OpenContrail Virtual Router Performance"},"content":{"rendered":"<p>The OpenContrail solution uses overlays for network virtualization. Packets between tenant virtual machines are encapsulated in a tunnel on the IP fabric connecting the compute servers in the network.<\/p>\n<p>A common concern with using tunnels to encapsulate packets is whether the performance will be equivalent to the non-tunneled scenario. Many server NICs that are commonly used today do not support performance optimizations, like segmentation offload for tunneled packets. Although some vendors have recently announced NICs with optimizations for overlay networks, these are not yet in common use in data center networks.<\/p>\n<p>As a result, there is a need to optimize performance for the least common denominator i.e. without making any assumptions about the hardware capabilities of the server NICs. Also, one of the underlying design principles of the OpenContrail solution is to only use standard protocols and encapsulations in order to support interoperability with existing network hardware (or virtual) devices and leverage years of experience with proven protocols. So, inventing a new protocol or encapsulation to optimize for performance was not an attractive option.<\/p>\n<p><!--more Read more... --><\/p>\n<p>OpenContrail has a module called vRouter that performs data forwarding in the kernel.\u00a0 The vRouter module is an alternative to the Linux bridge in the kernel and one of its functionality is to perform tunnel encapsulation and decapsulation in software. A comparison of the forwarding performance of vRouter versus Linux bridge would give a good indication of the overhead of software tunneling.<\/p>\n<p><strong>THE TEST<\/strong><\/p>\n<p>The setup used to evaluate performance consists of 2 servers connected using Intel 10G NICs with a MTU of 1500. The servers have 2 CPU sockets each, with 6 cores per socket and 2 threads per core. The processor is an Intel Xeon running at 2.5GHz. The servers have 128GB of memory each and run Centos 6.4 as the host operating system. A virtual network is created and a virtual machine (VM) is instantiated on each server in this virtual network. Each VM has 1 VCPU, 2GB of memory and runs Ubuntu 12.04 as the guest operating system. A TCP streaming test is run between the VMs on the virtual network.<\/p>\n<p style=\"text-align: left;\">As shown in <strong>Figure 1<\/strong> below, the netperf client application on VM1 sends a TCP stream to netserver application running on VM2. \u00a0Packets are sent over a virtual interface (vif1) from the guest into the vRouter module on the sending host, where they are encapsulated in a tunnel before being transmitted on the wire. On the receiving host, the vRouter module decapsulates the packet and forwards them to the guest over vif2. The tests with Linux bridge are exactly the same except that vRouter is replaced by the Linux bridge module.<img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-5817\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/10\/vRouter-PerfTest-Setup.png\" alt=\"vRouter-PerfTest-Setup\" width=\"800\" height=\"494\" data-id=\"5817\" \/><\/p>\n<p>There is some variability in the measured throughput with Linux bridge as well as with vRouter depending on which CPU cores the guest VM and vHost thread are scheduled. This is exacerbated in a NUMA system as a result of the overhead associated with accessing memory from a remote NUMA node. In order to avoid this variability in performance between test runs, the guest VM and the vHost thread are each pinned to a CPU core. This results in consistent numbers between test runs and allows an apples-to-apples comparison.<\/p>\n<p style=\"text-align: left;\">\u00a0On this setup, the unidirectional throughput measured with vRouter using MPLS over GRE as the encapsulation is 9.18Gbps. The CPU consumption on the sender is 128% (1.28 CPU cores) and it is 166% on the receiver. The CPU consumption includes the processing to push packets to and from the guest and does not include the CPU consumed by the guest itself. With bidirectional traffic (one TCP stream in each direction), the aggregate throughput is 13.1 Gbps and the CPU consumption is 188% on both ends.<\/p>\n<p style=\"text-align: left;\">The table below compares the throughput and CPU consumption of vRouter with the Linux bridge numbers for a unidirectional TCP streaming test.<\/p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"111\"><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\"><strong>Throughput<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\"><strong>Sender CPU<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\"><strong>Receiver CPU<\/strong><\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"111\"><strong>Linux bridge<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">9.41 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">85%<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">125%<\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"111\"><strong>vRouter<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">9.18 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">128%<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"111\">166%<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: center;\"><b>Table 1: TCP unidirectional streaming test<\/b><\/p>\n<p>The table below compares the numbers for a bidirectional TCP streaming test. The throughput below is the aggregate of the measured throughput at each end. The CPU consumption is the same on both servers as the traffic is bidirectional<\/p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"148\"><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\"><strong>Throughput<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\"><strong>CPU consumption<\/strong><\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"148\"><strong>Linux bridge<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">13.9 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">128%<\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"148\"><strong>vRouter<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">13.1 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">188%<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: center;\">\u00a0<b>Table 2: TCP bidirectional streaming test<\/b><\/p>\n<p style=\"text-align: left;\">\u00a0In order to measure the latency of communication, a TCP request-response test was run between the 2 servers. The table below compares the number of request-response transactions seen with Linux bridge and vRouter.<\/p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"221\"><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"221\"><strong>Request-response transactions<\/strong><\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"221\"><strong>Linux bridge<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"221\">11050<\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"221\"><strong>VRouter<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"221\">10800<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: center;\">\u00a0<b>Table 3: TCP request-response test<\/b><\/p>\n<p style=\"text-align: left;\">Data center networks often enable jumbo frames for better performance. The following table compares the performance of vRouter with Linux bridge with a jumbo MTU on the 10G interface. The guest application was modified to use sendfile() instead of send() in order to avoid a copy from user space to kernel. Otherwise, the single-threaded guest application couldn\u2019t achieve a bidirectional throughput higher than 14 Gbps.<\/p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"148\"><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\"><strong>Throughput<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\"><strong>CPU consumption<\/strong><\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"148\"><strong>Linux bridge<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">18 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">125%<\/td>\n<\/tr>\n<tr>\n<td valign=\"top\" width=\"148\"><strong>vRouter<\/strong><\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">17.4 Gbps<\/td>\n<td style=\"text-align: center;\" valign=\"top\" width=\"148\">120%<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: center;\"><b>Table 4: TCP bidirectional streaming test (jumbo MTU)<\/b><\/p>\n<p><b>CONCLUSION<\/b><\/p>\n<p>As can be seen from the above tables, vRouter achieves comparable throughput and latency with Linux bridge. The throughput is slightly lower with vRouter due to the additional bytes sent on the wire for the tunnel headers. The latency is slightly higher with vRouter as it uses multiple CPU cores to process packets and this incurs additional latency. However, the big advantage is that VMs running on the compute nodes can directly communicate with any hardware gateway router (such as the Juniper MX) or Networking Services like Firewalls, etc.<\/p>\n<p>There are other encapsulation standards supported by vRouter \u2013 VXLAN and MPLS over UDP. Using MPLS over UDP allows the server NIC to verify checksums in hardware and reduces the CPU consumption on the receiver by about 15%, while achieving the same throughput.<\/p>\n<p>In summary, the OpenContrail solution achieves close to line rate forwarding on a 10G link without depending on any performance optimizations in the server NICs. This throughput is achieved using standard protocols and encapsulations that allow for interoperability. Hence, tunneling packets in an overlay network does not add any significant overheard compared to the non-tunneled scenario.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The OpenContrail solution uses overlays for network virtualization. Packets between tenant virtual machines are encapsulated in a tunnel on the IP fabric connecting the compute servers in the network. A&#8230;<\/p>\n","protected":false},"author":459,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[9,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"The OpenContrail solution uses overlays for network virtualization. Packets between tenant virtual machines are encapsulated in a tunnel on the IP fabric connecting the compute servers in the network. A...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2013-10-16T03:28:38+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/10\/vRouter-PerfTest-Setup.png\" \/>\n<meta name=\"author\" content=\"Rajagopalan Sivaramakrishnan\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/\",\"url\":\"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/\",\"name\":\"Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2013-10-16T03:28:38+00:00\",\"dateModified\":\"2013-10-16T03:28:38+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/faeed38fb295645b8dbd44f5ab222e0b\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/faeed38fb295645b8dbd44f5ab222e0b\",\"name\":\"Rajagopalan Sivaramakrishnan\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/045ef86b6fbe80163a14c27589c3c886?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/045ef86b6fbe80163a14c27589c3c886?s=96&d=mm&r=pg\",\"caption\":\"Rajagopalan Sivaramakrishnan\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/","og_locale":"en_US","og_type":"article","og_title":"Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric","og_description":"The OpenContrail solution uses overlays for network virtualization. Packets between tenant virtual machines are encapsulated in a tunnel on the IP fabric connecting the compute servers in the network. A...","og_url":"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/","og_site_name":"Tungsten Fabric","article_published_time":"2013-10-16T03:28:38+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/10\/vRouter-PerfTest-Setup.png"}],"author":"Rajagopalan Sivaramakrishnan","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/","url":"https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/","name":"Evaluating OpenContrail Virtual Router Performance - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2013-10-16T03:28:38+00:00","dateModified":"2013-10-16T03:28:38+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/faeed38fb295645b8dbd44f5ab222e0b"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/evaluating-opencontrail-virtual-router-performance\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/faeed38fb295645b8dbd44f5ab222e0b","name":"Rajagopalan Sivaramakrishnan","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/045ef86b6fbe80163a14c27589c3c886?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/045ef86b6fbe80163a14c27589c3c886?s=96&d=mm&r=pg","caption":"Rajagopalan Sivaramakrishnan"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/601"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/459"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=601"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/601\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=601"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=601"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=601"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}