{"id":8367,"date":"2021-08-16T07:54:00","date_gmt":"2021-08-16T14:54:00","guid":{"rendered":"https:\/\/tungsten.io\/?p=8367"},"modified":"2021-08-16T07:54:16","modified_gmt":"2021-08-16T14:54:16","slug":"deploying-a-kubernetes-operator-in-openshift-4-x-platform","status":"publish","type":"post","link":"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/","title":{"rendered":"Deploying a Kubernetes operator in OpenShift 4.x platform"},"content":{"rendered":"<link rel=\"canonical\" href=\"https:\/\/codilime.com\/blog\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\">\n\n\n<p><em><strong>This is a contributed blog from LF Networking Member CodiLime.&nbsp;<a href=\"https:\/\/codilime.com\/blog\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\" target=\"_blank\" rel=\"noreferrer noopener\">Originally published here<\/a><\/strong>.<\/em><\/p>\n\n\n\n<p><strong><a href=\"https:\/\/github.com\/Juniper\/contrail-operator\">Contrail-operator<\/a>&nbsp;is a recently released open-source Kubernetes operator that implements Tungsten Fabric&nbsp; as a custom resource. Tungsten Fabric is an open-source Kubernetes-compatible, network virtualization solution for providing connectivity and security for virtual, containerized or bare-metal workloads. An operator needed to be adjusted to the OpenShift 4.x platform, which introduced numerous changes to its architecture compared with previous versions. In this blog post, you\u2019ll read about three interesting use cases and their solutions. All of these solutions are a part of&nbsp;<a href=\"https:\/\/github.com\/Juniper\/contrail-operator\/tree\/master\/deploy\/openshift\">contrail-operator public repository<\/a>.<\/strong><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use case 1: inject kernel in CoreOS with OverlayFS<\/h2>\n\n\n\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/OpenShift\">OpenShift<\/a>&nbsp;is a container platform designed by Red Hat. Its version 4.x is based on nodes that use&nbsp;<a href=\"https:\/\/en.wikipedia.org\/wiki\/Container_Linux\">CoreOS<\/a>, an open-source operating system based on the Linux kernel. CoreOS has been designed specifically to allow changes in the system only when booting it for the first time. These changes are introduced using ignition configs\u2014JSON files containing, for example, names of services, files or users to be created. When the OS is up and running, most of its settings can be seen in read-only mode and users are not allowed to modify system settings.<\/p>\n\n\n\n<p>The setup is presented in Figure 1:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/c03564453aee495e0696081960dd4ff0399cbc73\/dff79\/img\/codilime_desired_deployment_of_tf_with_an_openshift_setup.png\" alt=\"Deployment of Tungsten Fabric with an Openshift setup\"\/><\/figure>\n\n\n\n<p><strong>Fig 1. The desired deployment of Tungsten Fabric with an OpenShift setup<\/strong><\/p>\n\n\n\n<p>In Tungsten Fabric, vRouter is injected into the system as a kernel module. In the contrail-operator (and also in the&nbsp;<a href=\"https:\/\/github.com\/tungstenfabric\/tf-ansible-deployer\">tf-ansible-deployer<\/a>, effectively the operator\u2019s predecessor) this is done by launching a container that injects this module into the system. With OpenShift, this task is handled by daemonSet, which launches a pod on every node. In such a pod, one of the initContainers (i.e. containers launched to perform a given operation only once and then shut down, thus allowing the proper containers to be launched) injects the kernel module into the system. Yet given the characteristics of the CoreOS, this operation cannot be performed because a container will inject a read-only kernel module to \/lib\/modules.<\/p>\n\n\n\n<p>Enter the solution to this challenge: overlayFS, which virtually merges the two directories:\/lib\/modules (read only) and \/opt\/modules (writable). Ignition config is now created, which will set OverlayFS \/lib\/modules with \/opt\/modules directories. The latter was accessible and it was possible to inject a kernel module there (see Figure 2). Such a solution did not make any difference from the perspective of the Tungsten Fabric Controller. Hence, it was not necessary to change anything in TF itself.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/69eb2300a7ad4c2deafbe9ef00fd48a64557b067\/b684f\/img\/codilime_overlayfs_of_two_directories.png\" alt=\"The OverlayFS of two directories\"\/><\/figure>\n\n\n\n<p><strong>Fig. 2 The OverlayFS of two directories<\/strong><\/p>\n\n\n\n<p>Ignition config looks like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>apiVersion: machineconfiguration.openshift.io\/v1\nkind: MachineConfig\nmetadata:\n labels:\n   machineconfiguration.openshift.io\/role: master\n name: 02-master-modules\nspec:\n config:\n   ignition:\n     version: 2.2.0\n   storage:\n     directories:\n       - filesystem: \"root\"\n         path: \"\/opt\/modules\"\n         mode: 0755\n       - filesystem: \"root\"\n         path: \"\/opt\/modules.wd\"\n         mode: 0755\n     files:\n       - filesystem: \"root\"\n         path: \"\/etc\/fstab\"\n         mode: 0644\n         contents:\n           source: \"data:,overlay%20\/lib\/modules%20overlay%20lowerdir=\/lib\/modules,upperdir=\/opt\/modules,workdir=\/opt\/modules.wd%200%200\"<\/code><\/pre>\n\n\n\n<p>Source:&nbsp;<a href=\"https:\/\/github.com\/Juniper\/contrail-operator\/blob\/master\/deploy\/openshift\/openshift\/99_master-kernel-modules-overlay.yaml\">GitHub<\/a><\/p>\n\n\n\n<p>Ignition config creates two directories: \/opt\/modules, to inject modules, and \/opt\/modules.wd, a working directory. Next, in the \/etc\/fstab, the mount is defined:<\/p>\n\n\n\n<p><code>overlay \/lib\/modules overlay lowerdir=\/lib\/modules,upperdir=\/opt\/modules,workdir=\/opt\/modules.wd<\/code><\/p>\n\n\n\n<p>Interestingly, it is not a typical ignition config for CoreOS, but a custom resource from an OpenShift cluster\u2014MachineConfig. It performs the same functions as ignition config but is also visible as a cluster resource and allows you to edit the config when the cluster is running. In this way, you can apply changes to the CoreOS node even after first boot, which is not usually supported by standard CoreOS-based deployments. This is a feature specific to OpenShift.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use case 2: set nftables rules of CoreOS with ignition config<\/h2>\n\n\n\n<p>CoreOS uses nftables, a newer framework for packet management than iptables. With a normal system like RHEL8, this is still an iptables command-line tool but in its backend it uses nftables. The iptables syntax is converted into respective nftables commands in the backend, so you can still use classic iptables commands and nftables will be still properly configured. Of course, in the CoreOS there is no such tool as iptables, as nobody assumes that the rules for packet handling will be changed when the system is up and running.&nbsp;<\/p>\n\n\n\n<p>It is true that in one of the initContainers located in a vRouter configuration pod, an iptables tool is used to carry out several operations. But the container is based on RHEL7 which in turn uses iptables backend. It is worth noting that a CLI iptables tool can support backend with iptables or nftables, though this depends on the system\u2019s backend in which it was compiled.<\/p>\n\n\n\n<p>To check what backend is used by iptables (CLI), just write the following command:&nbsp;<code>iptables --version<\/code>. If&nbsp;<code>(nftables)<\/code>&nbsp;is the reply, the tool supports nftables backend. If there is no such reply, it means that the tool supports iptables backend.&nbsp;<\/p>\n\n\n\n<p>Meanwhile, a container had a version without nftables, so it was impossible to establish rules using a container. Ignition configs helped solve this challenge. During the system boot, rules can be established using a native iptables tool:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>apiVersion: machineconfiguration.openshift.io\/v1\nkind: MachineConfig\nmetadata:\n labels:\n   machineconfiguration.openshift.io\/role: master\n name: 10-master-iptables\nspec:\n config:\n   ignition:\n     version: 2.2.0\n   systemd:\n     units:\n     - name: iptables-contrail.service\n       enabled: <strong>true<\/strong>\n       contents: |\n         &#91;Unit]\n         Description=Inserts iptables rules required by Contrail\n         After=syslog.target\n         AssertPathExists=\/etc\/contrail\/iptables_script.sh\n \n         &#91;Service]\n         Type=oneshot\n         RemainAfterExit=yes\n         ExecStart=\/etc\/contrail\/iptables_script.sh\n         StandardOutput=syslog\n         StandardError=syslog\n \n         &#91;Install]\n         WantedBy=basic.target\n   storage:\n     files:\n     - filesystem: root\n       path: \/blog\/etc\/contrail\/iptables_script.sh\n       mode: 0744\n       user:\n         name: root\n       contents:\n         # 'data:,' and URL encoded openshift-install\/sources\/iptables_script.sh\n         source: data:...,<\/code><\/pre>\n\n\n\n<p>The full version of the code can be found on&nbsp;<a href=\"https:\/\/github.com\/Juniper\/contrail-operator\/blob\/master\/deploy\/openshift\/openshift\/99_worker-iptables-machine-config.yaml\">GitHub<\/a>.<\/p>\n\n\n\n<p>In this config a service is created and run as a oneshot script during the system boot. The script is then created on the path:&nbsp;<code>\/etc\/contrail\/iptables_script.sh<\/code>. The full version of the script is available in the&nbsp;<a href=\"https:\/\/github.com\/Juniper\/contrail-operator\/blob\/master\/deploy\/openshift\/sources\/iptables_script.sh\">GitHub repository<\/a>. Generally speaking, these are simple iptables commands setting up the resources needed to run Tungsten Fabric.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use case 3: why namespaced owner orphans cluster resource<\/h2>\n\n\n\n<p>The last use case concerns the implementation of Kubernetes. During the tests one of the child resources was constantly being deleted, for no apparent reason. An investigation revealed the source of the problem: Owner reference is set for resources like Persistent Volume and Storage Class. According to the&nbsp;<a href=\"https:\/\/kubernetes.io\/docs\/concepts\/workloads\/controllers\/garbage-collection\/\">Kubernetes documentation<\/a>:&nbsp;<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>Cross-namespace owner references are disallowed by design. This means that namespace-scoped dependents can only specify owners in the same namespace, and owners that are cluster-scoped. Cluster-scoped dependents can only specify cluster-scoped owners, but not namespace-scoped owners.<\/em><\/p><\/blockquote>\n\n\n\n<p>So owner reference for Persistent Volume and Storage Class (both cluster-wide resources) was set for a namespaced resource. That was why the garbage collector in Kubernetes kept deleting the entire component. Garbage collector saw that the cluster-scoped resource had set the owner and tried to find it only in cluster-scoped resources. However, the owner was hidden in the namespace. As a result, the garbage collector recognized the resource as orphaned and deleted it in order to keep the cluster clean.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/d33wubrfki0l68.cloudfront.net\/62e099a3e5dd426221a23e4078597d92919738fb\/37e61\/img\/codilime_namespace_owner.png\" alt=\"MY RESOURCE can be the owner only of another resource in its namespace but not in a different namespace (cluster-scoped resource)\"\/><\/figure>\n\n\n\n<p><strong>Fig 3. MY RESOURCE can be the owner only of another resource in its namespace but not in a different namespace (cluster-scoped resource)<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a contributed blog from LF Networking Member CodiLime.&nbsp;Originally published here. Contrail-operator&nbsp;is a recently released open-source Kubernetes operator that implements Tungsten Fabric&nbsp; as a custom resource. Tungsten Fabric is&#8230;<\/p>\n","protected":false},"author":455,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[17,41,28,22],"tags":[62,63,57,53,59,56],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This is a contributed blog from LF Networking Member CodiLime.&nbsp;Originally published here. Contrail-operator&nbsp;is a recently released open-source Kubernetes operator that implements Tungsten Fabric&nbsp; as a custom resource. Tungsten Fabric is...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-16T14:54:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-08-16T14:54:16+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/d33wubrfki0l68.cloudfront.net\/c03564453aee495e0696081960dd4ff0399cbc73\/dff79\/img\/codilime_desired_deployment_of_tf_with_an_openshift_setup.png\" \/>\n<meta name=\"author\" content=\"tungstenfabric\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/\",\"url\":\"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/\",\"name\":\"Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2021-08-16T14:54:00+00:00\",\"dateModified\":\"2021-08-16T14:54:16+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af\",\"name\":\"tungstenfabric\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg\",\"caption\":\"tungstenfabric\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/","og_locale":"en_US","og_type":"article","og_title":"Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric","og_description":"This is a contributed blog from LF Networking Member CodiLime.&nbsp;Originally published here. Contrail-operator&nbsp;is a recently released open-source Kubernetes operator that implements Tungsten Fabric&nbsp; as a custom resource. Tungsten Fabric is...","og_url":"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/","og_site_name":"Tungsten Fabric","article_published_time":"2021-08-16T14:54:00+00:00","article_modified_time":"2021-08-16T14:54:16+00:00","og_image":[{"url":"https:\/\/d33wubrfki0l68.cloudfront.net\/c03564453aee495e0696081960dd4ff0399cbc73\/dff79\/img\/codilime_desired_deployment_of_tf_with_an_openshift_setup.png"}],"author":"tungstenfabric","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/","url":"https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/","name":"Deploying a Kubernetes operator in OpenShift 4.x platform - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2021-08-16T14:54:00+00:00","dateModified":"2021-08-16T14:54:16+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/deploying-a-kubernetes-operator-in-openshift-4-x-platform\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/9d1cee939f67e25cd95e3d6fd76ff3af","name":"tungstenfabric","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/a057983b5736b3bd0d8d86035d10c0a2?s=96&d=mm&r=pg","caption":"tungstenfabric"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/8367"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/455"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=8367"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/8367\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=8367"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=8367"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=8367"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}