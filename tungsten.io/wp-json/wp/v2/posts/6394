{"id":6394,"date":"2015-07-26T18:51:04","date_gmt":"2015-07-27T01:51:04","guid":{"rendered":"http:\/\/www.opencontrail.org\/?p=6394"},"modified":"2015-07-26T18:51:04","modified_gmt":"2015-07-27T01:51:04","slug":"kubernetes-networking-with-opencontrail","status":"publish","type":"post","link":"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/","title":{"rendered":"Kubernetes networking with OpenContrail"},"content":{"rendered":"<p><a href=\"http:\/\/opencontrail.org\/\">OpenContrail<\/a> can be used to provide network micro-segmentation to <a href=\"http:\/\/kubernetes.io\/\">kubernetes<\/a>, providing both network isolation as well as the ability to attach a pod to a network that may have endpoints\u00a0in using\u00a0different technologies \u00a0(e.g. bare-metal servers on VLANs or OpenStack VMs).<\/p>\n<p><em>Watch <a href=\"https:\/\/twitter.com\/lachlanevenson\" target=\"_blank\">Lachlan Evenson<\/a> from Lithium talk about using OpenContrail with Kubernetes at the Kubernetes 1.0 Launch.<\/em><\/p>\n[video_lightbox_youtube video_id=&#8221;pZjNFcyC6Uo&#8221; width=&#8221;720&#8243; height=&#8221;540&#8243; auto_thumb=&#8221;1&#8243;]\n<p>&nbsp;<\/p>\n<p>This post describes how the current prototype works and how packets flow between pods. For illustration purposes we will focus on 2 tiers of the k8petstore example on kubernetes: the web frontend and the redis-master tier that the frontend uses as a data store.<\/p>\n<p>The OpenContrail integration works without modifications to the kubernetes code base (as off v1.0.0 RC2). An additional daemon, by the name of kube-network-manager, is started on the master. The kubelets are executed with the option: \u201c\u2013network_plugin=opencontrail\u201d, which instructs the kubelet to execute the command:<\/p>\n<p>\/usr\/libexec\/kubernetes\/kubelet-plugins\/net\/exec\/opencontrail\/opencontrail. The <a href=\"https:\/\/github.com\/Juniper\/contrail-kubernetes\">source code<\/a> for both the network-manager and the kubelet plugin are publicly available.<\/p>\n<p>When using OpenContrail as the network implementation the kube-proxy process is disabled and all pod connectivity is implemented via the OpenContrail vrouter module which implements an overlay network using <a href=\"https:\/\/tools.ietf.org\/html\/rfc7510\">MPLS over UDP<\/a> as encapsulation. OpenContrail uses a standards based <a href=\"https:\/\/tools.ietf.org\/html\/rfc4364\">control plane<\/a> in order to distribute the mapping between endpoint (i.e. pod) and location (k8s node). The fact that the implementation is\u00a0standards compliant means that it can\u00a0interoperate\u00a0with existing network devices\u00a0(from multiple vendors).<\/p>\n<p>The kube-network-manager process uses the kubernetes controller framework to listening to changes in objects that are defined in the API and add annotations to some of these objects. It then creates a network solution for the application using the\u00a0OpenContrail API to define objects such as virtual-networks, network interfaces and access control policies.<\/p>\n<p>The kubernetes deployment configuration for this example application consists of a replication controller (RC) and a service object for the web-server and a pod and service object for the redis-master.<\/p>\n<p>The web frontend RC contains the following metadata:<\/p>\n<div>\n<div id=\"highlighter_872253\" class=\"syntaxhighlighter nogutter  jscript\">\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"labels\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number2 index1 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"frontend\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number3 index2 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"uses\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"redis-master\"<\/code><\/span><\/div>\n<div class=\"line number4 index3 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<\/div>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<\/div>\n<p>This metadata information is copied to each pod replica created by the kube-controller-manager. When the network-manager sees these pods it will:<\/p>\n<ul>\n<li>Create a virtual-network with the name &lt;namespace:frontend&gt;<\/li>\n<li>Connect this network with the network for the service &lt;namespace:redis-master&gt;<\/li>\n<li>Create an interface per pod replica with a unique private IP address from a cluster-wide address block (e.g. 10.0\/16).<\/li>\n<\/ul>\n<p>The kube-network-manager also annotates the pods with the interface uuid created by OpenContrail as well as the allocated private IP address (and a mac-address). These annotations are then read by the kubelet.<\/p>\n<p>When the pods are started by the respective kubelet invokes the plugin script. This script removes the veth-pair associated with the docker0 bridge and assigns it to the OpenContrail vrouter kernel module, executing on each node. The same script notifies the contrail-vrouter-agent of the interface uuid associated with the veth interface and configures the IP address inside the pod\u2019s\u00a0network namespace.<\/p>\n<p>At this stage each pod has an unique IP address in the cluster but can only communicate with other pods within the same virtual-network. Subnet broadcast and IP link-local multicast packets will be forwarded to the group of pods that are present in the\u00a0same virtual-network (defined by the \u201clabels.name\u201d tag).<\/p>\n<p>OpenContrail assigns\u00a0a private forwarding table to each pod interface. The veth-pair associated with the network namespace used by docker is mapped into a table which has routing entries for each of the other pod instances that are defined within the same network or networks this pod has authorized access to. The routing tables are computed centrally by the OpenContrail control-node(s) and distributed to each of the compute nodes where the vrouter is running.<\/p>\n<p>The deployment defines a service associated with web frontend\u00a0pods:<\/p>\n<div>\n<div id=\"highlighter_523962\" class=\"syntaxhighlighter nogutter  jscript\">\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"kind\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"Service\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number2 index1 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"metadata\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number3 index2 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"frontend\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number4 index3 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"labels\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number5 index4 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"frontend\"<\/code><\/span><\/div>\n<div class=\"line number6 index5 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<div class=\"line number7 index6 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">},<\/code><\/span><\/div>\n<div class=\"line number8 index7 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"spec\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number9 index8 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"ports\"<\/code><code class=\"jscript plain\">: [{<\/code><\/span><\/div>\n<div class=\"line number10 index9 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"port\"<\/code><code class=\"jscript plain\">: 3000<\/code><\/span><\/div>\n<div class=\"line number11 index10 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}],<\/code><\/span><\/div>\n<div class=\"line number12 index11 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"deprecatedPublicIPs\"<\/code><code class=\"jscript plain\">:[<\/code><code class=\"jscript string\">\"10.1.4.89\"<\/code><code class=\"jscript plain\">],<\/code><\/span><\/div>\n<div class=\"line number13 index12 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"selector\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number14 index13 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"frontend\"<\/code><\/span><\/div>\n<div class=\"line number15 index14 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<div class=\"line number16 index15 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<\/div>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<\/div>\n<p>The \u201cselector\u201d tag specifies the pods that belong to the service. The service is then assigned a \u201cClusterIP\u201d address by the kube-controller-manager. The ClusterIP is an unique IP address that can be used by other pods to consume the service. This particular service also allocates a PublicIP address that is accessible outside the cluster.<\/p>\n<p>When the service is defined, the kube-network-manager creates a virtual-network for the service (with the name of &lt;namespace:service-frontend&gt;) and allocates a floating-ip address with the ClusterIP specified by kubernetes. The floating-ip address is then associated with each of the replicas.<\/p>\n<p>In the k8petstore example, there is a load-generator tier defined by an RC with the following metadata:<\/p>\n<div>\n<div id=\"highlighter_172032\" class=\"syntaxhighlighter nogutter  jscript\">\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"labels\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number2 index1 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"bps\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number3 index2 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"uses\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"frontend\"<\/code><\/span><\/div>\n<div class=\"line number4 index3 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<\/div>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<\/div>\n<p>The network-manager process interprets the \u201cuses\u201d tag as an implicit authorization for the \u201cbps\u201d network to access the \u201cservice-frontend\u201d network which contains the ClusterIP. That is the mechanism that causes the ClusterIP address to be visible in the private routing tables that are associated with the load-generator pods.<\/p>\n<p>When traffic is sent to this ClusterIP address, the sender has multiple feasible paths available (one per replica). It chooses one of these based on a hash on the 5-tuple of the packet (IP source, IP destination, protocol, \u00a0source port, destination port). Traffic is sent encapsulated to the destination node such that the destination IP address of the inner packet is the ClusterIP. The vrouter kernel module in destination node then performs a destination NAT operation on the ClusterIP and translates this address to the private IP of the specific pod.<\/p>\n<p>A packet sent by a\u00a0load-generator pod to the ClusterIP of the web frontend goes through the following steps:<\/p>\n<ol>\n<li>Packet is sent by the IP stack in the container with SourceIP=\u201dload-gen private IP\u201d, DestinationIP=ClusterIP. This packet is send to eth0 inside the container network namespace, which is a Linux veth-pair interface.<\/li>\n<li>The packet is delivered to the vrouter kernel module; a route lookup is performed for the destination IP address (ClusterIP) in the private forwarding table \u201cbps\u201d.<\/li>\n<li>This route lookup returns an equal cost load balancing next-hop (i.e. list of available path). The ECMP algorithm selects one of the available paths and encapsulates the traffic such that and additional IP header is added to the packet with SourceIP=\u201dsender node address\u201d, DestinationIP=\u201ddestination node address\u201d; additionally an MPLS label is added to the packet corresponding to the destination pod.<\/li>\n<li>Packet travels in the underlay to the destination node.<\/li>\n<li>The destination node strips the outer headers and performs a lookup on the MPLS label and determines that the destination IP address is a \u201cfloating-ip\u201d address and requires NAT translation.<\/li>\n<li>The destination node creates a flow-pair with the NAT mapping of the ClusterIP to the private IP of the destination pod and modifies the destination IP of the payload.<\/li>\n<li>Packet is delivered to the pod such that the source IP is the unique private IP of the source pod and the destination IP is the private IP of the local pod.<\/li>\n<\/ol>\n<p>The service definition for the web front-end also specified a PublicIP. This address is implemented as a floating-ip address like the ClusterIP, except that the floating-ip is associated with a network that spans across the cluster and the outside world. Typically, OpenContrail deployments configure one or more \u201cexternal\u201d networks that map to virtual \u00a0network on external network devices such as a data-center router.<\/p>\n<p>Traffic from the external network is also equal cost load balanced to the pod replicas of the \u00a0 \u00a0web frontend. The mechanism is the same as described above except that the ingress device is a router rather than a kubernetes node.<\/p>\n<p>To finalize the walk-through of the k8petstore example, the redis-master service defines:<\/p>\n<div>\n<div id=\"highlighter_801568\" class=\"syntaxhighlighter nogutter  jscript\">\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"kind\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"Service\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number2 index1 alt1\"><span style=\"color: #0000ff;\">\u00a0<\/span><\/div>\n<div class=\"line number3 index2 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"metadata\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number4 index3 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"redismaster\"<\/code><code class=\"jscript plain\">,<\/code><\/span><\/div>\n<div class=\"line number5 index4 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"labels\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number6 index5 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"redis-master\"<\/code><\/span><\/div>\n<div class=\"line number7 index6 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<div class=\"line number8 index7 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">},<\/code><\/span><\/div>\n<div class=\"line number9 index8 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript string\">\"spec\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number10 index9 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"ports\"<\/code><code class=\"jscript plain\">: [{<\/code><\/span><\/div>\n<div class=\"line number11 index10 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"port\"<\/code><code class=\"jscript plain\">: 6379<\/code><\/span><\/div>\n<div class=\"line number12 index11 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}],<\/code><\/span><\/div>\n<div class=\"line number13 index12 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript string\">\"selector\"<\/code><code class=\"jscript plain\">: {<\/code><\/span><\/div>\n<div class=\"line number14 index13 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0\u00a0\u00a0<\/code><code class=\"jscript string\">\"name\"<\/code><code class=\"jscript plain\">: <\/code><code class=\"jscript string\">\"redis-master\"<\/code><\/span><\/div>\n<div class=\"line number15 index14 alt2\"><span style=\"color: #0000ff;\"><code class=\"jscript spaces\">\u00a0\u00a0<\/code><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<div class=\"line number16 index15 alt1\"><span style=\"color: #0000ff;\"><code class=\"jscript plain\">}<\/code><\/span><\/div>\n<\/div>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<\/div>\n<p>Since the web frontend pods contain the label <code>\"uses\": \"redis-master\"<\/code> the network-manager creates a policy that connects the clients (frontend pods) to the service ClusterIP. This policy can also limit the traffic to allow access to the ports specified in the service definition only.<\/p>\n<p>There remains additional of work to be done in this integration, but i do believe that the existing prototype shows how OpenContrail can be used to provide an elegant solution for \u00a0micro-segmentation that can both provide connectivity outside the cluster as well as pass a security audit.<\/p>\n<p>From an OpenContrail perspective, the delta between a kubernetes and an OpenStack deployment is that in OpenStack the Neutron plugin provides the mapping between Neutron and OpenContrail API objects while in kubernetes the network-manager translates the pod and service definitions into the same objects. The core functionality of the networking solution remains unchanged.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>OpenContrail can be used to provide network micro-segmentation to kubernetes, providing both network isolation as well as the ability to attach a pod to a network that may have endpoints\u00a0in&#8230;<\/p>\n","protected":false},"author":458,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[11,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Kubernetes networking with OpenContrail - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Kubernetes networking with OpenContrail - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"OpenContrail can be used to provide network micro-segmentation to kubernetes, providing both network isolation as well as the ability to attach a pod to a network that may have endpoints\u00a0in...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2015-07-27T01:51:04+00:00\" \/>\n<meta name=\"author\" content=\"Pedro Marques\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/\",\"url\":\"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/\",\"name\":\"Kubernetes networking with OpenContrail - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2015-07-27T01:51:04+00:00\",\"dateModified\":\"2015-07-27T01:51:04+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def\",\"name\":\"Pedro Marques\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg\",\"caption\":\"Pedro Marques\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Kubernetes networking with OpenContrail - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/","og_locale":"en_US","og_type":"article","og_title":"Kubernetes networking with OpenContrail - Tungsten Fabric","og_description":"OpenContrail can be used to provide network micro-segmentation to kubernetes, providing both network isolation as well as the ability to attach a pod to a network that may have endpoints\u00a0in...","og_url":"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/","og_site_name":"Tungsten Fabric","article_published_time":"2015-07-27T01:51:04+00:00","author":"Pedro Marques","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/","url":"https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/","name":"Kubernetes networking with OpenContrail - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2015-07-27T01:51:04+00:00","dateModified":"2015-07-27T01:51:04+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/kubernetes-networking-with-opencontrail\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/4482c87f5bb06e7236ba1ff004df8def","name":"Pedro Marques","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/6e92702fd500d2259b81e6285c050e68?s=96&d=mm&r=pg","caption":"Pedro Marques"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/6394"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/458"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=6394"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/6394\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=6394"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=6394"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=6394"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}