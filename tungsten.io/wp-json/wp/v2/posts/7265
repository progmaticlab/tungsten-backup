{"id":7265,"date":"2017-01-04T13:40:57","date_gmt":"2017-01-04T21:40:57","guid":{"rendered":"http:\/\/www.opencontrail.org\/?p=7265"},"modified":"2017-01-04T13:40:57","modified_gmt":"2017-01-04T21:40:57","slug":"contrail-cloud-solution-with-mpls-over-udp-overlays","status":"publish","type":"post","link":"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/","title":{"rendered":"Contrail Cloud Solution With MPLS-Over-UDP Overlays"},"content":{"rendered":"<h3><strong>Summary:<\/strong><\/h3>\n<p>MPLS-OVER-UDP Tunnels are used on datacenter environment as overlays. Existing technologies (like MPLS-OVER-GRE) to encapsulate Multi-Protocol Label Switching(MPLS) over IP are not adequate for efficient load balancing of MPLS application traffic, such as Layer3 Virtual Private Network (L3VPN) traffic across IP networks. This document specifies IP-based encapsulation technology, referred to as MPLS-in-User Datagram Protocol (UDP), which can facilitate the load balancing of MPLS application traffic across IP networks. This document also gives details on how to enable MPLS-OVER-UDP encapsulation when MX router interop with contrail controller.<\/p>\n<h3><strong>Description:<\/strong><\/h3>\n<p>Figure\u00a01 shows the frame formats of MPLS-OVER-GRE and MPLS-OVER-UDP.There no easy way to load share the traffic between 2 tunnel end points when MPLS-OVER-GRE encapsulation is used.The issue is GRE header is same for all the flows between the 2 Tunnel end points.<\/p>\n<p>But when we use MPLS-OVER-UDP encapsulation the source port value(in the MPLS-OVER-UDP header) can be generated based on the certain fields in the customer packets(in our case based on the packets generated by VMs in the vRouter).With this the routers between the Tunnel end points can load share the packets using hash of five-tuple of UDP packets.This is one of reason why MPLS-OVER-UDP overlays preferred over MPLS-OVER-GRE overlays.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7274\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format.png\" alt=\"\" width=\"450\" height=\"138\" \/><\/a><\/p>\n<p><strong>Figure 1<\/strong>: IP over MPLS over UDP Packet Format<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format_2.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7275\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format_2.png\" alt=\"\" width=\"443\" height=\"135\" \/><\/a><\/p>\n<p><strong>Figure 2<\/strong>: IP over MPLS over GRE Packet Format<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/MPLS-over-UDP-Overlay-Tunnels.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7277\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/MPLS-over-UDP-Overlay-Tunnels.jpg\" alt=\"\" width=\"696\" height=\"492\" \/><\/a><\/p>\n<p>The picture given above shows the implementation of Contrail cloud solution. In this topology PE2 &amp; PE3 will be acting as local Datacenter gateways.PE1 will be the remote Datacenter gateway.Between PE2\/PE3 and compute nodes (or vRouters) MPLS-OVER-UDP overlays will be implemented.So all traffic between compute nodes to PE2\/PE3 will be encapsulated with MPLS-OVER-UDP header.Contrail controllers will be managing the vRouters using XMPP.PE2 &amp;PE3 will talk to Contrail controllers with BGP.The vRouters in contrail cloud will act similar to PE router in L3 VPN environment.When vRouter need to send traffic to vRouters in another datacenter it will encapulate packets with MPLS-OVER-UDP header and forward it to PE2 or PE3.PE2 or PE3 will decapsulate the MPLS-OVER-UDP header and then encapsulate it with MPLS headers and forward it to PE1.PE1 decapsulate MPLS header and forward the packets to the node in remote Datacenter.<\/p>\n<p>When a VM in a vRouter need to send traffic to VM in another vRouter in the same datacenter, the source vRouter will encapsulate the packets with MPLS-OVER-UDP\/MPLS-OVER-GRE header and then forward it to the IP fabric.After the destination vRouter receives the packet it will decapsulate the packets and forward it to the destination VM.<\/p>\n<h3>Configuration on MX gateway:<\/h3>\n<p><strong>BGP Configuration :<\/strong><\/p>\n<p><strong>BGP group contrail:<\/strong><\/p>\n<p>This section gives details on BGP configuration of PE2 &amp; PE3.Both the PEs will have a similar configuration. BGP group \u201ccontrail\u201d (given below) peers to contrail controller. In this configuration, Family route-target knob controls the advertisement of routes from PE2 &amp; PE3 to contrail controller.It makes sure that PE2 &amp; PE3 advertise only required routes based on the route-targets received from the contrail controller.<\/p>\n<p>Contrail controller advertises the route targets(which is applied to the virtual Networks created in contrail controller) to PE2 &amp; PE3.PE2 &amp; PE3 advertise routes with matching route targets. Unmatched routes will not be advertised. This avoids unnecessary routes advertised to contrail controller. The knob external-paths 5 is required when you have 3 controllers in a HA environment.<\/p>\n<p>Before advertising any routes to contrail controller the next-hop of the route (through policy from-remote-pe-vrf1) is changed to PE2 or PE3 loopback address.This avoids the need for the controller to learn remote PE1 loopback address.<\/p>\n<p>This policy also adds encapsulation extended community to the remote datacenter route before advertising it to the contrail controller.This community tells the vRouter(compute nodes) to use MPLS-OVER-UDP encapsulation before it forwards traffic for this route.If this community is not advertised, \u00a0then vRouter will use the default encapsulation (which is MPLS-OVER-GRE).<\/p>\n<p>The encapsulation community\u00a0 is in the format of &#8220;members 0x030c:XXX:13&#8221;. This identifies it as opaque extended community (type 0x03) of sub-type encapsulation (0x0c).Administrator field is set to 0 since it&#8217;s reserved(But JUNOS do not allow 0 so you need to set it to some value recommended is AS NUMBER) and encap value is 13 (for MPLSoUDP).<\/p>\n<p>The configuration given below is used in PE2 and PE3 routers.<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">\n{master}[edit]\nregress@PE2# show protocols bgp group contrail     \ntype internal;\nlocal-address 10.255.181.172;\nfamily inet-vpn {\n    any;\n}\nfamily inet6-vpn {\n    any;\n}\nfamily route-target {\n    external-paths 5;\n    advertise-default;\n}\nexport from-remote-pe-vrf1;\nvpn-apply-export;\ncluster 2.2.2.2;\nneighbor 3.3.3.2;\n\n{master}[edit]\nregress@PE2# \n\nmaster}[edit]\nregress@PE2# show policy-options policy-statement from-remote-pe-vrf1\nterm 1 {\n    from {\n          protocol bgp;\n          route-filter 103.0.4.0\/24 orlonger;\n             }\n    then {\n        next-hop self;\n        community add udp;\n        accept;\n    }\n}\n\n{master}[edit]\nregress@PE2# show policy-options community udp         \nmembers 0x030c:64512:13;\n\n{master}[edit]\nregress@PE2# <\/span><\/pre>\n<p>You can verify encapsulation status in vRouter(in compute node) as shown below.For this first find the tap interface.Then check the route using the vrf number.This output shows the type of encapsulation, source and destination IPs of the tunnel and other details.<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">root@vm6:~# vif --list\nVrouter Interface Table\n\nFlags: P=Policy, X=Cross Connect, S=Service Chain, Mr=Receive Mirror\n       Mt=Transmit Mirror, Tc=Transmit Checksum Offload, L3=Layer 3, L2=Layer 2\n       D=DHCP, Vp=Vhost Physical, Pr=Promiscuous, Vnt=Native Vlan Tagged\n       Mnp=No MAC Proxy, Dpdk=DPDK PMD Interface, Rfl=Receive Filtering Offload, Mon=Interface is Monitored\n       Uuf=Unknown Unicast Flood, Vof=VLAN insert\/strip offload\n\nvif0\/3      OS: tap6b9bb806-20\n            Type:Virtual HWaddr:00:00:5e:00:01:00 IPaddr:0\n            Vrf:1 Flags:PL3L2D MTU:9160 Ref:5\n            RX packets:15533540  bytes:4717521394 errors:0\n            TX packets:15659512  bytes:4721801850 errors:0\n\n\nroot@vm6:~# rt --dump 1 |grep 103.0.8.0\/24\n103.0.8.0\/24           24            P          -             24        -\nroot@vm6:~# nh --get 24\nId:24         Type:Composite      Fmly: AF_INET  Rid:0  Ref_cnt:6          Vrf:1\n              Flags:Valid, Policy, Ecmp, \n              Sub NH(label): 16(17) 12(17)\n\n\nId:12         Type:Tunnel         Fmly: AF_INET  Rid:0  Ref_cnt:2          Vrf:0\n              Flags:Valid, MPLSoUDP, \n              Oif:0 Len:14 Flags Valid, MPLSoUDP,  Data:02 00 08 00 00 2b 52 54 00 23 13 39 08 00 \n              Vrf:0  Sip:60.60.0.6  Dip:10.255.181.172\n\nroot@vm6:~# <\/span><\/pre>\n<p>The picture given below shows the bgp configuration in Contrail controller.There are 2 nodes shown here.Router Type \u201cBGP Router\u201d shows the PE1 configuration details and Router Type \u201cControl Node\u201d details BGP configuration of Contrail Controller.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/BGP-Configuraton-in-Contrail-Controller.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-7266\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/BGP-Configuraton-in-Contrail-Controller.jpg\" width=\"1148\" height=\"600\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/BGP-Configuraton-in-Contrail-Controller_2.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-7267\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/BGP-Configuraton-in-Contrail-Controller_2.jpg\" width=\"1137\" height=\"600\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>The output from MX router (given below) shows that bgp connection established between MX and Contrail Controller.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit]\nregress@PE2# run show bgp summary \nGroups: 4 Peers: 5 Down peers: 0\nTable          Tot Paths  Act Paths Suppressed    History Damp State    Pending\nbgp.rtarget.0        \n                      17         13          0          0          0          0\nbgp.l3vpn.0          \n                      58         54          0          0          0          0\nbgp.l3vpn.2          \n                       0          0          0          0          0          0\nbgp.l3vpn-inet6.0    \n                       0          0          0          0          0          0\nbgp.l3vpn-inet6.2    \n                       0          0          0          0          0          0\nPeer                     AS      InPkt     OutPkt    OutQ   Flaps Last Up\/Dwn State|#Active\/Received\/Accepted\/Damped...\n3.3.3.2               64512         40         56       0       0       11:15 Establ\n  bgp.rtarget.0: 13\/17\/17\/0\n  bgp.l3vpn.0: 4\/4\/4\/0\n  bgp.l3vpn-inet6.0: 0\/0\/0\/0\n  vrf1.inet.0: 4\/4\/4\/0<\/span><\/pre>\n<h4>BGP Group core:<\/h4>\n<p>This BGP Group \u201ccore\u201d peers to the remote PE(PE1) connected to remote data center. The policy \u201cchange-next\u201d will change the next hop off routes advertised to remote PE1.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit] \nregress@PE2# show protocols bgp group core \ntype internal;\nlocal-address 10.255.181.172;\nfamily inet-vpn {\n    any;\n}\nfamily inet6-vpn {\n    any;\n}\nexport change-next;\nvpn-apply-export;\nneighbor 10.255.178.174;\n\n{master}[edit]\nregress@PE2# \n\n\n{master}[edit]\nregress@PE2# show policy-options policy-statement change-next \nDec 07 14:27:33\nterm 1 {\n    from protocol bgp;\n  then {\n        next-hop self;\n        accept;\n    }\n}\n\n{master}[edit]\nregress@PE2#<\/span><\/pre>\n<h3>Dynamic tunnel configuration:<\/h3>\n<p>This section explains Dynamic Tunnel Configuration between MX to Contrail Controller and MX to vrouter.<\/p>\n<h4>Dynamic Tunnel to contrail controller:<\/h4>\n<p>PE2 &amp; PE3 needs to have dynamic tunnel (MPLS-OVER-UDP\/MPLS-OVER-GRE) created to the contrail controller. This configuration will create route to the controller ip address in inet.3 table.Without this route MX will not advertise bgp.l3vpn.0 table routes to controller(when you have family route-target enabled on PE2 &amp; PE3).This Tunnel status can be verified as shown below.This tunnel will be in Dn state as there are no routes received from controller with protocol next-hop of contrail controller IP address(in this case it is 3.3.3.2).This is expected as contrail controller will not be advertising any route with 3.3.3.2 as protocol next hop.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit]\nregress@PE2# show routing-options dynamic-tunnels to-controller       \nsource-address 10.255.181.172;\nudp;\ndestination-networks {\n    3.3.3.0\/24;\n}\n\n{master}[edit]\nregress@PE2# \n\n\n{master}[edit]\nregress@PE2# run show dynamic-tunnels database terse \nTable: inet.3\n\nDestination-network: 3.3.3.2\/32\nDestination         Source          Next-hop                  Type        Status\n3.3.3.2\/32          10.255.181.172  0x487e67c nhid 0          udp         Dn    nexthop not installed\n\nmaster}[edit]\nregress@PE2# run show route 3.3.3.0\nDec 07 13:53:43 \n\ninet.0: 43 destinations, 44 routes (42 active, 0 holddown, 1 hidden)\n+ = Active Route, - = Last Active, * = Both\n\n3.3.3.0\/24         *[OSPF\/150] 00:40:14, metric 0, tag 0\n                    &gt; to 1.0.1.1 via ae0.0\n\ninet.3: 18 destinations, 31 routes (18 active, 0 holddown, 0 hidden)\n+ = Active Route, - = Last Active, * = Both\n\n3.3.3.0\/24         *[Tunnel\/300] 00:37:18\n                      Tunnel\n\n{master}[edit]\nregress@PE2# <\/span><\/pre>\n<h3>Dynamic Tunnels to vRouters:<\/h3>\n<p>PE2 &amp; PE3 should create Dynamic TUNNELS to all the vROUTERs. In our case it is MPLS-OVER-UDP TUNNEL created between PE2 &amp; PE3 to all vROUTERs.When PE2 or PE3 receives traffic from remote PE1 it uses this MPLS-OVER-UDP tunnel to forward the traffic to the respective vROUTER.The Tunnel status can be verified as given below.The Tunnel will come up only when a route received with the protocol nexthop in the segment 60.60.0.0\/16(which is configured in destination-networks as shown below).In this case 60.60.0.0\/16 is the IP segment used vrouters.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">regress@PE2# show routing-options dynamic-tunnels \ncontrail-udp {\n    source-address 10.255.181.172;\n    udp;\n    destination-networks {\n       60.60.0.0\/16;\n    }\n}\n{master}[edit]\nregress@PE2# run show dynamic-tunnels database \nTable: inet.3\nDestination-network: 60.60.0.6\/32\nTunnel to: 60.60.0.6\/32\n  Reference count: 1\n  Next-hop type: UDP\n    Source address: 10.255.181.172 Tunnel Id: 1610612742\n    Next hop: tunnel-composite, 0x4875634, nhid 710\n      Reference count: 2\n      State: Up\n\n\n{master}[edit]\nregress@PE2# run show dynamic-tunnels database terse \nTable: inet.3\n\nDestination-network: 60.60.0.6\/32\nDestination         Source          Next-hop                  Type        Status\n60.60.0.6\/32        10.255.181.172  0x48793f4 nhid 741        udp         Up   <\/span><\/pre>\n<p>&nbsp;<\/p>\n<p>This is the Routing instance configuration is created on PE2 &amp; PE3 to install the routes to vrf table.This vrf configuration is required as it is a L3VPN scenario.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit]\nregress@PE2# show routing-instances vrf1 \ninstance-type vrf;\ninterface lo0.1;\nroute-distinguisher 64512:1;\nvrf-import test1-import;\nvrf-export test1-export;\nvrf-table-label;\n}\n\n{master}[edit]\nregress@PE2# show policy-options policy-statement test1-export\nterm 1 {\n    from protocol  direct ;\n    then {\n        community add testtarget1;\n        accept;\n    }\n}\n\n{master}[edit]\nregress@PE2# \n\nregress@PE2# show policy-options policy-statement test1-import \nterm 1 {\n    from community testtarget1;\n    then accept;\n}\n\n{master}[edit]\nregress@PE2#<\/span><\/pre>\n<h3>Remote datacenter PE configuration:<\/h3>\n<p>This configuration is applied on the remote PE router (in this case PE1).This is a simple L3VPN configuration.<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">[edit]\nregress@PE1# show routing-instances vrfs1 \nDec 06 13:21:03\ninstance-type vrf;\ninterface xe-1\/1\/1.1;\ninterface xe-1\/1\/1.2;\ninterface xe-1\/1\/1.3;\ninterface xe-1\/1\/1.4;\nroute-distinguisher 64512:1;\nvrf-import test1-import;\nvrf-export test1-export;\nvrf-table-label;\n\n[edit]\nregress@PE1# show policy-options policy-statement test1-export \nDec 06 13:21:10\nterm 1 {\n    from protocol direct;\n    then {\n        community add testtarget1;\n        accept;\n    }\n}\n\n[edit]\nregress@PE1# show policy-options policy-statement test1-import    \nterm 1 {\n    from community testtarget1;\n    then accept;\n}\n\n[edit]\nregress@PE1# \n\n[edit]\nregress@PE1# show protocols bgp\nprecision-timers;\ngroup contrail-1 {\n    type internal;\n    local-address 10.255.178.174;\n    family inet {\n        unicast;\n    }\n    family inet-vpn {\n        any;\n    }\n    family inet6-vpn {\n        any;\n    }\n    cluster 3.3.3.3;\n    neighbor 10.255.181.172;\n        \n[edit]\nregress@PE1# <\/span><\/pre>\n<h3>Conclusion<\/h3>\n<p>In this document we have shown the use case of MPLS-OVER-UDP overlays. In addition to this configuration required to integrate MPLS-OVER-UDP overlays between MX and contrail controller is explained in this document.<\/p>\n<h3>APPENDIX A<\/h3>\n<p>The tunnel details from the FPC can be checked as shown below.The nexthop id can be used to check the tunnel details from the FPC.The Tunnel id,tunnel destination,Tunnel source in the FPC should match with the CLI.<\/p>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit]\nregress@PE2# run show dynamic-tunnels database \nDec 06 14:06:45\nTable: inet.3\n\nDestination-network: 60.60.0.6\/32\nTunnel to: 60.60.0.6\/32\n  Reference count: 1\n  Next-hop type: UDP\n    Source address: 10.255.181.172 Tunnel Id: 1610612742\n    Next hop: tunnel-composite, 0x4875634, nhid 710\n      Reference count: 2\n      State: Up\n\nregress@PE2# run request pfe execute target fpc3 command \"show nhdb id 710 extensive\"       \nDec 07 13:58:26 \n================ fpc3 ================\nSENT: Ukern command: show nhdb id 710 extensive\n\n   ID      Type      Interface    Next Hop Addr    Protocol       Encap     MTU               Flags  PFE internal Flags\n-----  --------  -------------  ---------------  ----------  ------------  ----  ------------------  ------------------\n  710    Compst  -              -                      MPLS             -     0  0x0000000000000000  0x0000000000000000\n\nBFD Session Id: 0\n\nComposite NH:\n  Function: Tunnel Function\n  Hardware Index: 0x0\n  Composite flag: 0x0\n  Composite pfe flag: 0xe\n  Lower-level NH Ids:\n  Derived NH Ids:\n  Tunnel Data:\n      Type     : UDP-V4\n      Tunnel ID: 1610612742\n      Encap VRF: 0\n      Decap VRF: 0\n      MTU      : 0\n      Flags    : 0x2\n      Encap Len: 28\n      Encap    : 0x45 0x00 0x00 0x00 0x00 0x00 0x40 0x00\n                 0x40 0x2f 0x00 0x00 0xac 0xb5 0xff 0x0a\n                 0x06 0x00 0x3c 0x3c 0x00 0x00 0x00 0x00\n                 0x00 0x00 0x00 0x00\n      Data Len : 8\n      Data     : 0x3c 0x3c 0x00 0x06 0x0a 0xff 0xb5 0xac\n        Feature List: NH\n           [pfe-0]: 0x08ce6d4c00100000;\n           [pfe-1]: 0x08c12e3000100000;\n          f_mask:0xe000000000000000; c_mask:0xe000000000000000; f_num:3; c_num:3,  inst:0xffffffff\n        Idx#0          -:               \n           [pfe-0]: 0x2bfffffd5e00a500  \n           [pfe-1]: 0x2bfffffd5e00a500  \n                                        \n        Idx#1          -:               \n           [pfe-0]: 0x23fffffc0000000c  \n           [pfe-1]: 0x23fffffc0000000c  \n                                        \n        Idx#2          -:               \n           [pfe-0]: 0x08c045d800080000  \n           [pfe-1]: 0x08c03d8800080000  \n                                        \nTunnel ID 1610612742                    \n==============                          \n         Ref-count 1                    \nTunnelModel:                            \nDynamic Tunnel Model:                   \n         Name = MPLSoUDP                \n         MTU = 0                        \n         VRF = default.0(0)             \n         Source Entropy = 1             \n         Packets = 0 Bytes = 0          \n                                        \nSource IP     : 10.255.181.172          \nDestination IP: 60.60.0.6     \n\n\nIngress:                                \nIndex:0                                 \n  PFE(0): 0x2bfffffd5e006500            \n  PFE(1): 0x2bfffffd5e006500            \n                                        \nIndex:1                                 \n  PFE(0): 0x8ce6c8c00100000             \n  PFE(1): 0x8c12d7000100000             \n                                        \nHandle JNH\n0x8c045d800080000\n0x8c03d8800080000\nEgress:\nIndex:0\n  PFE(0): 0x2bfffffd5e008500\n  PFE(1): 0x2bfffffd5e008500\n\nIndex:1\n  PFE(0): 0x23fffffc0000020a\n  PFE(1): 0x23fffffc0000020a\n\nIndex:2\n  PFE(0): 0x878b15400100000\n  PFE(1): 0x878b2b000100000\n\nHandle JNH\n0x8ce6cec00100000\n0x8c12dd000100000\n\n\n  Routing-table id: 0<\/span><\/pre>\n<h3>Full configuration:<\/h3>\n<h4>PE2:<\/h4>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier\">{master}[edit]\nregress@PE2# show protocols ospf\narea 0.0.0.0 {\n    interface all {\n        bfd-liveness-detection {\n            minimum-interval 300;\n            multiplier 3;\n        }\n    }\n    interface fxp0.0 {\n        disable;\n    }\n}\n\n{master}[edit]\nregress@PE2# \n\nregress@PE2# show protocols mpls\nipv6-tunneling;\ninterface all;\n{master}[edit]\nregress@PE2# \n\negress@PE2# show protocols ldp;\ninterface ae0.0;\ninterface ae1.0;\ninterface ae2.0;\ninterface lo0.0;\n{master}[edit]\nregress@PE2#\n \n{master}[edit]\nregress@PE2# show protocols bgp group contrail   \ntype internal;\nlocal-address 10.255.181.172;\nfamily inet-vpn {\n    any;\n}\nfamily inet6-vpn {\n    any;\n}\nfamily route-target {\n external-paths 5;\n advertise-default;\n}\nexport from-remote-pe-vrf1;\ncluster 2.2.2.2;\nneighbor 3.3.3.2;\n{master}[edit]\nregress@PE2# \n\n{master}[edit]\nregress@PE2# show protocols bgp group core        \ntype internal;\nlocal-address 10.255.181.172;\nfamily inet-vpn {\n    any;\n}\nfamily inet6-vpn {\n    any;\n}\nexport change-next;\nvpn-apply-export;\nneighbor 10.255.178.174;\n{master}[edit]\nregress@PE2# \n\nregress@leopard# show routing-options              \nDec 13 12:19:18\nppm {\n    redistribution-timer 120;\n}\nnonstop-routing;\nautonomous-system 64512;\ndynamic-tunnels {\n    gre next-hop-based-tunnel;\n    controller {\n        source-address 10.255.181.172;\n        udp;\n        destination-networks {\n            3.3.3.2\/32;\n        }\n    }\ncontrail-udp {\n        source-address 10.255.181.172;\n        udp;\n        destination-networks {\n            60.60.0.0\/16;\n  }\n}\n}\nregress@PE2# show policy-options policy-statement from-remote-pe-vrf1\nterm 1 {\n    from {\n          protocol bgp;\n          route-filter 103.0.4.0\/24 orlonger;\n             }\n    then {\n        next-hop self;\n        accept;\n    }\n}\n\n{master}[edit]\nregress@PE2# show policy-options community udp         \nmembers 0x030c:64512:13;\n\n{master}[edit]\nregress@PE2# \n{master}[edit]\nregress@PE2# show policy-options policy-statement change-next \nDec 07 14:27:33\nterm 1 {\n    from protocol bgp;\n  then {\n        next-hop self;\n        accept;\n    }\n}\n\n{master}[edit]\nregress@PE2#<\/span><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Summary: MPLS-OVER-UDP Tunnels are used on datacenter environment as overlays. Existing technologies (like MPLS-OVER-GRE) to encapsulate Multi-Protocol Label Switching(MPLS) over IP are not adequate for efficient load balancing of MPLS&#8230;<\/p>\n","protected":false},"author":494,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[5,35,36,7,37],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"Summary: MPLS-OVER-UDP Tunnels are used on datacenter environment as overlays. Existing technologies (like MPLS-OVER-GRE) to encapsulate Multi-Protocol Label Switching(MPLS) over IP are not adequate for efficient load balancing of MPLS...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2017-01-04T21:40:57+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format.png\" \/>\n<meta name=\"author\" content=\"Ramanathan Sethuraman\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/\",\"url\":\"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/\",\"name\":\"Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2017-01-04T21:40:57+00:00\",\"dateModified\":\"2017-01-04T21:40:57+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/6abcec47540d75712e1a8092014691d7\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/6abcec47540d75712e1a8092014691d7\",\"name\":\"Ramanathan Sethuraman\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/bf6221ae7518a72f5bebceda7ebc8a4a?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/bf6221ae7518a72f5bebceda7ebc8a4a?s=96&d=mm&r=pg\",\"caption\":\"Ramanathan Sethuraman\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/","og_locale":"en_US","og_type":"article","og_title":"Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric","og_description":"Summary: MPLS-OVER-UDP Tunnels are used on datacenter environment as overlays. Existing technologies (like MPLS-OVER-GRE) to encapsulate Multi-Protocol Label Switching(MPLS) over IP are not adequate for efficient load balancing of MPLS...","og_url":"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/","og_site_name":"Tungsten Fabric","article_published_time":"2017-01-04T21:40:57+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2017\/01\/IP-over-MPLS-over-UDP-Packet-Format.png"}],"author":"Ramanathan Sethuraman","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/","url":"https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/","name":"Contrail Cloud Solution With MPLS-Over-UDP Overlays - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2017-01-04T21:40:57+00:00","dateModified":"2017-01-04T21:40:57+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/6abcec47540d75712e1a8092014691d7"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/contrail-cloud-solution-with-mpls-over-udp-overlays\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/6abcec47540d75712e1a8092014691d7","name":"Ramanathan Sethuraman","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/bf6221ae7518a72f5bebceda7ebc8a4a?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/bf6221ae7518a72f5bebceda7ebc8a4a?s=96&d=mm&r=pg","caption":"Ramanathan Sethuraman"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/7265"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/494"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=7265"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/7265\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=7265"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=7265"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=7265"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}