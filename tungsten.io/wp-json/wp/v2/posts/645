{"id":645,"date":"2013-11-08T23:10:53","date_gmt":"2013-11-08T23:10:53","guid":{"rendered":"http:\/\/opencontrail.org\/?p=645"},"modified":"2013-11-08T23:10:53","modified_gmt":"2013-11-08T23:10:53","slug":"building-and-testing-layer2-service-images-for-opencontrail","status":"publish","type":"post","link":"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/","title":{"rendered":"Building and testing Layer2 Service Images for OpenContrail"},"content":{"rendered":"<h4>1\u00a0\u00a0\u00a0\u00a0\u00a0 Introduction<\/h4>\n<p>This is a small introduction to service VM\u2019s. On what the minimum requirements are to build them, and how to test them in a Fabric. Some people use other names like Service-extraction, Service-chaining or Network Function Virtualisation (NFV) when they mean the whole construct. In this article, we\u2019ll focus on what has to be done to create service VM\u2019s, the extracted service that get\u2019s this traffic and processes it, and how you can do simple tests with it.<\/p>\n<p>An additional focus will be on the creation and testing of Layer 2 Forwarding Service Images since this is a bit more challenging compared to build-in a \u2018traditional\u2019 Layer 3 Forwarding Service Image.<br \/>\n<!--more Read more... --><\/p>\n<h4>\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0 Types of Service VM\u2019s<\/h4>\n<p>There are different types of service VM\u2019s depending on what Layer 4 to Layer 7 service will be offered. When you build these VM\u2019s, you must know how they fit into the network and how data traffic is passed through them for inspection or manipulation.<\/p>\n<h5>2.1\u00a0\u00a0\u00a0 Passive Collection of Data traffic or monitoring<\/h5>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5786 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_2_1_image_1.png\" alt=\"hartmut_blogpost_2_1_image_1\" width=\"460\" height=\"162\" data-id=\"5786\" \/><span style=\"font-size: 13px;\">A monitoring service VM get\u2019s a configured amount of the traffic between two networks for analysis. The traffic in OpenContrail is selected by a Policy Rule, which can also be a part of a traffic analysis\/debugging that resides inside the fabric. The rule may only select a portion of this traffic to be inspected by the service VM. The service VM itself does NOT manipulate or insert anything into the Data Traffic. It just observes the traffic; usually the interface is in a kind of Promiscuous Mode, and then can report events via the management interface to higher entities. For example, in sophisticated environments, the service VM can directly re-program the policies via the OpenContrail Controller API\u2019s, based on an event seen, to stop malicious traffic.<\/span><\/p>\n<h5>2.2 \u00a0\u00a0 Service VM in-line with Data traffic<\/h5>\n<p>Quite often you see Service VM\u2019s that are in-line with the Data Traffic. This allows them to apply all kinds of manipulation of the Data traffic. Here are just a few of those applications that are in-line with the Data traffic:<\/p>\n<ul>\n<li>Caching Services<\/li>\n<li>Firewalling Services<\/li>\n<li>Tunnel Termination Service (mainly VPN-GWs of all types)<\/li>\n<li>Traffic Shaping Services<\/li>\n<li>Load-Balancing Services<\/li>\n<li>Layer 7 inspection and Manipulation Services\n<ul>\n<li>HTTP Header<\/li>\n<li>SQL Injection prevention<\/li>\n<li>DPI<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>When you write these applications they usually have TWO or more interfaces to work within their environment. The Data Traffic is then manipulated or forwarded between those two interfaces. Should the Service Image for some reason NOT process the traffic then it is dropped or lost inside the Service VM, which it is not the case with the mirroring option but may be a desired behavior.<\/p>\n<h5>2.3 \u00a0\u00a0 Traffic forwarding Types<\/h5>\n<h6>2.3.1\u00a0\u00a0\u00a0 Layer 3 forwarding<\/h6>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5788 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_2_3_1_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_2_3_1_image_1\" width=\"449\" height=\"198\" data-id=\"5788\" \/><\/p>\n<p>Layer 3 forwarding is probably the most used option as a service VM. The service VM needs two interfaces; say eth0 and eth1; and should configure the interfaces via DHCP as with every other application that has usually just one interface into the network.<\/p>\n<p>If the Service Guest is run on Linux as OS, then the only configuration option for a test-image (apart from the interface configuration) is to enable Kernel Forwarding. Below is a command that can be issued on a running VM or as part of a Cron-Job or \/etc\/rc.local configuration.<\/p>\n<p><code>echo 1 &gt; \/proc\/sys\/net\/ipv4\/ip_forward<\/code><\/p>\n<h6>2.3.2 \u00a0\u00a0 Layer 2 forwarding<\/h6>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5789 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_2_3_2_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_2_3_2_image_1\" width=\"435\" height=\"198\" data-id=\"5789\" \/><\/p>\n<p>Certain Service VM\u2019s will not be able to do Layer 3 forwarding and will act as a Layer2 Bridge only. Which means all Forwarding they are doing is based on Layer 2 MAC basis and not on Layer 3 IP-Addresses. There are a number of reasons why a Service VM should do this. Mainly it\u2019s about speed and simplicity of a Service or this is a Service that today exists in a Bump-In-The-Wire Appliance and is now hosted in a virtual environment.<\/p>\n<h5>2.4 \u00a0\u00a0 Optional management interfaces<\/h5>\n<p>Management Interfaces are meant to provide an out-of-bound management of the Service VM. In some cases the Service VM has a fixed behaviour that is build-in with and started as soon as the orchestration system launches the VM. In those cases, a management interface may not be needed. On the other hand if the Service VM needs to communicate with higher management entities in the network such as OSS\/BSS, then you would certainly want to configure such an interface.<\/p>\n<h4>\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0 Building a simple image for an Layer 2 in-line Service VM<\/h4>\n<p>To build a Service Image for a Layer 2 forwarding VM we recommend building a regular Linux Image on KVM with virtio-support. This allows you to check the service in the same way it would later be used in OpenContrail.<\/p>\n<p>In the example below we use a computer with three Ethernet NICs. The first eth0 will be used to access the system but is not mapped into the virtual machine. The Ethernet NICs eth1 and eth2 will be set into bridge mode and transparently appear in the Guest VM. This allows us to attach a regular service to these two interfaces before we load it into OpenContrail.<\/p>\n<h5>\u00a03.1\u00a0\u00a0\u00a0 Building up the KVM install environment<\/h5>\n<pre>Below are some simple instructions to install a KVM environment that allows you to install a VM into the KVM environment. On a desktop machine for a developer, this may have occurred in the past. Note the importance of installing the bridge-utils\n <code>\n <span style=\"font-family: 'courier new', courier;\">yum -y install qemu-kvm libvirt python-virtinst<\/span>\n<span style=\"font-family: 'courier new', courier;\"> yum -y install virt-viewer virt-manager<\/span>\n<span style=\"font-family: 'courier new', courier;\"> yum -y groupinstall \"Desktop\" \"Desktop Platform\" \"X Window System\" \"Fonts\"<\/span>\n<span style=\"font-family: 'courier new', courier;\"> yum -y install bridge-utils tunctl<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vi \/etc\/libvirt\/qemu.conf<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vnc_listen = \"0.0.0.0\"<\/span>\n<span style=\"font-family: 'courier new', courier;\"> user = \"root\"<\/span>\n<span style=\"font-family: 'courier new', courier;\"> group = \"root\"<\/span>\n<span style=\"font-family: 'courier new', courier;\"> dynamic_ownership = 1<\/span>\n<span style=\"font-family: 'courier new', courier;\"> service libvirtd restart<\/span><\/code><\/pre>\n<h5>\u00a03.2 \u00a0\u00a0 Setting up local bridging<\/h5>\n<p>The next step is to setup a local bridging to make the two interfaces eth1 and eth2 appear in the Guest VM so that we can use them.<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">brctl addbr br0<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addbr br1<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addif br0 eth1<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addif br1 eth2<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl show<\/span>\n<span style=\"font-family: 'courier new', courier;\"> [root@sdn-cfgm ~]# brctl show<\/span>\n<span style=\"font-family: 'courier new', courier;\"> bridge name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bridge id\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 STP enabled\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 interfaces<\/span>\n<span style=\"font-family: 'courier new', courier;\"> br0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 8000.5cf3fcb79872\u00a0\u00a0 no\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 eth1<\/span>\n<span style=\"font-family: 'courier new', courier;\"> br1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 8000.5cf3fc6a633c\u00a0\u00a0 no\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 eth2<\/span>\n<span style=\"font-family: 'courier new', courier;\"> virbr0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 8000.525400a2cfa0\u00a0\u00a0 yes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 virbr0-nic<\/span>\n <\/code><\/pre>\n<h5>\u00a03.3 \u00a0\u00a0 Create and install the VM from ISO<\/h5>\n<p>Below are instructions on how to create the image and start the installation process from an ISO in KVM. Our Image is called \u2018guest\u2019. Please review the network mapping.<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">qemu-img create -f qcow2 \/var\/lib\/libvirt\/images\/guest.img 20G<\/span>\n<span style=\"font-family: 'courier new', courier;\"> virt-install --connect qemu:\/\/\/system -n guest -r 4096 --vcpus=2 --disk path=\/var\/lib\/libvirt\/images\/guest.img,format=qcow2,size=20,device=disk,bus=virtio -c \/home\/linux.iso --graphics vnc,listen=0.0.0.0 --os-type linux --hvm --network=bridge:br0,model=virtio --network=bridge:br1,model=virtio<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Starting install...<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Creating domain... | 0 B 00:00<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Cannot open display:<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Run 'virt-viewer --help' to see a full list of available command line options<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Domain installation still in progress. You can reconnect to<\/span>\n<span style=\"font-family: 'courier new', courier;\"> the console to complete the installation process.<\/span>\n<span style=\"font-family: 'courier new', courier;\"> [root@sdn-cfgm ~]# virsh<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Welcome to virsh, the virtualization interactive terminal.<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Type: 'help' for help with commands<\/span>\n<span style=\"font-family: 'courier new', courier;\"> 'quit' to quit<\/span>\n<span style=\"font-family: 'courier new', courier;\"> virsh # list --all<\/span>\n<span style=\"font-family: 'courier new', courier;\"> Id Name State<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ----------------------------------------------------<\/span>\n<span style=\"font-family: 'courier new', courier;\"> 2 guest running<\/span>\n <\/code><\/pre>\n<p>At this point, the installation usually requires commands to choose the installation type and packages and so on. This is represented with a graphical view via the build-in VNC-Server that was also installed as part of the X-Windows installation. Please use a VNC-Client to finish the installation. With only one VM running, it\u2019s usually window \u201c:0\u201d that has a view of this VM.<\/p>\n<h5>3.4 \u00a0\u00a0 Setup a simple Bridge inside a VM for testing<\/h5>\n<p>Configuration of the services and of the interfaces inside the VM is left to the one developing the service and building the image. Below, we use a simple install of the (again) needed \u2018bridge-utils\u2019 and then we simply re-write \/etc\/rc.local with the shell commands that configures this bridge after the VM was started. You can do similar things for your own test-images before you start developing the Service.<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">yum -y install bridge-utils<\/span>\n<span style=\"font-family: 'courier new', courier;\"> cat &lt;\/etc\/rc.local<\/span>\n<span style=\"font-family: 'courier new', courier;\"> #!\/bin\/sh<\/span>\n<span style=\"font-family: 'courier new', courier;\"> #<\/span>\n<span style=\"font-family: 'courier new', courier;\"> # This script will be executed *after* all the other init scripts.<\/span>\n<span style=\"font-family: 'courier new', courier;\"> # You can put your own initialization stuff in here if you don\u2019t<\/span>\n<span style=\"font-family: 'courier new', courier;\"> # want to do the full Sys V style init stuff.<\/span>\n<span style=\"font-family: 'courier new', courier;\"> touch \/var\/lock\/subsys\/local<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ifconfig eth0 up<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ifconfig eth1 up<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addbr mybridge<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addif mybridge eth0<\/span>\n<span style=\"font-family: 'courier new', courier;\"> brctl addif mybridge eth1<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ifconfig eth0 0.0.0.0<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ifconfig eth1 0.0.0.0<\/span>\n<span style=\"font-family: 'courier new', courier;\"> ifconfig mybridge up<\/span>\n<span style=\"font-family: 'courier new', courier;\"> EOF<\/span>\n <\/code><\/pre>\n<h5>3.5 \u00a0\u00a0 Finishing the Installation<\/h5>\n<p>Please make sure that you gently halt the VM before you put it into production. Use \u201cshutdown\u201d and not \u201cdestroy\u201d in virsh and wait until the VM is stopped.<\/p>\n<p>There have been cases where the VM was not able to delete the file \u201c\/etc\/udev\/rules.d\/70-persistent-net.rules\u201d. This is especially the case when you use the un-gentle \u201cdestroy\u201d command in virsh. When you then move this Image to an orchestration system (such as CloudStack or OpenStack) the MAC addresses of your Guest Interfaces change to the dynamic ones that are present inside the Guest. The original MAC addresses of the real interfaces we used to create the Image and test it are no longer available. An existing \u201c\/etc\/udev\/rules.d\/70-persistent-net.rules\u201d file that was not deleted may look like the previous interface name eth0 and eth1 inside the guest to the original MAC .\u00a0 This will result in those Interfaces names no longer being available and having the OS use new ones like eth2 and eth3. To avoid this (especially if you have hardcoded scripts like the one above), you need to delete the file from the image before you read it into your orchestration system.<\/p>\n<p>Below we use \u2018guestfish\u2019 to mount the image and delete the file. You can also use this method to make small changes to the configuration of the image later on via a simple text editor.<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">yum -y install guestfish<\/span>\n<span style=\"font-family: 'courier new', courier;\"> guestfish --rw -a \/var\/lib\/libvirt\/images\/guest.img<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &gt; run<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &gt; list-filesystems<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \/dev\/vda1: ext3<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \/dev\/vda2: ext4<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \/dev\/vda3: swap<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \/dev\/vda4: unknown<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \/dev\/vda5: ext4<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &gt; mount \/dev\/vda2 \/<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &gt; rm \/etc\/udev\/rules.d\/70-persistent-net.rules<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &gt; exit<\/span>\n <\/code><\/pre>\n<p>The next step is an example to read -in the Image into OpenStack orchestration via CLI<\/p>\n<pre><code><span style=\"font-family: 'courier new', courier;\">source \/etc\/OpenContrail\/openstackrc; glance add name='myservice' is_public=true container_format=ovf disk_format=qcow2<\/span>\n<span style=\"font-family: 'courier new', courier;\"> &lt; \/var\/lib\/libvirt\/images\/guest.img<\/span>\n <\/code><\/pre>\n<h4>4\u00a0\u00a0\u00a0\u00a0\u00a0 Testing the Layer2 Service Image<\/h4>\n<p>We\u2019ll now do a test of the new Layer 2 service into an OpenContrail environment to see how it works.\u00a0 To make this process easier, we use the same structure as above and use the OpenContrail GUI to test and make the relevant setup changes.<\/p>\n<h5>\u00a04.1\u00a0\u00a0\u00a0 Setup the Virtual Networks<\/h5>\n<p>First we create two internal virtual networks that are on the right and left side of the Service VM.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5790\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_1_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_1_image_1\" width=\"824\" height=\"237\" data-id=\"5790\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5791\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_1_image_2.png\" alt=\"hartmut_blogpost_building_layer2_services_4_1_image_2\" width=\"748\" height=\"312\" data-id=\"5791\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5792\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_1_image_3.png\" alt=\"hartmut_blogpost_building_layer2_services_4_1_image_3\" width=\"746\" height=\"292\" data-id=\"5792\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5793\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_1_image_4.png\" alt=\"hartmut_blogpost_building_layer2_services_4_1_image_4\" width=\"1104\" height=\"269\" data-id=\"5793\" \/><\/p>\n<h5>4.2\u00a0\u00a0\u00a0 Create a Service-Template<\/h5>\n<p>Now we need to create the Service Service-Template. It\u2019s important to select Service-Mode=\u201dTransparent\u201d because this is the indicator for the system to know that this is a Layer 2 Service Image. The Service Type remains \u201cfirewall\u201d indicating a Service VM that is in-line with the Data traffic.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5794\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_2_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_2_image_1\" width=\"879\" height=\"279\" data-id=\"5794\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5795\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_2_image_2.png\" alt=\"hartmut_blogpost_building_layer2_services_4_2_image_2\" width=\"554\" height=\"400\" data-id=\"5795\" \/><\/p>\n<p>4.3\u00a0\u00a0\u00a0 Launch a Service Image<\/p>\n<p>Now we are launching our Service Image to be used.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5796\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_3_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_3_image_1\" width=\"707\" height=\"292\" data-id=\"5796\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5797\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_3_image_2.png\" alt=\"hartmut_blogpost_building_layer2_services_4_3_image_2\" width=\"688\" height=\"272\" data-id=\"5797\" \/><\/p>\n<p>In this step, it is VERY IMPORTANT to let the system use \u201cAuto Configured\u201d Networks because it needs to change the default behaviour of the vRouters at both ends in this network.<\/p>\n<p>The default is that the vRouter uses the same MAC-Address towards any Guest VM regardless if it is a service VM or a normal application VM. The vRouter always has the MAC Address 00:01:00:5e:00:00 (which is IP-Multicast) that it uses towards the VM.<\/p>\n<p>This design decision makes configuration easy if you think about things like mobility of a VM. No matter where you hold a running VM, copy it\u2019s RAM and disk to a new server and spin it up again, the local vRouter will have the same local MAC address, which means that the migrated VM would never see any difference on the new server even if it was in a remote Data Center. The vRouter always shields the physical network from the Guest VM.<\/p>\n<p>In this special environment we must change the behaviour of the vRouters. You need different MAC addresses at both ends; otherwise, the service VM might treat this as a Loop and no Traffic would flow. Choosing Auto-Configure lets the vRouter use a new MAC address as indicated in the capture below.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5798\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_3_image_3.png\" alt=\"hartmut_blogpost_building_layer2_services_4_3_image_3\" width=\"969\" height=\"167\" data-id=\"5798\" \/><\/p>\n<p>Now the Orchestration System will start the Service VM<img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5799\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_3_image_4.png\" alt=\"hartmut_blogpost_building_layer2_services_4_3_image_4\" width=\"1325\" height=\"286\" data-id=\"5799\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5800\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_3_image_5.png\" alt=\"hartmut_blogpost_building_layer2_services_4_3_image_5\" width=\"1088\" height=\"248\" data-id=\"5800\" \/><\/p>\n<p>Ignore the IP-Address indicated as assigned to the VM. This may happen when the service VM ask for them via DHCP but this usually does not happen for Layer 2 Services.<\/p>\n<h5>4.4\u00a0\u00a0\u00a0 Create a Policy<\/h5>\n<p>Now we need to create a Policy. This policy is similar to a Layer 3 service VM policy. You define the two networks Source\/Destination for being left and right (don\u2019t use the Auto-Configured Networks here). Check \u201cApply-Service\u201d and select the running instance as below.<img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5801\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_4_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_4_image_1\" width=\"1084\" height=\"342\" data-id=\"5801\" \/>4.5\u00a0\u00a0\u00a0 Assign Policy to Network<\/p>\n<p>Now you need to assign the policy to the networks. Below you also see also the new networks created via the Auto-Configure option. Just edit the old (left\/right) networks to apply the policy.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5802\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_5_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_5_image_1\" width=\"1109\" height=\"264\" data-id=\"5802\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5803\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_5_image_2.png\" alt=\"hartmut_blogpost_building_layer2_services_4_5_image_2\" width=\"680\" height=\"287\" data-id=\"5803\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5804\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_5_image_3.png\" alt=\"hartmut_blogpost_building_layer2_services_4_5_image_3\" width=\"748\" height=\"312\" data-id=\"5804\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5805\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_5_image_4.png\" alt=\"hartmut_blogpost_building_layer2_services_4_5_image_4\" width=\"1098\" height=\"343\" data-id=\"5805\" \/><\/p>\n<p>At this point the network configuration is ready to be tested.<\/p>\n<h5>4.6\u00a0\u00a0\u00a0 Test the Service Image<\/h5>\n<p>Here we use OpenStack as the orchestration System. After we log into the project, we see the Service VM running on the Horizon Dashboard<img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5806\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_1.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_1\" width=\"1139\" height=\"278\" data-id=\"5806\" \/><\/p>\n<p>For this demo, we just used an ordinary server image which has added bridge-utils support. After the orchestration system has started it, we need to login and manually configure, the same way as above, the Bridge.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5807\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_2.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_2\" width=\"598\" height=\"286\" data-id=\"5807\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5808\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_3.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_3\" width=\"690\" height=\"85\" data-id=\"5808\" \/><\/p>\n<p>Now we need to start two regular VM\u2019s at both ends to be able to Ping each other through the Bridge Service.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5809\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_4.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_4\" width=\"762\" height=\"697\" data-id=\"5809\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5810\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_5.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_5\" width=\"397\" height=\"395\" data-id=\"5810\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5811\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_6.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_6\" width=\"764\" height=\"641\" data-id=\"5811\" \/><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5812\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_7.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_7\" width=\"371\" height=\"398\" data-id=\"5812\" \/><\/p>\n<p>After the two VM\u2019s for our Test are started, just notify the two IP-Addresses they have to be able to ping each other.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5813\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_8.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_8\" width=\"648\" height=\"368\" data-id=\"5813\" \/><\/p>\n<p>Now we login to the left VM in the left network and ping the right-VM<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5814\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_9.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_9\" width=\"787\" height=\"288\" data-id=\"5814\" \/><\/p>\n<p>The last thing is to check what we see in the Service VM. As you see below, our MAC based service runs perfectly and forwards traffic between both interfaces.<img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5815\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_building_layer2_services_4_6_image_10.png\" alt=\"hartmut_blogpost_building_layer2_services_4_6_image_10\" width=\"803\" height=\"292\" data-id=\"5815\" \/>Now the rest is up for you to explore what new or existing services could be put in-between.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>1\u00a0\u00a0\u00a0\u00a0\u00a0 Introduction This is a small introduction to service VM\u2019s. On what the minimum requirements are to build them, and how to test them in a Fabric. Some people use&#8230;<\/p>\n","protected":false},"author":460,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[5,6,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"1\u00a0\u00a0\u00a0\u00a0\u00a0 Introduction This is a small introduction to service VM\u2019s. On what the minimum requirements are to build them, and how to test them in a Fabric. Some people use...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2013-11-08T23:10:53+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_2_1_image_1.png\" \/>\n<meta name=\"author\" content=\"Hartmut Schroeder\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/\",\"url\":\"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/\",\"name\":\"Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2013-11-08T23:10:53+00:00\",\"dateModified\":\"2013-11-08T23:10:53+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/7014e17b2edb5a4df842cb797ae0a48e\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/7014e17b2edb5a4df842cb797ae0a48e\",\"name\":\"Hartmut Schroeder\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/3f89fb2841aea7a4c73a2115028fadd7?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/3f89fb2841aea7a4c73a2115028fadd7?s=96&d=mm&r=pg\",\"caption\":\"Hartmut Schroeder\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/","og_locale":"en_US","og_type":"article","og_title":"Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric","og_description":"1\u00a0\u00a0\u00a0\u00a0\u00a0 Introduction This is a small introduction to service VM\u2019s. On what the minimum requirements are to build them, and how to test them in a Fabric. Some people use...","og_url":"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/","og_site_name":"Tungsten Fabric","article_published_time":"2013-11-08T23:10:53+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/hartmut_blogpost_2_1_image_1.png"}],"author":"Hartmut Schroeder","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/","url":"https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/","name":"Building and testing Layer2 Service Images for OpenContrail - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2013-11-08T23:10:53+00:00","dateModified":"2013-11-08T23:10:53+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/7014e17b2edb5a4df842cb797ae0a48e"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/building-and-testing-layer2-service-images-for-opencontrail\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/7014e17b2edb5a4df842cb797ae0a48e","name":"Hartmut Schroeder","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/3f89fb2841aea7a4c73a2115028fadd7?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/3f89fb2841aea7a4c73a2115028fadd7?s=96&d=mm&r=pg","caption":"Hartmut Schroeder"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/645"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/460"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=645"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/645\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=645"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=645"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=645"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}