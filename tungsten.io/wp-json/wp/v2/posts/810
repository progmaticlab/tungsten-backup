{"id":810,"date":"2013-11-26T00:14:53","date_gmt":"2013-11-26T00:14:53","guid":{"rendered":"http:\/\/opencontrail.org\/?p=810"},"modified":"2013-11-26T00:14:53","modified_gmt":"2013-11-26T00:14:53","slug":"how_to_enable_dynamic_network-based_services","status":"publish","type":"post","link":"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/","title":{"rendered":"How to Enable Dynamic, Network-Based Services"},"content":{"rendered":"<p>This blog post will provide a step-by-step guide to configuring a dynamic in-network service chain. As emphasized in prior blog postings on OpenContrail.org, using well known and defined standards allows a service provider to insert network-based technologies and services while leveraging a well known and understood building block of modifying the next-hop of a destination route to point to the appliance\/service VM of choice. This is known as \u201cservice chaining.\u201d \u00a0Below are five steps I will cover to show how automated service chaining can be done:<\/p>\n<p><!--more Read more... --><\/p>\n<ol>\n<li>Configuring a Gateway Router that will provide the bridging of the \u2018physical\u2019 VPN world of a customer to a \u2018virtual\u2019 world offering services. In this example, the NFV being offered is that of a NAT NFV on a NAT enabled VM. That gateway router will be configured to support L3VPN signaled via BGP for control plane exchanges with the data plane being MPLS over GRE.<\/li>\n<li>Ensure the proper VPN\u2019s (both for Enterprise and Internet Transport) are configured on the PE. VPN parameters must match those of the VN\u2019s being configured.<\/li>\n<li>Import a capable image of offering the service in question. We will be using Juniper\u2019s Firefly Perimeter product to do this.<\/li>\n<li>Using the OpenContrail Web Console to configure the appropriate VN\u2019s that will inject the service in question via a service chain.<\/li>\n<li>Spin up the service VM via compute orchestration using Openstack\u2019s Nova component and the network overlay and service chaining using OpenContrail\u2019s vRouter integration.<\/li>\n<\/ol>\n<p>A video is available which captures the end user experience of how they can enable dynamic cloud based services (NFV) inserted in real-time into their existing VPN offering.<\/p>\n<p>The video entitled \u201c<i>Production-ready Network Function Virtualization through Contrail<\/i> \u201c can be viewed below:<\/p>\n[video_lightbox_youtube video_id=&#8221;_64no8P2vUw&#8221; width=&#8221;640&#8243; height=&#8221;480&#8243; anchor=&#8221;http:\/\/opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image17.png&#8221;]\n<p>The following topology will be our reference for the remainder of this blog:<\/p>\n<p><b>Topology Reference:<\/b><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5759 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image1.png\" alt=\"blogpost_810_image1\" width=\"551\" height=\"453\" data-id=\"5759\" \/><\/p>\n<h6><span style=\"color: #3366ff;\">1. Configuring the BGP L3VPN address family between the Gateway router and OpenContrail Control Node.<\/span><\/h6>\n<p>In this step, we will configure both the Gateway Router and the OpenContrail System to have an L3VPN BGP session in order to exchange virtual VM reachability (service VM\u2019s) between both the physical network and virtual network.<\/p>\n<p>The IP fabric underlay is on subnet: 172.16.0.0\/24<br \/>\nThe Control Nodes are: 172.16.0.71 and 172.16.0.72<br \/>\nThe PE Gateway is configured: 172.16.0.10<\/p>\n<p>IBGP session between PE Gateway and OpenContrail Control Nodes.<\/p>\n<p><strong>Step 1.<\/strong><\/p>\n<p>Configure the PE BGP parameters on Contrail.<\/p>\n<p>Go to Configure -&gt; Infrastructure -&gt; BGP Peer and Click \u2018Create\u2019 at the Top Right Hand<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5760 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image2.png\" alt=\"blogpost_810_image2\" width=\"564\" height=\"519\" data-id=\"5760\" \/><\/p>\n<p><strong>Step 2.<\/strong><\/p>\n<p>Configure the BGP enabled L3VPN address family on the vendor PE Gateway router.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[ protocols bgp ]<\/span><\/pre>\n<pre><span style=\"font-family: 'courier new', courier;\">\u00a0group JUNOSV-CONTRAIL {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 type internal;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 local-address 172.16.0.10;<\/span><\/pre>\n<pre><span style=\"font-family: 'courier new', courier;\">\u00a0\u00a0\u00a0 family inet-vpn {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 unicast;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 }<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 vpn-apply-export;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 peer-as 64512;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 allow 172.16.0.0\/24;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> }<\/span><\/pre>\n<p><strong>Step 3.<\/strong><\/p>\n<p>Ensure dynamic MPLSoGRE tunneling is enabled on the PE Gateway router.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[ routing-options ]<\/span><\/pre>\n<pre><span style=\"font-family: 'courier new', courier;\">dynamic-tunnels {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 JUNOSV-CONTRAIL {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 source-address 172.16.0.10;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 gre;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 destination-networks {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 172.16.0.0\/24;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }<\/span>\n<span style=\"font-family: 'courier new', courier;\"> \u00a0\u00a0\u00a0 }<\/span>\n<span style=\"font-family: 'courier new', courier;\"> }<\/span><\/pre>\n<h6><span style=\"color: #3366ff;\">2. Setup Enterprise and Internet Transport VRF\u2019s<\/span><\/h6>\n<p>In this section, we ensure that the corresponding L3VPN customer is properly configured on the PE Gateway router along with the proper L3VPN VRF to transport Internet Traffic.<\/p>\n<p><i>The VPN Green customer has the parameters:<\/i><\/p>\n<p>RT 64512:100<br \/>\nRD (default\/auto allocation based on PE implementation)<\/p>\n<p>&nbsp;<\/p>\n<p><i>The Internet Transport VPN has the parameters:<\/i><\/p>\n<p>RT 666:100<br \/>\nRD (default\/auto allocation based on PE implementation)<\/p>\n<p><strong>\u00a0Step 1.<\/strong><\/p>\n<p>Configure the customer L3VPN VRF on the PE.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[ routing-instances VPN-GREEN ]<\/span>\n<span style=\"font-family: 'courier new', courier;\"> instance-type vrf;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> interface ge-1\/1\/0.0;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> interface lo0.500;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> route-distinguisher 11.11.11.137:64512;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vrf-target 64512:100<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vrf-table-label;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> routing-options {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> static {<\/span>\n<span style=\"font-family: 'courier new', courier;\"> route 192.168.100.0\/24 next-hop 192.168.200.2;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> }<\/span>\n<span style=\"font-family: 'courier new', courier;\"> }<\/span><\/pre>\n<p><strong>Step 2.<\/strong><\/p>\n<p>Configure the customer Internet Transport VRF on the PE. Note the expectation is that IANA allocated routable public blocks are provided as part of the public VN, available through this VRF (LSP) with the appropriate routing on ingress\/egress points. In this example we follow RFC 6598 which provides non-routable public blocks for CGNAT purposes for the left (private) VN. This also ensures uniqueness of routes being injected into a customer VPN. It is required that the public VN uses a pool of IP addresses that are indeed publically routable and owned by the service provider.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[ routing-instances INTERNET-TRANSPORT ]<\/span>\n<span style=\"font-family: 'courier new', courier;\"> instance-type vrf;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> interface lo0.200;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> route-distinguisher 11.11.11.137:666;<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vrf-target 666:100<\/span>\n<span style=\"font-family: 'courier new', courier;\"> vrf-table-label;<\/span><\/pre>\n<p>With the above configuration we expect to learn a default route to the Internet (and\/or any specific NET\/CIDR blocks) with reachability to an Internet Gateway device within the SP network.<\/p>\n<h6><span style=\"color: #3366ff;\">3. Import Service Image via Openstack Horizon GUI (or glance via CLI)<\/span><\/h6>\n<p>In this step, we import a Juniper Firefly Perimeter image which is preconfigured to perform a NAT function between anything being received on the left virtual network (aka. the internal Private VPN network, aka. 64512:1000) to the right virtual network (aka. The public internet, aka. 666:100).<\/p>\n<p>An alternative to importing an image can be done via the glance CLI on the Configuration node. This will not be covered here.<\/p>\n<p><strong>Step 1.<\/strong><\/p>\n<p>Login to the Horizon GUI interface:<\/p>\n<p>Go to Project (in this case it\u2019s demo) -&gt; Images &amp; Snapshots -&gt; Create Image<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5762\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image3.png\" alt=\"blogpost_810_image3\" width=\"719\" height=\"618\" data-id=\"5762\" \/><\/p>\n<p>If importing is successful you should see an image called firefly-12-1-nat:<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5763\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image4.png\" alt=\"blogpost_810_image4\" width=\"1131\" height=\"327\" data-id=\"5763\" \/><\/p>\n<h6><span style=\"color: #3366ff;\">4. Create the supporting parameters via the Contrail Web Console (virtual networks, net blocks, service templates, etc.)<\/span><\/h6>\n<p>In this section, we will create two virtual networks for the \u2018left\u2019 network, also known as private, within the VPN. The other virtual network will be the \u2018right\u2019 network also known as public (scary Internet). The VN will have RT\u2019s that match the VRF parameters we configured on the PE Gateway router and net blocks from RFC 6598. We will also create a service template in which future service instances will inherit the template properties.<\/p>\n<p>Virtual Network Overlay Parameters:<\/p>\n<p>Left Network: RT 64512:100, NETBLOCK: 100.64.0.0\/24<\/p>\n<p>Right Network: RT 666:100, NETBLOCK: 100.65.0.0\/24 (This should be a publicly owned and routeable netblock!)<\/p>\n<p>Associate a default network policy (which is configured for any to any)<\/p>\n<p><strong>Step 1.<\/strong><\/p>\n<p>Configure the \u2018left\u2019 virtual network by going to:<\/p>\n<p>Configure -&gt; Networking -&gt; Networks\u00a0 (Create Top Right Hand Corner).<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5764 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image5.png\" alt=\"blogpost_810_image5\" width=\"700\" height=\"512\" data-id=\"5764\" \/><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5765 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image6.png\" alt=\"blogpost_810_image6\" width=\"698\" height=\"226\" data-id=\"5765\" \/><\/p>\n<p>By clicking save you should see the following VN created:<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5766\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image7.png\" alt=\"blogpost_810_image7\" width=\"945\" height=\"178\" data-id=\"5766\" \/><\/p>\n<p><strong>Step 2.<\/strong><\/p>\n<p>Configure the \u2018right virtual network by going to:<\/p>\n<p>Configure -&gt; Networking -&gt; Networks\u00a0 (Create Top Right Hand Corner).<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5767 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image8.png\" alt=\"blogpost_810_image8\" width=\"696\" height=\"515\" data-id=\"5767\" \/><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5768 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image9.png\" alt=\"blogpost_810_image9\" width=\"674\" height=\"188\" data-id=\"5768\" \/><\/p>\n<p>By clicking save you should see the following VN created:<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5769\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image10.png\" alt=\"blogpost_810_image10\" width=\"932\" height=\"149\" data-id=\"5769\" \/><\/p>\n<p><strong>Step 3.<\/strong> Create a service template for Internet NFV Services.<\/p>\n<p>Configure -&gt; Services -&gt; Service Templates\u00a0 (Create Top Right Hand Corner).<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5770 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image11.png\" alt=\"blogpost_810_image11\" width=\"570\" height=\"450\" data-id=\"5770\" \/><\/p>\n<p>By clicking save you should see the following Service Template created:<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5771\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image12.png\" alt=\"blogpost_810_image12\" width=\"937\" height=\"198\" data-id=\"5771\" \/><\/p>\n<h6><span style=\"color: #3366ff;\">5. Complete the Chain! Instantiate a service image based on the Internet NFV Service Template and enable the Service Chain.<\/span><\/h6>\n<p>In this step we spin up a service VM for a customer (in this example customer Green VPN) and once the VM is orchestrated along with the network virtual overlay(s) we then \u2018chain\u2019 the two VN\u2019s with one another; through the service; thus completing the dynamic instantiation of the NAT NFV service.<\/p>\n<p><strong>\u00a0Step 1.<\/strong><\/p>\n<p>Configure -&gt; Services -&gt; Service Instances\u00a0 (Create Top Right Hand Corner).<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-5772 aligncenter\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image13.png\" alt=\"blogpost_810_image13\" width=\"698\" height=\"316\" data-id=\"5772\" \/><\/p>\n<p><strong>Step 2.<\/strong><\/p>\n<p>Click save and a service instance should spin up. You can confirm this by looking at the Horizon GUI (you can see IP addressing being selected in each VN, both left and right).<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5773\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image14.png\" alt=\"blogpost_810_image14\" width=\"895\" height=\"305\" data-id=\"5773\" \/><\/p>\n<p>You can also confirm this in the Contrail Web Console as shown below:<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5774\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image15.png\" alt=\"blogpost_810_image15\" width=\"951\" height=\"267\" data-id=\"5774\" \/><\/p>\n<p><strong>Step 3.<\/strong><\/p>\n<p>Create a network policy, which enables the service chain.<\/p>\n<p>Configure -&gt; Networks -&gt; Policies<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-5775\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image16.png\" alt=\"blogpost_810_image16\" width=\"994\" height=\"378\" data-id=\"5775\" \/><\/p>\n<p>The OpenContrail (vRouter) is configured for the service VM (green-vpn) that ALL routes being learnt via the right network from the PE Gateway (RT 666:100) to be leaked into the left network (RT 64512:100) but with a new next-hop of left VN VIF (which in this instance\u2019s case is 100.64.0.253 and reachable via the GREEN VPN).<\/p>\n<p>This will pull all default route traffic (assuming a 0.0.0.0\/0 is learnt with RT 666:100) to be sent to the \u2018left\u2019 interface of the service VM, NAT\u2019d through the service VM itself, and sent out the right VN towards the public network.<\/p>\n<h6><span style=\"color: #3366ff;\">Conclusion<\/span><\/h6>\n<p>The above steps will allow a user to configure a single in-network (routed) service chain using well-known and tested technologies. What should also be pointed out is that all of the above configurations are available through the vnc_api RESTful interface. As shown by the video \u201c<a href=\"http:\/\/www.youtube.com\/watch?v=_64no8P2vUw\">Production-ready Network Function Virtualization through Contrail<\/a>\u201d referenced above; it used a custom web interface using standard REST interfaces that the same Contrail Web Console leverages.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This blog post will provide a step-by-step guide to configuring a dynamic in-network service chain. As emphasized in prior blog postings on OpenContrail.org, using well known and defined standards allows&#8230;<\/p>\n","protected":false},"author":464,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[6,7,8,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Enable Dynamic, Network-Based Services - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Enable Dynamic, Network-Based Services - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This blog post will provide a step-by-step guide to configuring a dynamic in-network service chain. As emphasized in prior blog postings on OpenContrail.org, using well known and defined standards allows...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2013-11-26T00:14:53+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image1.png\" \/>\n<meta name=\"author\" content=\"Marco Rodrigues\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/\",\"url\":\"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/\",\"name\":\"How to Enable Dynamic, Network-Based Services - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2013-11-26T00:14:53+00:00\",\"dateModified\":\"2013-11-26T00:14:53+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/ce37d8c90f2f36b3a2ccb0b4c43a90a7\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/ce37d8c90f2f36b3a2ccb0b4c43a90a7\",\"name\":\"Marco Rodrigues\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0db14c6a33726f4815c5290b13f38de7?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0db14c6a33726f4815c5290b13f38de7?s=96&d=mm&r=pg\",\"caption\":\"Marco Rodrigues\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"How to Enable Dynamic, Network-Based Services - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/","og_locale":"en_US","og_type":"article","og_title":"How to Enable Dynamic, Network-Based Services - Tungsten Fabric","og_description":"This blog post will provide a step-by-step guide to configuring a dynamic in-network service chain. As emphasized in prior blog postings on OpenContrail.org, using well known and defined standards allows...","og_url":"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/","og_site_name":"Tungsten Fabric","article_published_time":"2013-11-26T00:14:53+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2013\/11\/blogpost_810_image1.png"}],"author":"Marco Rodrigues","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/","url":"https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/","name":"How to Enable Dynamic, Network-Based Services - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2013-11-26T00:14:53+00:00","dateModified":"2013-11-26T00:14:53+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/ce37d8c90f2f36b3a2ccb0b4c43a90a7"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/how_to_enable_dynamic_network-based_services\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/ce37d8c90f2f36b3a2ccb0b4c43a90a7","name":"Marco Rodrigues","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/0db14c6a33726f4815c5290b13f38de7?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0db14c6a33726f4815c5290b13f38de7?s=96&d=mm&r=pg","caption":"Marco Rodrigues"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/810"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/464"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=810"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/810\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=810"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=810"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=810"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}