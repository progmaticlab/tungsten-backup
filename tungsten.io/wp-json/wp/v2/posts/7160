{"id":7160,"date":"2016-08-12T10:43:37","date_gmt":"2016-08-12T17:43:37","guid":{"rendered":"http:\/\/www.opencontrail.org\/?p=7160"},"modified":"2016-08-12T10:43:37","modified_gmt":"2016-08-12T17:43:37","slug":"bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail","status":"publish","type":"post","link":"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/","title":{"rendered":"BGPaaS in OpenStack &#8211; Kubernetes with Calico in OpenStack with OpenContrail"},"content":{"rendered":"<p><em>Note:\u00a0This is a guest blog from tcpCloud, authored by Marek <\/em>Celoud<em> &amp; Jakub Pavlik (<\/em>tcp<em> cloud engineers). To see the original post,<a href=\"http:\/\/www.tcpcloud.eu\/en\/blog\/2016\/08\/12\/bgpaasinopenstack\/\">click here<\/a>.<\/em><\/p>\n<p>It\u2019s been a while since new version 3.X of OpenContrail was released and we have not got so much time to take a good look at new features of this most deployed SDN\/NFV with OpenStack. This blog post therefore brings our perspective on specific use cases and how to use BGP as a Service in OpenStack private cloud.<\/p>\n<p>BGPaaS together with configurable ECMP, Intel DPDK and SRIOV support are key features of the new release. All of these features show that OpenContrail became the number one SDN\/NFV solution for telco and service providers. Simply because telcos as Deutsche Telekom, France Telekom and AT&amp;T pick this as a solution for the SDN. The last named has significantly influenced features in the last OpenContrail release. To explain the reasons for these requirements and decisions you can watch Austin OC meetup videos, where AT&amp;T has explained their <a class=\"reference external\" href=\"https:\/\/www.youtube.com\/watch?v=WOWvsQwZdrQ\">use cases<\/a> and why they like MPLS L3VPN approach.<\/p>\n<p>tcp cloud tries to bring the real use cases not only for telco VNF for running virtual router appliances. Therefore we try to show you another interesting use case for the global community, where BGPaaS is very important part not only for VNF. We deployed Kubernetes with Calico on top of OpenStack with OpenContrail and redistributed routes through the BGPaaS.<\/p>\n<div id=\"bgp-as-a-service\" class=\"section\">\n<h2>BGP as a Service<\/h2>\n<p>The BGP as a service (BGPaaS) allows a guest virtual machine (VM) to place routes in its own virtual routing and forwarding (VRF) instance using BGP. It has been implemented according to the following <a class=\"reference external\" href=\"https:\/\/blueprints.launchpad.net\/juniperopenstack\/+spec\/bgp-as-a-service\">blueprint<\/a>.<\/p>\n<p>However, why do we need BGP route redistribution within Contrail? By default, virtual machines have only directly connected routes and default route pointing to Contrail IRB interface where all unknown traffic is being sent to. Then the route lookup occurs in that particular VRF. Normally, in VRF are only \/32 routes of virtual machines and sometimes routes which are propagated via BGP from Cloud GW. When no match in route fits the lookup, the traffic is discarded.<\/p>\n<p>You can run into several issues with this default behavior. For example Calico does not use overlay tunnels between its containers\/VMs so the traffic goes transparently through your infrastructure. That means all networking devices between Calico nodes must be aware of Calico routes, so the traffic can be routed properly.<\/p>\n<p>I\u2019ll explain this issue on one of our use cases &#8211; Kubernetes with Calico. When we operate Kubernetes on top of OpenStack with OpenContrail, the problem occurs after the first container is started. Calico allocates \/26 route for Kubernetes node, where the container started. This route is distributed via BGP to all the other Kubernetes nodes. But when you try to access this container, traffic goes to particular Kubernetes node. The problem is with traffic that is going back. By default there is Reverse Path Forwarding enabled, so when the traffic goes back, Contrail VRF discards traffic. The only solution prior OpenContrail 3.x release was to use static routes. This is not very agile since subnets for Calico nodes are generated dynamically and in larger scale it would be really painful to maintain all of these. In 3.x release we can use BGPaaS or disable Reverse Path Forwarding. In this blog we want to show how BGPaaS is implemented, therefore we leave Reverse Path Forwarding enabled. More detail explanation is in next section.<\/p>\n<p>Standard BGPaaS use cases are following:<\/p>\n<ul class=\"simple\">\n<li>Dynamic Tunnel Insertion Within a Tenant Overlay<\/li>\n<li>Dynamic Network Reachability of Applications<\/li>\n<li>Liveness Detection for High Availability<\/li>\n<\/ul>\n<p>More information about this feature in general is available at <a class=\"reference external\" href=\"http:\/\/www.juniper.net\/techpubs\/en_US\/contrail3.0\/topics\/concept\/bgp-as-a-service-overview.html\">link<\/a>.<\/p>\n<\/div>\n<div id=\"kubernetes-with-calico-in-openstack-with-opencontrail\" class=\"section\">\n<h2>Kubernetes with Calico in OpenStack with OpenContrail<\/h2>\n<p>The motivation for this use case is not just to use BGPaaS feature for NFV\/VNF service providers, but also for standard private clouds as well, where Kubernetes on OpenStack is deployed. Kubernetes can be used with OpenContrail plugin especially in mixing VMs with containers (multi-cloud networking <a class=\"reference external\" href=\"http:\/\/www.tcpcloud.eu\/en\/blog\/2016\/02\/12\/kubernetes-and-openstack-multi-cloud-networking\/\">blog<\/a>). However, Overlay on top of Overlay is not really good idea from a performance point of view. OpenContrail <a href=\"http:\/\/www.opencontrail.org\/newsletter-and-mailing-lists\/\">community <\/a>has already discussed working on reusing underlay vRouter instead of vRouter in vRouter, which is a little bit similar to BGPaaS feature of propagation routing information from VMs to underlay.<\/p>\n<p>Based on this we decided to use Calico as network plugin for Kubernetes, which uses <a class=\"reference external\" href=\"http:\/\/bird.network.cz\/\">BIRD<\/a> routing engine without any overlay technology.<\/p>\n<p>Let\u2019s explain the BGPaaS solution. Since Calico is using Bird, you can create BGP peering directly from each Calico node to OpenContrail. However, this full-mesh approach does not scale very well. So we decided to create two VMs with Bird service and use them as a route reflectors for Calico. Then we use these VMs as BGP peers with OpenContrail. The route exchange will be further described in following architecture section.<\/p>\n<div id=\"lab-architecture\" class=\"section\">\n<h3>Lab Architecture<\/h3>\n<\/div>\n<\/div>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/bgpasaservice-calico-opencontrail.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-7161\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/bgpasaservice-calico-opencontrail.png\" alt=\"bgpasaservice-calico-opencontrail\" width=\"867\" height=\"600\" data-id=\"7161\" \/><\/a><\/p>\n<div id=\"lab-architecture\" class=\"section\">\n<p>Let\u2019s have a closer look on this figure. The red and black lines stand for BGP peering between our Bird route reflectors (RTR01 and RTR02) VMs and OpenContrail controllers. When you want to use BGPaaS you first create a peering with .1 which stands for default gateway (peering with ntw01) and .2 (peering with ntw02) which stands for DNS (both are OpenContrail interfaces), but the actual peering is done with Controllers and .1 .2 are just BGP proxies. There is also BGP peering between all Calico nodes and RTR01,02 router reflectors. Last peering is default XMPP connections between Contrail controllers and vRouters which is used to learn and distribute route information between vRouters.<\/p>\n<p>Now we have all information about connections in our use-case and we can now explain Control plane workflow on yellow balls. We start with creating a pod on Kubernetes master (1). Kubernetes scheduler scheduled the pod on Kubernetes Node02 and Calico allocated \/26 network for that node as well as \/32 route for pod (2). This \/26 is distributed via BGP to route reflectors (3). Route reflectors then send the update to other Kubernetes nodes as well as to Contrail Controllers (4). Right now, all Kubernetes nodes are aware of this subnet and would be able to route traffic between them, but there is a need for route information in VRF as well. That is achieved in step (5), where route is distributed via XMPP to vRouters. Now we have dynamic Kubernetes with Calico environment on top of OpenStack with OpenContrail.<\/p>\n<\/div>\n<div id=\"configuration-and-outputs\" class=\"section\">\n<h3>Configuration and Outputs<\/h3>\n<p>First we had to setup and configure BIRD service on OpenStack VMs RTR01 and RTR02. It peers with default gateway and DNS server, which is propagated through vRouter to OpenContrail controls. Then it peers with each Calico node and second route reflector RTR01.<\/p>\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre><span class=\"c1\">#Peering with default GW\/vRouter<\/span>\n    protocol bgp contrail1 <span class=\"o\">{<\/span>\n            debug all<span class=\"p\">;<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.1 as 64512<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n            source address 172.16.10.115<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span>\n\n    <span class=\"c1\">#Peering with default DNS server\/vRouter<\/span>\n    protocol bgp contrail2 <span class=\"o\">{<\/span>\n            debug all<span class=\"p\">;<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.2 as 64512<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span>\n\n    <span class=\"c1\">#Peering with calico nodes<\/span>\n    protocol bgp calico_master <span class=\"o\">{<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.111 as 64512<span class=\"p\">;<\/span>\n            rr client<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span>\n\n    protocol bgp calico_node1 <span class=\"o\">{<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.112 as 64512<span class=\"p\">;<\/span>\n            rr client<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span>\n\n    protocol bgp calico_node2 <span class=\"o\">{<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.113 as 64512<span class=\"p\">;<\/span>\n            rr client<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span>\n\n    <span class=\"c1\">#Peering with second route reflector BIRD<\/span>\n    protocol bgp rtr1 <span class=\"o\">{<\/span>\n            local as 64512<span class=\"p\">;<\/span>\n            neighbor 172.16.10.114 as 64512<span class=\"p\">;<\/span>\n            import all<span class=\"p\">;<\/span>\n            export all<span class=\"p\">;<\/span>\n    <span class=\"o\">}<\/span><\/pre>\n<\/div>\n<\/div>\n<p>After that we configured a new BGPaaS in OpenContrail UI under <strong>Configure -&gt; Services -&gt; BGPaaS<\/strong>.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/create_bgp_opencontrail.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7162\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/create_bgp_opencontrail.png\" alt=\"create_bgp_opencontrail\" width=\"700\" height=\"386\" data-id=\"7162\" \/><\/a><\/p>\n<\/div>\n<p>Then we can see <em>Established<\/em> BGP peerings (172.16.10.114 and .115) under peers in Control Nodes.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/peering_opencontrail.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-7163\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/peering_opencontrail.png\" alt=\"peering_opencontrail\" width=\"952\" height=\"400\" data-id=\"7163\" \/><\/a><\/p>\n<p>Calico uses by default bgp full mesh topology. We had to disable full mesh and configure only peerings with route reflectors (RTR01 and RTR02).<\/p>\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre>root@kubernetes-node01:~# calicoctl bgp node-mesh off\nroot@kubernetes-node01:~# calicoctl bgp peer add 172.16.10.114 as 64512\nroot@kubernetes-node01:~# calicoctl bgp peer add 172.16.10.115 as 64512\n<\/pre>\n<\/div>\n<\/div>\n<p>Calico status shows <em>Established<\/em> peerings with our RTR01 and RTR02.<\/p>\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre>root@kubernetes-node01:~# calicoctl status\ncalico-node container is running. Status: Up <span class=\"m\">44<\/span> hours\nRunning felix version 1.4.0rc2\n\nIPv4 BGP status\nIP: 172.16.10.111    AS Number: <span class=\"m\">64512<\/span> <span class=\"o\">(<\/span>inherited<span class=\"o\">)<\/span>\n+---------------+-----------+-------+----------+-------------+\n<span class=\"p\">|<\/span>  Peer address <span class=\"p\">|<\/span> Peer <span class=\"nb\">type<\/span> <span class=\"p\">|<\/span> State <span class=\"p\">|<\/span>  Since   <span class=\"p\">|<\/span>     Info    <span class=\"p\">|<\/span>\n+---------------+-----------+-------+----------+-------------+\n<span class=\"p\">|<\/span> 172.16.10.114 <span class=\"p\">|<\/span>   global  <span class=\"p\">|<\/span>   up  <span class=\"p\">|<\/span> 13:14:54 <span class=\"p\">|<\/span> Established <span class=\"p\">|<\/span>\n<span class=\"p\">|<\/span> 172.16.10.115 <span class=\"p\">|<\/span>   global  <span class=\"p\">|<\/span>   up  <span class=\"p\">|<\/span> 07:26:10 <span class=\"p\">|<\/span> Established <span class=\"p\">|<\/span>\n+---------------+-----------+-------+----------+-------------+\n<\/pre>\n<\/div>\n<\/div>\n<p>Finally we can see part of VRF routing table for our virtual network on compute 01. It shows direct interface for RTR01 VM (172.16.10.114\/32) and tunnel to RTR02 (172.16.10.115\/32). Subnet 192.168.156.192\/26 is for Kubernetes pods and it is dynamically propagated by Calico through BIRD route reflectors.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/vrouter_routing_table_opencontrail.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-7164\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/vrouter_routing_table_opencontrail.png\" alt=\"vrouter_routing_table_opencontrail\" width=\"1007\" height=\"600\" data-id=\"7164\" \/><\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>In this blog post we showed how easy it is to use BGPaaS in OpenContrail and how you can look at general use case of running Kubernetes on top of OpenStack. All OpenContrail installations can be automated via Heat templates, but contrail-heat resources for BGPaaS require some modifications to work properly.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Note:\u00a0This is a guest blog from tcpCloud, authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers). To see the original post,click here. It\u2019s been a while since new version&#8230;<\/p>\n","protected":false},"author":479,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[15,17,20,11],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"Note:\u00a0This is a guest blog from tcpCloud, authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers). To see the original post,click here. It\u2019s been a while since new version...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2016-08-12T17:43:37+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/bgpasaservice-calico-opencontrail.png\" \/>\n<meta name=\"author\" content=\"Jakub Pavlik\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/\",\"url\":\"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/\",\"name\":\"BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2016-08-12T17:43:37+00:00\",\"dateModified\":\"2016-08-12T17:43:37+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\",\"name\":\"Jakub Pavlik\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"caption\":\"Jakub Pavlik\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/","og_locale":"en_US","og_type":"article","og_title":"BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric","og_description":"Note:\u00a0This is a guest blog from tcpCloud, authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers). To see the original post,click here. It\u2019s been a while since new version...","og_url":"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/","og_site_name":"Tungsten Fabric","article_published_time":"2016-08-12T17:43:37+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2016\/08\/bgpasaservice-calico-opencontrail.png"}],"author":"Jakub Pavlik","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/","url":"https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/","name":"BGPaaS in OpenStack - Kubernetes with Calico in OpenStack with OpenContrail - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2016-08-12T17:43:37+00:00","dateModified":"2016-08-12T17:43:37+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/bgpaas-in-openstack-kubernetes-with-calico-in-openstack-with-opencontrail\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75","name":"Jakub Pavlik","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","caption":"Jakub Pavlik"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/7160"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/479"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=7160"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/7160\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=7160"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=7160"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=7160"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}