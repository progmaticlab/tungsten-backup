{"id":6368,"date":"2015-07-13T17:03:02","date_gmt":"2015-07-14T00:03:02","guid":{"rendered":"http:\/\/www.opencontrail.org\/?p=6368"},"modified":"2015-07-13T17:03:02","modified_gmt":"2015-07-14T00:03:02","slug":"opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb","status":"publish","type":"post","link":"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/","title":{"rendered":"OpenContrail SDN Lab testing 1 &#8211; ToR Switches with OVSDB"},"content":{"rendered":"<p>This is a guest blog from tcpCloud authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers) along with Rostislav Safar (Arrow ECS network engineer). To see the original post, <a href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/\">click here<\/a>.<\/p>\n<p>Nobody doubts that OpenStack is the best open source project for private and public clouds today. OpenStack has begun to be perceived as a standard platform not only for laboratory or development environments, but has became suitable for large enterprises and service providers as well. This OpenStack revolution brought along a new topic called SDN. Software Defined Networking (SDN) can be seen as kind of buzzword and lot of our customers thought that they did not have a need for SDN, because their environment is not large enough, too dynamic, etc. But SDN is not just about scaling, it gives you opportunity to use NFV (Network Function Virtualization) like LbaaS, FWaaS, VPNaaS. Finally the most important reason is that Neutron supports vendor driven SDN solutions (Neutron vendor plugin) and it is possible to use this vendor SDN solution together with OpenStack in real enterprise production. The reason to use vendor\u00a0plugin is that upstream Neutron solution with OpenVSwitch (DVR or L3 agent) does not provide native High Availability, scalability, performance and service provider features (L3VPN, EVPN) required by the large enterprises.<\/p>\n<p>Our team in tcp cloud has been solving very advanced network questions and problems for different service providers for past 6 months. Based on that we had to choose SDN solution, which would let us to satisfy customer requirements and provide robust and stable cloud solution. We compared several SDN solutions from different vendors and chose OpenContrail, simply because \u201cit works\u201d and it is not only slideware or any other from of secret marketing product, which can be installed only by vendor behind the closed door.<\/p>\n<p>Therefore tcp cloud together with Arrow ECS decided to create LAB environment, where we can proof and verify all marketing messages in real deployment to show customer that given solution exists, works and we know how to implement it without hidden issues.<\/p>\n<p>This blog is first one from series of articles about OpenContrail SDN Lab testing, where we would like to cover topics like:<\/p>\n<ul class=\"simple\">\n<li>L3VPN termination at cloud environment<\/li>\n<li>VxLAN to EVPN Stitching for L2 Extension<\/li>\n<li>VxLAN Routing and SDN<\/li>\n<li>OVSDB Provides Control for VxLAN<\/li>\n<li>Translating between SDN Types<\/li>\n<li>MPLSoverGRE or VxLAN encapsulation<\/li>\n<li>Kubernetes integration (container virtualization)<\/li>\n<\/ul>\n<div id=\"tor-integration-overview\" class=\"section\">\n<h2>TOR INTEGRATION OVERVIEW<\/h2>\n<p>SDN brings idea that everything can be virtualized, however there are still technological or legal limitation, which block possibility to integrate them into overlay like:<\/p>\n<ul class=\"simple\">\n<li><strong>Legacy hardware infrastructure<\/strong> &#8211; PowerVM, HP Itanium, OEM appliances<\/li>\n<li><strong>Licenses<\/strong> &#8211; some software cannot be operated on virtual hardware<\/li>\n<li><strong>Physical network appliances<\/strong> &#8211; firewalls, load balancers, etc<\/li>\n<li><strong>Database clusters<\/strong> &#8211; Oracle SuperCluster, etc<\/li>\n<\/ul>\n<p>Therefore there must be way how to connect the underlay world with overlay. OpenContrail provides 3 ways to connect overlay with underlay:<\/p>\n<ul class=\"simple\">\n<li><strong>Link Local Services<\/strong> &#8211; it might be required for a virtual machine to access specific services running on the fabric infrastructure. For example, a VM requiring access to the backup service running in the fabric. Such access can be provided by configuring the required service as a link local service.<\/li>\n<li><strong>Router L3\/L2 gateway (VRF, EVI)<\/strong> &#8211; standard cloud gateway used for external routing networks. Standard use-case is OpenStack floating IPs. This will be discuss in next blog article.<\/li>\n<li><strong>ToR switch<\/strong> &#8211; top-of-rack switch provides L2 connection for baremetal server or any other L2 service.<\/li>\n<\/ul>\n<p>This blog focuses at ToR switch integration and should answer following questions:<\/p>\n<ul class=\"simple\">\n<li><strong>Baremetal server into overlay VN<\/strong><\/li>\n<li><strong>VxLAN with OVSDB terminated at ToR switch<\/strong><\/li>\n<li><strong>Multi vendor support for ToR switches with OVSDB<\/strong> &#8211; OpenContrail lets to use any Switch vendor with standard OVSDB protocol.<\/li>\n<li><strong>Redundantly connected Bare Metal Servers<\/strong> &#8211; Physical port in virtual network is amazing, but how to solve HA for this server?<\/li>\n<li><strong>High Availability for ToR configuration<\/strong> &#8211; Functional test is not equal to production setup.<\/li>\n<\/ul>\n<p>The beginning covers OpenContrail\u2019s support for ToR switches with OVSDB is explained at official Juniper documentation. The next section introduces the Lab infrastructure and architecture with server role description. At the end Contrail deployment is briefly described. The last two sections cover implementation of ToR Agent with Juniper QFX and OpenVSwitch.<\/p>\n<\/div>\n<div id=\"opencontrail-support-for-tor-switch-and-ovsdb\" class=\"section\">\n<h2>OPENCONTRAIL SUPPORT FOR TOR SWITCH AND OVSDB<\/h2>\n<p>This overview is taken from <a id=\"id1\" class=\"reference internal\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#contrailtor\">[ContrailToR]<\/a>. Since 2.1 release, Contrail supports extending a cluster to include bare metal servers or other virtual instances connected to a top-of-rack (ToR) switch that supports the Open vSwitch Database Management (OVSDB) Protocol. The bare metal servers and other virtual instances can belong to any of the virtual networks configured in the Contrail overlay, facilitating communication with the virtual instances running in the OpenStack cluster. Contrail policy configuration is used to control behaviour of this communication.<\/p>\n<p>OVSDB protocol is used to configure the TOR switch and to import dynamically-learned addresses. VXLAN encapsulation is used in the data plane for communication with the TOR switch.<\/p>\n<div id=\"tor-services-node-tsn\" class=\"section\">\n<h3>TOR Services Node (TSN)<\/h3>\n<p>The TSN acts as the multicast controller for the TOR switches. The TSN also provides DHCP and DNS services to the bare metal servers or virtual instances running behind TOR ports.<\/p>\n<p>The TSN receives all the broadcast packets from the TOR, and replicates them to the required compute nodes in the cluster and to other EVPN nodes. Broadcast packets from the virtual machines in the cluster are sent directly from the respective compute nodes to the TOR switch.<\/p>\n<p>The TSN can also act as the DHCP server for the bare metal servers or virtual instances, leasing IP addresses to them, along with other DHCP options configured in the system. The TSN also provides a DNS service for the bare metal servers.<\/p>\n<p>Multiple TSN nodes can be configured in the system based on the scaling needs of the cluster.<\/p>\n<\/div>\n<div id=\"contrail-tor-agent\" class=\"section\">\n<h3>Contrail TOR Agent<\/h3>\n<p>A TOR agent provisioned in the Contrail cluster acts as the OVSDB client for the TOR switch, and all of the OVSDB interactions with the TOR are performed by using the TOR agent. The TOR agent programs the different OVSDB tables onto the TOR switch and receives the local unicast table entries from the TOR switch.<\/p>\n<p>There is more information about <a id=\"id2\" class=\"reference internal\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#contrailtor\">[ContrailToR]<\/a>.<\/p>\n<\/div>\n<\/div>\n<div id=\"actual-lab-environment\" class=\"section\">\n<h2>ACTUAL LAB ENVIRONMENT<\/h2>\n<p>Arrow LAB infrastructure consists of several Juniper boxes. The following figure captures the testing rack.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/rack_oc_image1.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6369\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/rack_oc_image1.png\" alt=\"rack_oc_image1\" width=\"573\" height=\"400\" data-id=\"6369\" \/><\/a><\/p>\n<p>The following diagram shows high level network design of the lab environment.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/high-level-design.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6370\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/high-level-design.png\" alt=\"high-level-design\" width=\"548\" height=\"300\" data-id=\"6370\" \/><\/a><\/p>\n<p>The following diagram shows logical architecture for TOR testing. As already mentioned we use two Juniper MX5 routers and QFX5100 switches.<\/p>\n<ul class=\"simple\">\n<li><strong>CTPx<\/strong> &#8211; Using 4 physical servers as compute nodes. Each compute node is KVM hypervisor with Contrail vRouter.<\/li>\n<li><strong>BMS01<\/strong> &#8211; Represents physical server with one 10Gbps port connected to QFX.<\/li>\n<li><strong>TNS01<\/strong> &#8211; Physical server (can be virtual) for TOR Services Node with 2 ToR agents (QFX and OpenVSwitch).<\/li>\n<li><strong>CTL<\/strong> &#8211; OpenStack and OpenContrail standalone controller. It contains all OpenStack APIs, database, message queue and OpenContrail control, config and analytics roles.<\/li>\n<li><strong>OVS<\/strong> &#8211; Physical server with OpenVSwitch installed that is used as ToR switch. Details are described in section with openvswitch integration.<\/li>\n<li><strong>BMS2<\/strong> &#8211; Physical server connected to OVS node.<\/li>\n<\/ul>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/arrowlab.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6371\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/arrowlab.png\" alt=\"arrowlab\" width=\"466\" height=\"400\" data-id=\"6371\" \/><\/a><\/p>\n<\/div>\n<div id=\"actual-lab-environment\" class=\"section\">\n<p>The next section describes installation Contrail with TNS (ToR agent).<\/p>\n<\/div>\n<div id=\"contrail-installation\" class=\"section\">\n<h2>CONTRAIL INSTALLATION<\/h2>\n<p>The lab testing was commited on Contrail 2.1 with OpenStack IceHouse. The reason for choosing version 2.1 over 2.2 is that official Contrail 2.2 release has been available since last week. Therefore ToR in high availability setup will be discusses in next blog post, because of significant performance and availabitlity improvements in release 2.2.<\/p>\n<p>The installation guide is available at official Juniper <a id=\"id3\" class=\"reference internal\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#site\">[site]<\/a>. The following output shows our testbed.py file, where hosts are:<\/p>\n<ul class=\"simple\">\n<li><strong>host1<\/strong> &#8211; OpenStack and OpenContrail standalone controller. It contains all OpenStack APIs, database, message queue and OpenContrail control, config and analytics role.<\/li>\n<li><strong>host2 &#8211; 5<\/strong> &#8211; Compute nodes<\/li>\n<li><strong>host6<\/strong> &#8211; TNS node with ToR agents. We installed first ToR agent by Fabric provisioning and second ToR manually in OpenVSwitch section.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">from fabric.api import env \n#Management ip addresses of hosts in the clusterhost1='ubuntu@10.10.90.129' host2='ubuntu@10.100.10.2' host3='ubuntu@10.100.10.3' host4='ubuntu@10.100.10.4' host5='ubuntu@10.100.10.5' host6='ubuntu@10.100.10.6'ext_routers=[]router_asn= 65412  \nhost_build='ubuntu@10.10.90.129'\nenv.roledefs ={'all': [host1, host2, host3,host6],\n     'cfgm': [host1], \n     'openstack': [host1], \n     'control': [host1], \n     'compute': [host2,host3,host4,host5,host6], \n     'collector': [host1], \n     'webui': [host1], \n     'database': [host1], \n     'build': [host_build], \n     'storage-master': [host1], \n     'storage-compute': [host2, host3,host4,host5], \n     'tsn': [host6], # Optional, Only to enable TSN. Only compute can support TSN'toragent': [host6], #, Optional, Only to enable Tor Agent. Only compute can support Tor Agent} \n\nenv.openstack_admin_password ='arrowlab' \nenv.hostnames ={'all': ['ctl01', 'cpt01', 'cpt02', 'cpt03', 'cpt04','tns01']} \n\nenv.passwords ={ \n      host1: 'ubuntu', \n      host2: 'ubuntu', \n      host3: 'ubuntu', \n      host4: 'ubuntu', \n      host5: 'ubuntu', \n      host6: 'ubuntu', \n      host_build: 'ubuntu', \n} \n\nenv.ostypes ={ \n      host1:'ubuntu', \n      host2:'ubuntu', \n      host3:'ubuntu', \n      host4:'ubuntu', \n      host5:'ubuntu', \n      host6:'ubuntu', \n} \n\nenv.tor_agent ={ \nhost6: [{'tor_ip':'10.100.10.1', # IP address of the TOR'tor_id':'1', # Numeric value to uniquely identify TOR 'tor_type':'ovs''tor_ovs_port':'9999', # the TCP port to connect on the TOR'tor_ovs_protocol':'tcp', # always tcp, for now'tor_tsn_ip':'10.100.10.6', # IP address of the TSN for this TOR'tor_tsn_name':'tns01', # Name of the TSN node'tor_name':'qfx5100', # Name of the TOR switch'tor_tunnel_ip':'10.10.80.6', # IP address of Data tunnel endpoint'tor_vendor_name':'QFX5100', # Vendor name for TOR switch'tor_http_server_port':'8085', # HTTP port for TOR Introspect}]}\n\n<\/span><\/pre>\n<h2>CONTRAIL BAREMETAL TOR IMPLEMENTATION WITH JUNIPER QFX5100<\/h2>\n<p>This section shows how to setup Juniper QFX as ToR switch with baremetal server connection to the virtual network.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/torQFX1.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6374\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/torQFX1.png\" alt=\"torQFX1\" width=\"471\" height=\"350\" data-id=\"6374\" \/><\/a><\/span><\/pre>\n<p class=\"section\">Scenario for testing:<\/p>\n<p class=\"section\">1. Create virtual network <em>vxlannet<\/em> 10.0.10.0\/24 and set VxLAN encapsulation through VNI 10<br \/>\n2. Boot two instances VM1 (10.0.10.4) and VM2 (10.0.10.3) at two compute nodes into created virtual network <em>vxlannet3. <\/em><br \/>\n3. Configure QFX for managing by OVSDB.<br \/>\n4. Configure QFX port xe-0\/0\/40.1000 through Contrail as L2 10.0.10.100 to network <em>vxlannet<\/em>.<br \/>\n5. Verify connectivity and configuration.<\/p>\n<p>Step 1. and 2. is not covered in this blog post.<\/p>\n<div id=\"qfx5100-configuration\" class=\"section\">\n<h3>QFX5100 Configuration<\/h3>\n<p>OVSDB software package must be installed in order to enable following configuration in QFX side. We run Junos version 14.1X53-D15.2 with JUNOS SDN Software Suite 14.1X53-D15.2.<\/p>\n<p>The following output shows commands for configuration QFX switch to enable managing interface xe-0\/0\/40 through ovsdb. This configuration parameters have to meet values from <em>testbed.py<\/em>.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">set interfaces lo0 unit 0 family inet address 10.10.80.6\/32 \nset switch-options ovsdb-managed \nset switch-options vtep-source-interface lo0.0 \nset protocols ovsdb passive-connection protocol tcp port 6632 \nset protocols ovsdb interfaces xe-0\/0\/40 \n\n<\/span><\/pre>\n<h3>Contrail Configuration<\/h3>\n<p>Configuration for ToR agent was already defined in testbed.py, therefore the rest can be done in Contrail WebUI.<\/p>\n<p>On Contrail side we had to add physical device QFX. After that we added physical and logical port for bare metal server.<\/p>\n<p>In Contrail WebUI go to <em>Configure &gt; Physical Devices &gt; Physical Routers<\/em> and create new entry for the TOR switch, providing the TOR\u2019s IP address and VTEP address. The router name should match the hostname of the TOR. Also configure the TSN and TOR agent addresses for the TOR.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\"><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/edit-physical-qfx.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-6375\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/edit-physical-qfx.png\" alt=\"edit-physical-qfx\" width=\"698\" height=\"516\" data-id=\"6375\" \/><\/a>\n<\/span><\/pre>\n<p>Go to <em>Configure &gt; Physical Devices &gt; Interfaces<\/em> and add physical and logical interface to be configured on the TOR. The name of the logical interface must match the name on the TOR (xe-0\/0\/40 and xe-0\/0\/40.1000). Also enter other logical interface configurations, such as VLAN ID, MAC address, and IP address of the bare metal server and the virtual network to which it belongs.<\/p>\n<p>We made several tests and this configuration shows connection of bare metal server with VLAN tagged with ID 1000.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-port-qfx.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6376\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-port-qfx.png\" alt=\"logical-port-qfx\" width=\"980\" height=\"300\" data-id=\"6376\" \/><\/a><\/p>\n<p>The following output shows configuration changes done by Contrail on interfaces and VLAN section.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC# show interfaces xe-0\/0\/40 \nflexible-vlan-tagging; \nencapsulation extended-vlan-bridge; \nunit 1000 { \n           vlan-id 1000; \n} \n\nsofttronik@QFX5100_VC# show vlans \nContrail-c68a622b-9248-4535-bf04-4859012d7a2a { \n           interface xe-0\/0\/40.1000; \n           vxlan { \n                  vni 10; \n           }} <\/span><\/pre>\n<p>To list interfaces managed via ovsdb, use <em>show ovsdb interface<\/em> command.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC&gt; show ovsdb interface \nInterface           VLAN ID           Bridge-domain \nxe-0\/0\/40           1000              Contrail-c68a622b-9248-4535-bf04-4859012d7a2a<\/span><\/pre>\n<p>List all learned MAC addresses and connection with particular VTEP with <em>show ovsdb mac<\/em>. Grep only remote addresses by adding keyword remote at the end of the command.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC&gt; show ovsdb mac \nLogical Switch Name: Contrail-c68a622b-9248-4535-bf04-4859012d7a2a \nMac                                    IP                                 Encapsulation                                          Vtep \nAddress                                Address                                                                                   Address \nff:ff:ff:ff:ff:ff                      0.0.0.0                            Vxlan over Ipv4                                        10.10.80.6 \n10:0e:7e:bf:9e:ec                      0.0.0.0                            Vxlan over Ipv4                                        10.10.80.6 \n02:30:84:c3:d1:13                      0.0.0.0                            Vxlan over Ipv4                                        10.100.10.2 \n02:e1:bb:af:65:11                      0.0.0.0                            Vxlan over Ipv4                                        10.100.10.4 \n02:fc:94:91:42:f2                      0.0.0.0                            Vxlan over Ipv4                                        10.100.10.5 \n1a:7f:6d:fb:0e:3d                      0.0.0.0                            Vxlan over Ipv4                                        10.100.10.7 \n40:a6:77:9a:b3:38                      0.0.0.0                            Vxlan over Ipv4                                        10.10.80.4 \nff:ff:ff:ff:ff:ff                      0.0.0.0                            Vxlan over Ipv4                                        10.100.10.6 \n\nsofttronik@QFX5100_VC&gt; show ovsdb virtual-tunnel-end-point \n\nEncapsulation                   Ip Address                               Num of MAC's \nVXLAN over IPv4                 10.10.80.4                               1\nVXLAN over IPv4                 10.10.80.6                               2 \nVXLAN over IPv4                 10.100.10.2                              1 \nVXLAN over IPv4                 10.100.10.4                              1 \nVXLAN over IPv4                 10.100.10.5                              1 \nVXLAN over IPv4                 10.100.10.6                              1 \nVXLAN over IPv4                 10.100.10.7                              1<\/span><\/pre>\n<p>With this command we can see all Vtep addresses present in out network.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC&gt; show vlans \nRouting instance        VLAN name                                               Tag              Interfaces \ndefault-switch          Contrail-c68a622b-9248-4535-bf04-4859012d7a2a           NA               vtep.32769* \n                                                                                                 vtep.32770* \n                                                                                                 vtep.32771* \n                                                                                                 vtep.32772* \n                                                                                                 vtep.32773* \n                                                                                                 vtep.32774* \n                                                                                                 xe-0\/0\/40.1000*<\/span><\/pre>\n<p>Vtep interfaces can be also listed with <em>show interfaces terse vtep<\/em> command.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC&gt; show interfaces terse vtep \nInterface                Admin            Link            Proto            Local           Remote \nvtep                     up               up \nvtep.32768               up               up \nvtep.32769               up               up              eth-switch   \nvtep.32770               up               up              eth-switch \nvtep.32771               up               up              eth-switch \nvtep.32772               up               up              eth-switch \nvtep.32773               up               up              eth-switch \nvtep.32774               up               up              eth-switch<\/span><\/pre>\n<p>To see detailed information, use the previous command with particular interface.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">softtronik@QFX5100_VC&gt; show interfaces vtep.32769 \n     Logical interface vtep.32769 (Index 576)(SNMP ifIndex 544) \n           Flags: Up SNMP-Traps Encapsulation: ENET2 \n           VXLAN Endpoint Type: Remote, VXLAN Endpoint Address: 10.100.10.2, L2 Routing Instance: default-switch, L3 Routing Instance: default \n           Input packets : 0 \n           Output packets: 8 \n           Protocol eth-switch, MTU: 1600 \n              Flags: Trunk-Mode\n\n<\/span><\/pre>\n<div class=\"section\">\n<div id=\"redundant-connection-of-bare-metal-servers\" class=\"section\">\n<h3>Redundant Connection of Bare Metal Servers<\/h3>\n<p>We wanted to use MC-LAG (QFX in virtual chassis) to enable run LACP on both ports, but MC-LAG is not currently supported with VxLAN (but it\u2019s on the roadmap). Therefore only viable option is to connect both port into same Virtual Network (VNI) and configure active-passive bonding on the bare metal server.<\/p>\n<\/div>\n<\/div>\n<h2>CONTRAIL BAREMETAL TOR IMPLEMENTATION WITH OPENVSWITCH VTEP<\/h2>\n<p>We tested and verified Juniper QFX5100 works well as TOR switch in the previous section, which was no surprise to us because they are from the same vendor. At this part we want to show that Contrail in not a vendor locked-in solution by using standard network protocols. There are several switch vendors (Cumulus, Arista) who support OVSDB capability in their boxes. We have decided to proof this openness on OpenVSwitch.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/OVS.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6377\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/OVS.png\" alt=\"OVS\" width=\"528\" height=\"450\" data-id=\"6377\" \/><\/a><\/p>\n<p>We deployed another two physical server OVS, BSM02 and ToR agent TNS1-02. OVS server with openvswitch represents same role as Juniper QFX. We tested 3 use cases:<\/p>\n<ul class=\"simple\">\n<li>simulate netns <em>ns1<\/em> namespaces as BMS endpoint<\/li>\n<li>install KVM on OVS and launch VM5 as BMS endpoint<\/li>\n<li>use physical NIC eth3 and connect BMS02 physical bare metal server<\/li>\n<\/ul>\n<p class=\"section\">Scenario for testing:<\/p>\n<p>1. Create TOR agent &#8211; deploy TOR agent for managing OVS<br \/>\n2. Setup OVS &#8211; install openvswitch-vtep, configure physical switch and connect namespace.<br \/>\n3. Connect KVM VM to cloud &#8211; install kvm, launch VM5 with OVS interface and connect through a new logical port.<br \/>\n4. Connect BMS to cloud &#8211; add OVS physical interface eth2 and verify connectivity from BMS02.<\/p>\n<h3>Create TOR agent<\/h3>\n<p class=\"section\">In previous chapter we used tns1-01 TOR agent for QFX5100. If we want to manage another switch via OVSDB, next TOR agent service has to be started. It can be done on the same TNS node. Provisioning can be done through Fabric, but we show how to do that manually. Start witch copying config file of tns1-01 agent.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@tns01:~# cp \/etc\/contrail\/contrail-tor-agent-1.conf \/etc\/contrail\/contrail-tor-agent-2.conf<\/span><\/pre>\n<p>Then we had to change some values in this copied file.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">[DEFAULT]agent_name=tns01-2 \nlog_file=\/var\/log\/contrail\/contrail-tor-agent-2.log \nhttp_server_port=8086 \n[TOR]tor_ip=10.100.10.7<\/span><\/pre>\n<p>We have copy of supervisor file to start new service also.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@tns01:~# cp \/etc\/contrail\/supervisord_vrouter_files\/contrail-tor-agent-1.ini \/etc\/contrail\/supervisord_vrouter_files\/contrail-tor-agent-2.ini<\/span><\/pre>\n<p>And change these configuration values.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">command=\/usr\/bin\/contrail-tor-agent --config_file \/etc\/contrail\/contrail-tor-agent-2.conf \nstdout_logfile=\/var\/log\/contrail\/contrail-tor-agent-2-stdout.log<\/span><\/pre>\n<p>Now restart supervisor to see changes.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@tns01:~# service supervisor-vrouter restart<\/span><\/pre>\n<p>And verify changes:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@tns01:~# contrail-status \n== Contrail vRouter== \nsupervisor-vrouter:            active \ncontrail-tor-agent-1           active \ncontrail-tor-agent-2           active \ncontrail-vrouter-agent         active \ncontrail-vrouter-nodemgr       active \n\n<\/span><\/pre>\n<h3>Setup OVS<\/h3>\n<p class=\"section\">We need to install at least openvswitch-2.3.1, because it has ovs-vtep with VTEP simulator <a id=\"id4\" class=\"reference internal\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#vtep\">[vtep]<\/a>. However Ubuntu 14.04.2 contains 2.0.2. Therefore you have to build your own packages or use source tarball. We found packages at PPA <a class=\"reference external\" href=\"https:\/\/launchpad.net\/~vshn\/+archive\/ubuntu\/openvswitch\">https:\/\/launchpad.net\/~vshn\/+archive\/ubuntu\/openvswitch<\/a>.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# cat \/etc\/apt\/sources.list.d\/ovs.list \ndeb http:\/\/ppa.launchpad.net\/vshn\/openvswitch\/ubuntu trusty main \ndeb-src http:\/\/ppa.launchpad.net\/vshn\/openvswitch\/ubuntu trusty main \n\nroot@ovs:~# apt-get install openvswitch-vtep<\/span><\/pre>\n<p>We have to delete default existing database created during installation.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#rm \/etc\/openvswitch\/*.db<\/span><\/pre>\n<p>And create two new databases: ovs.db and vtep.db<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ovsdb-tool create \/etc\/openvswitch\/ovs.db \/usr\/share\/openvswitch\/vswitch.ovsschema ; ovsdb-tool create \/etc\/openvswitch\/vtep.db \/usr\/share\/openvswitch\/vtep.ovsschema<\/span><\/pre>\n<p>Restart services and make sure, that the ptcp port number matches the port number in contrail-tor-agent-2.conf on TNS node.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#service openvswitch-switch stop \nroot@ovs:~#ovsdb-server --pidfile --detach --log-file --remote punix:\/var\/run\/openvswitch\/db.sock --remote=db:hardware_vtep,Global,managers --remote ptcp:6632 \/etc\/openvswitch\/ovs.db \/etc\/openvswitch\/vtep.db root@ovs:~#ovs-vswitchd --log-file --detach --pidfile unix:\/var\/run\/openvswitch\/db.sock<\/span><\/pre>\n<p>Verify creation of databases with:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ovsdb-client list-dbs unix:\/var\/run\/openvswitch\/db.sock \nOpen_vSwitch \nhardware_vtep<\/span><\/pre>\n<p>First we need to test our installation with connecting namespace to virtual network. Start with creating bridge.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ovs-vsctl add-br TOR1 \nroot@ovs:~#vtep-ctl add-ps TOR1<\/span><\/pre>\n<p>Setup VTEP of bridge. IP addresses are underlay addresses of our node with OVS.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#vtep-ctl set Physical_Switch TOR1 tunnel_ips=10.100.10.7 \nroot@ovs:~#vtep-ctl set Physical_Switch TOR1 management_ips=10.100.10.7 \nroot@ovs:~#python \/usr\/share\/openvswitch\/scripts\/ovs-vtep --log-file=\/var\/log\/openvswitch\/ovs-vtep.log --pidfile=\/var\/run\/openvswitch\/ovs-vtep.pid --detach TOR1<\/span><\/pre>\n<p>Now create namespace and link its interface with OVS interface.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ip netns add ns1 \nroot@ovs:~#ip link add nstap1 type veth peer name tortap1 \nroot@ovs:~#ovs-vsctl add-port TOR1 tortap1 \nroot@ovs:~#ip link set nstap1 netns ns1 \nroot@ovs:~#ip netns exec ns1 ip link set dev nstap1 up \nroot@ovs:~#ip link set dev tortap1 up<\/span><\/pre>\n<p>And configure namespace to be able to communicate with world.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ip netns\nroot@ovs:~#ip netns exec ns1 ip a a 127.0.0.1\/8 dev lo\nroot@ovs:~#ip netns exec ns1 ip a\nroot@ovs:~#ip netns exec ns1 ip a a 10.0.10.120\/24 dev nstap1\nroot@ovs:~#ip netns exec ns1 ping 10.0.10.120\nroot@ovs:~#ip netns exec ns1 ip link set up dev lo\nroot@ovs:~#ip netns exec ns1 ping 10.0.10.120<\/span><\/pre>\n<p>You can verify previous steps with looking into database.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list Physical_Switch\n_uuid               : f00f2242-409e-43fc-8d4f-32e2225937d8\ndescription         : \"OVS VTEP Emulator\"\nmanagement_ips      : [\"10.100.10.7\"]\nname                : \"TOR1\"\nports               : [82afe753-25f8-4127-839b-2c5c8f7948b2]\nswitch_fault_status : []\ntunnel_ips          : [\"10.100.10.7\"]\ntunnels             : []<\/span><\/pre>\n<p>Now we have to add TOR1 as a new physical device in Contrail managed by TOR agent tns01-2.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-6380\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/edit-physical-router.png\" alt=\"edit-physical-router\" width=\"697\" height=\"514\" data-id=\"6380\" \/><\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-6381\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/physical-routers.png\" alt=\"physical-routers\" width=\"806\" height=\"187\" data-id=\"6381\" \/><\/p>\n<p>Then create physical port tortap1 with logical tortap1.0 interface, which goes to our ns1 namespace.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/interfaces.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6382\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/interfaces.png\" alt=\"interfaces\" width=\"972\" height=\"300\" data-id=\"6382\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>We can verify Contrail configuration by following output.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list-ls\nContrail-c68a622b-9248-4535-bf04-4859012d7a2a<\/span><\/pre>\n<p>Check namespace IP addresses.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ip netns exec ns1 ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link\/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1\/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1\/128 scope host\n       valid_lft forever preferred_lft forever\n7: nstap1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link\/ether 1a:7f:6d:fb:0e:3d brd ff:ff:ff:ff:ff:ff\n    inet 10.0.10.120\/24 scope global nstap1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::187f:6dff:fefb:e3d\/64 scope link\n       valid_lft forever preferred_lft forever<\/span><\/pre>\n<p>Try to ping VM4 from ns1.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ip netns exec ns1 ping 10.0.10.3\nPING 10.0.10.3 (10.0.10.3) 56(84) bytes of data.\n64 bytes from 10.0.10.3: icmp_seq=1 ttl=64 time=1.25 ms\n64 bytes from 10.0.10.3: icmp_seq=2 ttl=64 time=0.311 ms\n64 bytes from 10.0.10.3: icmp_seq=3 ttl=64 time=0.307 ms\n64 bytes from 10.0.10.3: icmp_seq=4 ttl=64 time=0.270 ms\n^C\n--- 10.0.10.3 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2999ms\nrtt min\/avg\/max\/mdev = 0.270\/0.536\/1.256\/0.416 ms<\/span><\/pre>\n<p>Following output shows all interface on physical server OVS.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link\/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1\/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1\/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link\/ether 00:50:56:95:60:e8 brd ff:ff:ff:ff:ff:ff\n    inet 10.10.70.135\/24 brd 10.10.70.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::250:56ff:fe95:60e8\/64 scope link\n       valid_lft forever preferred_lft forever\n3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link\/ether 00:50:56:95:6b:14 brd ff:ff:ff:ff:ff:ff\n    inet 10.100.10.7\/24 brd 10.100.10.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::250:56ff:fe95:6b14\/64 scope link\n       valid_lft forever preferred_lft forever\n4: ovs-system: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default\n    link\/ether 4a:4f:14:53:c6:df brd ff:ff:ff:ff:ff:ff\n5: TOR1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default\n    link\/ether 2a:11:8c:74:61:46 brd ff:ff:ff:ff:ff:ff\n6: tortap1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master ovs-system state UP group default qlen 1000\n    link\/ether 16:62:97:5a:62:e8 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::1462:97ff:fe5a:62e8\/64 scope link\n       valid_lft forever preferred_lft forever\n8: vtep_ls1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default\n    link\/ether 62:2b:86:c3:c2:4b brd ff:ff:ff:ff:ff:ff <\/span><\/pre>\n<p>Following output shows openvswitch configuration. Patch ports 0000-tortap1-p and 0000-tortap1-lwere created by Contrail.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ovs-vsctl show\n93d90385-f9c6-4cfc-b67d-4f64eec15479\n    Bridge \"TOR1\"\n        Port \"TOR1\"\n            Interface \"TOR1\"type: internal\n        Port \"tortap1\"\n            Interface \"tortap1\"\n        Port \"0000-tortap1-p\"\n            Interface \"0000-tortap1-p\"type: patch\n                options: {peer=\"0000-tortap1-l\"}\n    Bridge \"vtep_ls1\"\n        Port \"vx4\"\n            Interface \"vx4\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.2\"}\n        Port \"vx2\"\n            Interface \"vx2\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.5\"}\n        Port \"vx5\"\n            Interface \"vx5\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.6\"}\n        Port \"vx3\"\n            Interface \"vx3\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.4\"}\n        Port \"vx9\"\n            Interface \"vx9\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.10.80.6\"}\n        Port \"vtep_ls1\"\n            Interface \"vtep_ls1\"type: internal\n        Port \"0000-tortap1-l\"\n            Interface \"0000-tortap1-l\"type: patch\n                options: {peer=\"0000-tortap1-p\"}<\/span><\/pre>\n<h4>Connect KVM VM to the Cloud<\/h4>\n<p>Now we want to try to boot VM5 on OVS server and connect it into our virtual network as a bare metal server. At first we need to install qemu and boot a virtual machine.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">sudo apt-get install qemu-system-x86 ubuntu-vm-builder uml-utilities\nsudo ubuntu-vm-builder kvm precise<\/span><\/pre>\n<p>Once that is done, create a VM, if necessary, and edit its Domain XML file:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# virsh list\n Id    Name                           State\n----------------------------------------------------\n 7     ubuntu                         running\n\n% virsh destroy ubuntu\n% virsh edit ubuntu<\/span><\/pre>\n<p>Look at the Domain XML file the section. There should be one XML section for each interface the VM<\/p>\n<div id=\"stcpDiv\">\n<p class=\"section\">has.<\/p>\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre>&lt;interface <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'network'<\/span>&gt;\n &lt;mac <span class=\"nv\">address<\/span><span class=\"o\">=<\/span><span class=\"s1\">'52:54:00:3a:b6:13'<\/span>\/&gt;\n &lt;<span class=\"nb\">source <\/span><span class=\"nv\">network<\/span><span class=\"o\">=<\/span><span class=\"s1\">'default'<\/span>\/&gt;\n &lt;address <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'pci'<\/span><span class=\"nv\">domain<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0000'<\/span><span class=\"nv\">bus<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x00'<\/span><span class=\"nv\">slot<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x03'<\/span><span class=\"k\">function<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0'<\/span>\/&gt;\n&lt;\/interface&gt;\n<\/pre>\n<\/div>\n<\/div>\n<p class=\"section\">And change it to something like this:<\/p>\n<div id=\"stcpDiv\">\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre>&lt;interface <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'bridge'<\/span>&gt;\n &lt;mac <span class=\"nv\">address<\/span><span class=\"o\">=<\/span><span class=\"s1\">'52:54:00:3a:b6:13'<\/span>\/&gt;\n &lt;<span class=\"nb\">source <\/span><span class=\"nv\">bridge<\/span><span class=\"o\">=<\/span><span class=\"s1\">'TOR1'<\/span>\/&gt;\n &lt;virtualport <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'openvswitch'<\/span>\/&gt;\n &lt;address <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'pci'<\/span><span class=\"nv\">domain<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0000'<\/span><span class=\"nv\">bus<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x00'<\/span><span class=\"nv\">slot<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x03'<\/span><span class=\"k\">function<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0'<\/span>\/&gt;\n&lt;\/interface&gt;\n<\/pre>\n<\/div>\n<\/div>\n<p>Start VM5 and verify that it uses openvswitch interface. There is automatically created interface<\/p>\n<div id=\"stcpDiv\">\n<p class=\"section\">vnet0.<\/p>\n<div class=\"highlight-bash\">\n<div class=\"highlight\">\n<pre>    % virsh start ubuntu\n\n&lt;interface <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'bridge'<\/span>&gt;\n  &lt;mac <span class=\"nv\">address<\/span><span class=\"o\">=<\/span><span class=\"s1\">'52:54:00:3a:b6:13'<\/span>\/&gt;\n  &lt;<span class=\"nb\">source <\/span><span class=\"nv\">bridge<\/span><span class=\"o\">=<\/span><span class=\"s1\">'TOR1'<\/span>\/&gt;\n  &lt;virtualport <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'openvswitch'<\/span>&gt;\n    &lt;parameters <span class=\"nv\">interfaceid<\/span><span class=\"o\">=<\/span><span class=\"s1\">'5def61f9-7123-43a5-b7ae-35f0fbd22fca'<\/span>\/&gt;\n  &lt;\/virtualport&gt;\n  &lt;target <span class=\"nv\">dev<\/span><span class=\"o\">=<\/span><span class=\"s1\">'vnet0'<\/span>\/&gt;\n  &lt;model <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'virtio'<\/span>\/&gt;\n  &lt;<span class=\"nb\">alias <\/span><span class=\"nv\">name<\/span><span class=\"o\">=<\/span><span class=\"s1\">'net0'<\/span>\/&gt;\n  &lt;address <span class=\"nb\">type<\/span><span class=\"o\">=<\/span><span class=\"s1\">'pci'<\/span><span class=\"nv\">domain<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0000'<\/span><span class=\"nv\">bus<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x00'<\/span><span class=\"nv\">slot<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x03'<\/span><span class=\"k\">function<\/span><span class=\"o\">=<\/span><span class=\"s1\">'0x0'<\/span>\/&gt;\n&lt;\/interface&gt;\n<\/pre>\n<\/div>\n<\/div>\n<p class=\"section\">Now we can add a new port vnet0 as physical and logical port in Contrail.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-6383\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/add-vnet0.png\" alt=\"add-vnet0\" width=\"700\" height=\"433\" data-id=\"6383\" \/><\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-ports-vnet0.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6384\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-ports-vnet0.png\" alt=\"logical-ports-vnet0\" width=\"833\" height=\"300\" data-id=\"6384\" \/><\/a><\/p>\n<p>We can check new patch interfaces in openvswitch.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ovs-vsctl show\n93d90385-f9c6-4cfc-b67d-4f64eec15479\n    Bridge \"TOR1\"\n        Port \"vnet0\"\n            Interface \"vnet0\"\n        Port \"TOR1\"\n            Interface \"TOR1\"type: internal\n        Port \"tortap1\"\n            Interface \"tortap1\"\n        Port \"0000-vnet0-p\"\n            Interface \"0000-vnet0-p\"type: patch\n                options: {peer=\"0000-vnet0-l\"}\n        Port \"0000-tortap1-p\"\n            Interface \"0000-tortap1-p\"type: patch\n                options: {peer=\"0000-tortap1-l\"}\n    Bridge \"vtep_ls1\"\n        Port \"vx4\"\n            Interface \"vx4\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.2\"}\n        Port \"0000-vnet0-l\"\n            Interface \"0000-vnet0-l\"type: patch\n                options: {peer=\"0000-vnet0-p\"}\n        Port \"vx2\"\n            Interface \"vx2\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.5\"}\n        Port \"vx5\"\n            Interface \"vx5\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.6\"}\n        Port \"vx3\"\n            Interface \"vx3\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.4\"}\n        Port \"vtep_ls1\"\n            Interface \"vtep_ls1\"type: internal\n        Port \"0000-tortap1-l\"\n            Interface \"0000-tortap1-l\"type: patch\n                options: {peer=\"0000-tortap1-p\"}<\/span><\/pre>\n<p>We can open console at VM5, manually set IP address and try to ping VM4.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-6385\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/ubuntu-vm-ping.png\" alt=\"ubuntu-vm-ping\" width=\"796\" height=\"545\" data-id=\"6385\" \/><\/p>\n<p>We can check the same thing from baremetal namespace.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ip netns exec ns1 ping 10.0.10.121\nPING 10.0.10.121 (10.0.10.121) 56(84) bytes of data.\n64 bytes from 10.0.10.121: icmp_seq=1 ttl=64 time=0.709 ms\n64 bytes from 10.0.10.121: icmp_seq=2 ttl=64 time=0.432 ms\n64 bytes from 10.0.10.121: icmp_seq=3 ttl=64 time=0.302 ms\n^C\n--- 10.0.10.121 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 1999ms\nrtt min\/avg\/max\/mdev = 0.302\/0.481\/0.709\/0.169 ms<\/span><\/pre>\n<p>The following screen shows L2 routes at vRouter with VM4, where you can see all details about VxLAN tunnel.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/l2-vxlan-tunnel.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6386\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/l2-vxlan-tunnel.png\" alt=\"l2-vxlan-tunnel\" width=\"692\" height=\"350\" data-id=\"6386\" \/><\/a><\/p>\n<h3>Connect BMS to cloud<\/h3>\n<p class=\"section\">Last test use case is to connect another baremetal server BMS02 through the physical NIC of OVS server.In this case OVS server represents a true switch.Add a physical interface eth3to you server with OVS.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~#ovs-vsctl add-port TOR1 eth3\n\nroot@ovs:~# ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link\/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1\/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1\/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link\/ether 00:50:56:95:60:e8 brd ff:ff:ff:ff:ff:ff\n    inet 10.10.70.135\/24 brd 10.10.70.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::250:56ff:fe95:60e8\/64 scope link\n       valid_lft forever preferred_lft forever\n...\n24: eth3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master ovs-system state UP group default qlen 1000\n    link\/ether 00:50:56:95:e0:21 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::250:56ff:fe95:e021\/64 scope link\n       valid_lft forever preferred_lft forever<\/span><\/pre>\n<p>Create physical and logical ports for eth3.<\/p>\n<p><a href=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-ports-eth3.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-6387\" src=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/logical-ports-eth3.png\" alt=\"logical-ports-eth3\" width=\"722\" height=\"300\" data-id=\"6387\" \/><\/a><\/p>\n<p>Check new ports in openvswitch.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ovs-vsctl show\n93d90385-f9c6-4cfc-b67d-4f64eec15479\n    Bridge \"TOR1\"\n        ...\n        Port \"TOR1\"\n            Interface \"TOR1\"type: internal\n        Port \"0000-eth3-p\"\n            Interface \"0000-eth3-p\"type: patch\n                options: {peer=\"0000-eth3-l\"}\n        Port \"eth3\"\n            Interface \"eth3\"\n        ...\n    Bridge \"vtep_ls1\"\n        Port \"vx17\"\n            Interface \"vx17\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.10.80.4\"}\n        Port \"vx4\"\n            Interface \"vx4\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.2\"}\n        Port \"vx2\"\n            Interface \"vx2\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.5\"}\n        Port \"0000-vnet0-l\"\n            Interface \"0000-vnet0-l\"type: patch\n                options: {peer=\"0000-vnet0-p\"}\n        Port \"0000-tortap1-l\"\n            Interface \"0000-tortap1-l\"type: patch\n                options: {peer=\"0000-tortap1-p\"}\n        Port \"vx5\"\n            Interface \"vx5\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.6\"}\n        Port \"vx3\"\n            Interface \"vx3\"type: vxlan\n                options: {key=\"10\", remote_ip=\"10.100.10.4\"}\n        Port \"vtep_ls1\"\n            Interface \"vtep_ls1\"type: internal\n        Port \"0000-eth3-l\"\n            Interface \"0000-eth3-l\"type: patch\n                options: {peer=\"0000-eth3-p\"}<\/span><\/pre>\n<p>As you can see it is possible to ping cloud instance from our bare metal server.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs2:~# ping 10.0.10.3\nPING 10.0.10.3 (10.0.10.3) 56(84) bytes of data.\n64 bytes from 10.0.10.3: icmp_seq=2 ttl=64 time=1.10 ms\n64 bytes from 10.0.10.3: icmp_seq=3 ttl=64 time=0.387 ms\n64 bytes from 10.0.10.3: icmp_seq=4 ttl=64 time=0.428 ms\n64 bytes from 10.0.10.3: icmp_seq=5 ttl=64 time=0.378 ms\n64 bytes from 10.0.10.3: icmp_seq=6 ttl=64 time=0.419 ms\n64 bytes from 10.0.10.3: icmp_seq=7 ttl=64 time=0.382 ms\n^C\n--- 10.0.10.3 ping statistics ---\n7 packets transmitted, 6 received, 14% packet loss, time 6005ms\nrtt min\/avg\/max\/mdev = 0.378\/0.516\/1.102\/0.262 ms<\/span><\/pre>\n<h3>Verification<\/h3>\n<p>OVS maintains network information in database. To list existing tables use:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# ovsdb-client list-tables unix:\/var\/run\/openvswitch\/db.sock hardware_vtep\nTable\n---------------------\nPhysical_Port\nPhysical_Locator_Set\nPhysical_Locator\nLogical_Binding_Stats\nArp_Sources_Remote\nManager\nMcast_Macs_Local\nGlobal\nUcast_Macs_Local\nLogical_Switch\nPhysical_Switch\nUcast_Macs_Remote\nTunnel\nMcast_Macs_Remote\nLogical_Router\nArp_Sources_Local<\/span><\/pre>\n<p>To view the content of these tables in readable format use vtep-ctl listcommand with table\u2019s name at the end.The list of physical interfaces associated with ovs.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list Physical_Port\n        _uuid               : ac4a8bb8-bd11-47d3-a5ac-9828c5f68ffc\n        description         : \"\"\n        name                : \"eth3\"\n        port_fault_status   : []\n        vlan_bindings       : {0=4f016591-56ce-496f-996e-a93203061e07}\n        vlan_stats          : {0=288fe0f7-d7b8-430a-beb4-0c0a2c536a9c}\n\n        _uuid               : 41f87dae-6568-4fc9-97fc-46ec3d2fbfdd\n        description         : \"\"\n        name                : \"vnet0\"\n        port_fault_status   : []\n        vlan_bindings       : {0=4f016591-56ce-496f-996e-a93203061e07}\n        vlan_stats          : {0=12d70df8-6448-4784-af0d-754f37847942}\n\n        _uuid               : 82afe753-25f8-4127-839b-2c5c8f7948b2\n        description         : \"\"\n        name                : \"tortap1\"\n        port_fault_status   : []\n        vlan_bindings       : {0=4f016591-56ce-496f-996e-a93203061e07}\n        vlan_stats          : {0=e68cc29d-72c3-4809-a013-32c91a119b11}<\/span><\/pre>\n<p>To see remote MAC addresses and their next hop VTEPs we have to first find out name of our logical switch.<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list-ls\nContrail-c68a622b-9248-4535-bf04-4859012d7a2a<\/span><\/pre>\n<p>Then list remote macs:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list-remote-macs Contrail-c68a622b-9248-4535-bf04-4859012d7a2a\nucast-mac-remote\n  02:30:84:c3:d1:13 -&gt; vxlan_over_ipv4\/10.100.10.2\n  02:e1:bb:af:65:11 -&gt; vxlan_over_ipv4\/10.100.10.4\n  02:fc:94:91:42:f2 -&gt; vxlan_over_ipv4\/10.100.10.5\n  40:a6:77:9a:b3:38 -&gt; vxlan_over_ipv4\/10.10.80.4\n\nmcast-mac-remote\n  unknown-dst -&gt; vxlan_over_ipv4\/10.100.10.6<\/span><\/pre>\n<p>As we can see, unknown traffic is handled by TOR agent.To list local MACs type:<\/p>\n<pre><span style=\"font-family: 'courier new', courier;\">root@ovs:~# vtep-ctl list-local-macs Contrail-c68a622b-9248-4535-bf04-4859012d7a2a\nucast-mac-local\n  1a:7f:6d:fb:0e:3d -&gt; vxlan_over_ipv4\/10.100.10.7\n\nmcast-mac-local\n  unknown-dst -&gt; vxlan_over_ipv4\/10.100.10.7\n\n<\/span><\/pre>\n<div id=\"conclusion\" class=\"section\">\n<h2>CONCLUSION<\/h2>\n<p>We tested almost all scenarios for bare-metal connection to overlay networks on different devices. We proved that OpenContrail is working open source, multi-vendor SDN solution, which moves OpenStack cloud to the next level suitable for large enterprises.<\/p>\n<p>In future parts of this blog we would like to look at High Availability setup of TOR agent, which has been added in Contrail 2.2. Our next post will focus on route gateways with functions like VxLAN to EVPN Stitching for L2 Extension, L3VPN, multi-vendor support and gateway redundancy.<\/p>\n<div class=\"line-block\">\n<p class=\"line\"><strong>Marek Celoud &amp; Jakub Pavlik<\/strong><br \/>\ntcp cloud engineers<\/p>\n<\/div>\n<div class=\"line-block\">\n<p class=\"line\"><strong>Rostislav Safar<\/strong><br \/>\nArrow ECS network engineer<\/p>\n<\/div>\n<\/div>\n<div id=\"resources\" class=\"section\">\n<h2>RESOURCES<\/h2>\n<table id=\"contrailtor\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\">[ContrailToR]<\/td>\n<td><em>(<a class=\"fn-backref\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#id1\">1<\/a>, <a class=\"fn-backref\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#id2\">2<\/a>)<\/em> Using TOR Switches with OVSDB for Virtual Instance Support <a href=\"http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/concept\/using-tor-ovsdb-contrail.html\" target=\"_blank\">http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/concept\/using-tor-ovsdb-contrail.html<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"torha\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\">[TorHA]<\/td>\n<td>High Availability for Contrail TOR Agent <a href=\"http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/concept\/ha-tor-agnt.html\" target=\"_blank\">http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/concept\/ha-tor-agnt.html<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"site\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#id3\">[site]<\/a><\/td>\n<td>Juniper Contrail documentation <a href=\"http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/task\/installation\/install-overview-vnc.html\" target=\"_blank\">http:\/\/www.juniper.net\/techpubs\/en_US\/contrail2.2\/topics\/task\/installation\/install-overview-vnc.html<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"vtep\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"http:\/\/tcpcloud.eu\/en\/blog\/2015\/07\/13\/opencontrail-sdn-lab-testing-1-tor-switches-ovsdb\/#id4\">[vtep]<\/a><\/td>\n<td>How to Use the VTEP Emulator <a class=\"reference external\" href=\"https:\/\/github.com\/openvswitch\/ovs\/blob\/master\/vtep\/README.ovs-vtep.md\">https:\/\/github.com\/openvswitch\/ovs\/blob\/master\/vtep\/README.ovs-vtep.md<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"ovscontrail\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\">[ovscontrail]<\/td>\n<td>Setting up openvswitch VM for Contrail Baremetal <a class=\"reference external\" href=\"https:\/\/github.com\/Juniper\/contrail-test\/wiki\/Setting-up-an-openvswitch-VM-for-Contrail-Baremetal-tests\">https:\/\/github.com\/Juniper\/contrail-test\/wiki\/Setting-up-an-openvswitch-VM-for-Contrail-Baremetal-tests<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"vxlanovsdb\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\">[vxlanovsdb]<\/td>\n<td>Enhancing VM mobility with VxLAN OVSDB <a class=\"reference external\" href=\"http:\/\/mcleonard.blogspot.cz\/2013\/12\/enhancing-vm-mobility-with-vxlan-ovsdb.html\">http:\/\/mcleonard.blogspot.cz\/2013\/12\/enhancing-vm-mobility-with-vxlan-ovsdb.html<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table id=\"ovslibvirt\" class=\"docutils citation\" frame=\"void\" rules=\"none\">\n<colgroup>\n<col class=\"label\" \/>\n<col \/><\/colgroup>\n<tbody valign=\"top\">\n<tr>\n<td class=\"label\">[ovslibvirt]<\/td>\n<td>Libvirt configuration with openvswitch <a class=\"reference external\" href=\"https:\/\/github.com\/openvswitch\/ovs\/blob\/master\/INSTALL.Libvirt.md\">https:\/\/github.com\/openvswitch\/ovs\/blob\/master\/INSTALL.Libvirt.md<\/a><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This is a guest blog from tcpCloud authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers) along with Rostislav Safar (Arrow ECS network engineer). To see the original post,&#8230;<\/p>\n","protected":false},"author":479,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[5,15,6,7,8,1],"tags":[],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v21.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric\" \/>\n<meta property=\"og:description\" content=\"This is a guest blog from tcpCloud authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers) along with Rostislav Safar (Arrow ECS network engineer). To see the original post,...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/\" \/>\n<meta property=\"og:site_name\" content=\"Tungsten Fabric\" \/>\n<meta property=\"article:published_time\" content=\"2015-07-14T00:03:02+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/rack_oc_image1.png\" \/>\n<meta name=\"author\" content=\"Jakub Pavlik\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/\",\"url\":\"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/\",\"name\":\"OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric\",\"isPartOf\":{\"@id\":\"https:\/\/tungsten.io\/#website\"},\"datePublished\":\"2015-07-14T00:03:02+00:00\",\"dateModified\":\"2015-07-14T00:03:02+00:00\",\"author\":{\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/\"]}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/tungsten.io\/#website\",\"url\":\"https:\/\/tungsten.io\/\",\"name\":\"Tungsten Fabric\",\"description\":\"multicloud multistack SDN\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/tungsten.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75\",\"name\":\"Jakub Pavlik\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/tungsten.io\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg\",\"caption\":\"Jakub Pavlik\"},\"url\":\"https:\/\/tungsten.io\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/","og_locale":"en_US","og_type":"article","og_title":"OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric","og_description":"This is a guest blog from tcpCloud authored by Marek Celoud &amp; Jakub Pavlik (tcp cloud engineers) along with Rostislav Safar (Arrow ECS network engineer). To see the original post,...","og_url":"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/","og_site_name":"Tungsten Fabric","article_published_time":"2015-07-14T00:03:02+00:00","og_image":[{"url":"http:\/\/www.opencontrail.org\/wp-content\/uploads\/2015\/07\/rack_oc_image1.png"}],"author":"Jakub Pavlik","twitter_card":"summary_large_image","schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/","url":"https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/","name":"OpenContrail SDN Lab testing 1 - ToR Switches with OVSDB - Tungsten Fabric","isPartOf":{"@id":"https:\/\/tungsten.io\/#website"},"datePublished":"2015-07-14T00:03:02+00:00","dateModified":"2015-07-14T00:03:02+00:00","author":{"@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/tungsten.io\/opencontrail-sdn-lab-testing-1-tor-switches-with-ovsdb\/"]}]},{"@type":"WebSite","@id":"https:\/\/tungsten.io\/#website","url":"https:\/\/tungsten.io\/","name":"Tungsten Fabric","description":"multicloud multistack SDN","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/tungsten.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/tungsten.io\/#\/schema\/person\/fa242938c01e9144363e911cf07ecd75","name":"Jakub Pavlik","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/tungsten.io\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0fe1e918e30d022ef4c9895cc59c9d7f?s=96&d=mm&r=pg","caption":"Jakub Pavlik"},"url":"https:\/\/tungsten.io"}]}},"_links":{"self":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/6368"}],"collection":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/users\/479"}],"replies":[{"embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/comments?post=6368"}],"version-history":[{"count":0,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/posts\/6368\/revisions"}],"wp:attachment":[{"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/media?parent=6368"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/categories?post=6368"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/tungsten.io\/wp-json\/wp\/v2\/tags?post=6368"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}